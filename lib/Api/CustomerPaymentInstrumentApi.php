<?php
/**
 * CustomerPaymentInstrumentApi
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Api;

use \CyberSource\ApiClient;
use \CyberSource\ApiException;
use \CyberSource\Configuration;
use \CyberSource\ObjectSerializer;

/**
 * CustomerPaymentInstrumentApi Class Doc Comment
 *
 * @category Class
 * @package  CyberSource
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerPaymentInstrumentApi
{
    /**
     * API Client
     *
     * @var \CyberSource\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \CyberSource\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\CyberSource\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \CyberSource\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \CyberSource\ApiClient $apiClient set the API client
     *
     * @return CustomerPaymentInstrumentApi
     */
    public function setApiClient(\CyberSource\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteCustomerPaymentInstrument
     *
     * Delete a Customer Payment Instrument
     *
     * @param string $customerTokenId The TokenId of a customer. (required)
     * @param string $paymentInstrumentTokenId The TokenId of a payment instrument. (required)
     * @param string $profileId The id of a profile containing user specific TMS configuration. (optional)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return array of void, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomerPaymentInstrument($customerTokenId, $paymentInstrumentTokenId, $profileId = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteCustomerPaymentInstrumentWithHttpInfo($customerTokenId, $paymentInstrumentTokenId, $profileId);
        return [$response, $statusCode, $httpHeader];
    }

    /**
     * Operation deleteCustomerPaymentInstrumentWithHttpInfo
     *
     * Delete a Customer Payment Instrument
     *
     * @param string $customerTokenId The TokenId of a customer. (required)
     * @param string $paymentInstrumentTokenId The TokenId of a payment instrument. (required)
     * @param string $profileId The id of a profile containing user specific TMS configuration. (optional)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomerPaymentInstrumentWithHttpInfo($customerTokenId, $paymentInstrumentTokenId, $profileId = null)
    {
        // verify the required parameter 'customerTokenId' is set
        if ($customerTokenId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customerTokenId when calling deleteCustomerPaymentInstrument');
        }
        if ((strlen($customerTokenId) > 32)) {
            throw new \InvalidArgumentException('invalid length for "$customerTokenId" when calling CustomerPaymentInstrumentApi.deleteCustomerPaymentInstrument, must be smaller than or equal to 32.');
        }
        if ((strlen($customerTokenId) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$customerTokenId" when calling CustomerPaymentInstrumentApi.deleteCustomerPaymentInstrument, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'paymentInstrumentTokenId' is set
        if ($paymentInstrumentTokenId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paymentInstrumentTokenId when calling deleteCustomerPaymentInstrument');
        }
        if ((strlen($paymentInstrumentTokenId) > 32)) {
            throw new \InvalidArgumentException('invalid length for "$paymentInstrumentTokenId" when calling CustomerPaymentInstrumentApi.deleteCustomerPaymentInstrument, must be smaller than or equal to 32.');
        }
        if ((strlen($paymentInstrumentTokenId) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$paymentInstrumentTokenId" when calling CustomerPaymentInstrumentApi.deleteCustomerPaymentInstrument, must be bigger than or equal to 1.');
        }

        if (!is_null($profileId) && (strlen($profileId) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$profileId" when calling CustomerPaymentInstrumentApi.deleteCustomerPaymentInstrument, must be smaller than or equal to 36.');
        }
        if (!is_null($profileId) && (strlen($profileId) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$profileId" when calling CustomerPaymentInstrumentApi.deleteCustomerPaymentInstrument, must be bigger than or equal to 36.');
        }

        // parse inputs
        $resourcePath = "/tms/v2/customers/{customerTokenId}/payment-instruments/{paymentInstrumentTokenId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=utf-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=utf-8']);

        // header params
        if ($profileId !== null) {
            $headerParams['profile-id'] = $this->apiClient->getSerializer()->toHeaderValue($profileId);
        }
        // path params
        if ($customerTokenId !== null) {
            $resourcePath = str_replace(
                "{" . "customerTokenId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customerTokenId),
                $resourcePath
            );
        }
        // path params
        if ($paymentInstrumentTokenId !== null) {
            $resourcePath = str_replace(
                "{" . "paymentInstrumentTokenId" . "}",
                $this->apiClient->getSerializer()->toPathValue($paymentInstrumentTokenId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tms/v2/customers/{customerTokenId}/payment-instruments/{paymentInstrumentTokenId}'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 424:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCustomerPaymentInstrument
     *
     * Retrieve a Customer Payment Instrument
     *
     * @param string $customerTokenId The TokenId of a customer. (required)
     * @param string $paymentInstrumentTokenId The TokenId of a payment instrument. (required)
     * @param string $profileId The id of a profile containing user specific TMS configuration. (optional)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return array of \CyberSource\Model\Tmsv2customersEmbeddedDefaultPaymentInstrument, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerPaymentInstrument($customerTokenId, $paymentInstrumentTokenId, $profileId = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getCustomerPaymentInstrumentWithHttpInfo($customerTokenId, $paymentInstrumentTokenId, $profileId);
        return [$response, $statusCode, $httpHeader];
    }

    /**
     * Operation getCustomerPaymentInstrumentWithHttpInfo
     *
     * Retrieve a Customer Payment Instrument
     *
     * @param string $customerTokenId The TokenId of a customer. (required)
     * @param string $paymentInstrumentTokenId The TokenId of a payment instrument. (required)
     * @param string $profileId The id of a profile containing user specific TMS configuration. (optional)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return array of \CyberSource\Model\Tmsv2customersEmbeddedDefaultPaymentInstrument, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerPaymentInstrumentWithHttpInfo($customerTokenId, $paymentInstrumentTokenId, $profileId = null)
    {
        // verify the required parameter 'customerTokenId' is set
        if ($customerTokenId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customerTokenId when calling getCustomerPaymentInstrument');
        }
        if ((strlen($customerTokenId) > 32)) {
            throw new \InvalidArgumentException('invalid length for "$customerTokenId" when calling CustomerPaymentInstrumentApi.getCustomerPaymentInstrument, must be smaller than or equal to 32.');
        }
        if ((strlen($customerTokenId) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$customerTokenId" when calling CustomerPaymentInstrumentApi.getCustomerPaymentInstrument, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'paymentInstrumentTokenId' is set
        if ($paymentInstrumentTokenId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paymentInstrumentTokenId when calling getCustomerPaymentInstrument');
        }
        if ((strlen($paymentInstrumentTokenId) > 32)) {
            throw new \InvalidArgumentException('invalid length for "$paymentInstrumentTokenId" when calling CustomerPaymentInstrumentApi.getCustomerPaymentInstrument, must be smaller than or equal to 32.');
        }
        if ((strlen($paymentInstrumentTokenId) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$paymentInstrumentTokenId" when calling CustomerPaymentInstrumentApi.getCustomerPaymentInstrument, must be bigger than or equal to 1.');
        }

        if (!is_null($profileId) && (strlen($profileId) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$profileId" when calling CustomerPaymentInstrumentApi.getCustomerPaymentInstrument, must be smaller than or equal to 36.');
        }
        if (!is_null($profileId) && (strlen($profileId) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$profileId" when calling CustomerPaymentInstrumentApi.getCustomerPaymentInstrument, must be bigger than or equal to 36.');
        }

        // parse inputs
        $resourcePath = "/tms/v2/customers/{customerTokenId}/payment-instruments/{paymentInstrumentTokenId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=utf-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=utf-8']);

        // header params
        if ($profileId !== null) {
            $headerParams['profile-id'] = $this->apiClient->getSerializer()->toHeaderValue($profileId);
        }
        // path params
        if ($customerTokenId !== null) {
            $resourcePath = str_replace(
                "{" . "customerTokenId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customerTokenId),
                $resourcePath
            );
        }
        // path params
        if ($paymentInstrumentTokenId !== null) {
            $resourcePath = str_replace(
                "{" . "paymentInstrumentTokenId" . "}",
                $this->apiClient->getSerializer()->toPathValue($paymentInstrumentTokenId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CyberSource\Model\Tmsv2customersEmbeddedDefaultPaymentInstrument',
                '/tms/v2/customers/{customerTokenId}/payment-instruments/{paymentInstrumentTokenId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CyberSource\Model\Tmsv2customersEmbeddedDefaultPaymentInstrument', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\Tmsv2customersEmbeddedDefaultPaymentInstrument', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 424:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCustomerPaymentInstrumentsList
     *
     * List Payment Instruments for a Customer
     *
     * @param string $customerTokenId The TokenId of a customer. (required)
     * @param string $profileId The id of a profile containing user specific TMS configuration. (optional)
     * @param int $offset Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional, default to 0)
     * @param int $limit The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return array of \CyberSource\Model\PaymentInstrumentListForCustomer, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerPaymentInstrumentsList($customerTokenId, $profileId = null, $offset = '0', $limit = '20')
    {
        list($response, $statusCode, $httpHeader) = $this->getCustomerPaymentInstrumentsListWithHttpInfo($customerTokenId, $profileId, $offset, $limit);
        return [$response, $statusCode, $httpHeader];
    }

    /**
     * Operation getCustomerPaymentInstrumentsListWithHttpInfo
     *
     * List Payment Instruments for a Customer
     *
     * @param string $customerTokenId The TokenId of a customer. (required)
     * @param string $profileId The id of a profile containing user specific TMS configuration. (optional)
     * @param int $offset Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional, default to 0)
     * @param int $limit The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return array of \CyberSource\Model\PaymentInstrumentListForCustomer, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerPaymentInstrumentsListWithHttpInfo($customerTokenId, $profileId = null, $offset = '0', $limit = '20')
    {
        // verify the required parameter 'customerTokenId' is set
        if ($customerTokenId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customerTokenId when calling getCustomerPaymentInstrumentsList');
        }
        if ((strlen($customerTokenId) > 32)) {
            throw new \InvalidArgumentException('invalid length for "$customerTokenId" when calling CustomerPaymentInstrumentApi.getCustomerPaymentInstrumentsList, must be smaller than or equal to 32.');
        }
        if ((strlen($customerTokenId) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$customerTokenId" when calling CustomerPaymentInstrumentApi.getCustomerPaymentInstrumentsList, must be bigger than or equal to 1.');
        }

        if (!is_null($profileId) && (strlen($profileId) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$profileId" when calling CustomerPaymentInstrumentApi.getCustomerPaymentInstrumentsList, must be smaller than or equal to 36.');
        }
        if (!is_null($profileId) && (strlen($profileId) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$profileId" when calling CustomerPaymentInstrumentApi.getCustomerPaymentInstrumentsList, must be bigger than or equal to 36.');
        }

        if (!is_null($offset) && ($offset < 0)) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CustomerPaymentInstrumentApi.getCustomerPaymentInstrumentsList, must be bigger than or equal to 0.');
        }

        if (!is_null($limit) && ($limit > 100)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomerPaymentInstrumentApi.getCustomerPaymentInstrumentsList, must be smaller than or equal to 100.');
        }
        if (!is_null($limit) && ($limit < 1)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomerPaymentInstrumentApi.getCustomerPaymentInstrumentsList, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/tms/v2/customers/{customerTokenId}/payment-instruments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=utf-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=utf-8']);

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // header params
        if ($profileId !== null) {
            $headerParams['profile-id'] = $this->apiClient->getSerializer()->toHeaderValue($profileId);
        }
        // path params
        if ($customerTokenId !== null) {
            $resourcePath = str_replace(
                "{" . "customerTokenId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customerTokenId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CyberSource\Model\PaymentInstrumentListForCustomer',
                '/tms/v2/customers/{customerTokenId}/payment-instruments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CyberSource\Model\PaymentInstrumentListForCustomer', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\PaymentInstrumentListForCustomer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 424:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation patchCustomersPaymentInstrument
     *
     * Update a Customer Payment Instrument
     *
     * @param string $customerTokenId The TokenId of a customer. (required)
     * @param string $paymentInstrumentTokenId The TokenId of a payment instrument. (required)
     * @param \CyberSource\Model\PatchCustomerPaymentInstrumentRequest $patchCustomerPaymentInstrumentRequest  (required)
     * @param string $profileId The id of a profile containing user specific TMS configuration. (optional)
     * @param string $ifMatch Contains an ETag value from a GET request to make the request conditional. (optional)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return array of \CyberSource\Model\Tmsv2customersEmbeddedDefaultPaymentInstrument, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchCustomersPaymentInstrument($customerTokenId, $paymentInstrumentTokenId, $patchCustomerPaymentInstrumentRequest, $profileId = null, $ifMatch = null)
    {
        list($response, $statusCode, $httpHeader) = $this->patchCustomersPaymentInstrumentWithHttpInfo($customerTokenId, $paymentInstrumentTokenId, $patchCustomerPaymentInstrumentRequest, $profileId, $ifMatch);
        return [$response, $statusCode, $httpHeader];
    }

    /**
     * Operation patchCustomersPaymentInstrumentWithHttpInfo
     *
     * Update a Customer Payment Instrument
     *
     * @param string $customerTokenId The TokenId of a customer. (required)
     * @param string $paymentInstrumentTokenId The TokenId of a payment instrument. (required)
     * @param \CyberSource\Model\PatchCustomerPaymentInstrumentRequest $patchCustomerPaymentInstrumentRequest  (required)
     * @param string $profileId The id of a profile containing user specific TMS configuration. (optional)
     * @param string $ifMatch Contains an ETag value from a GET request to make the request conditional. (optional)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return array of \CyberSource\Model\Tmsv2customersEmbeddedDefaultPaymentInstrument, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchCustomersPaymentInstrumentWithHttpInfo($customerTokenId, $paymentInstrumentTokenId, $patchCustomerPaymentInstrumentRequest, $profileId = null, $ifMatch = null)
    {
        // verify the required parameter 'customerTokenId' is set
        if ($customerTokenId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customerTokenId when calling patchCustomersPaymentInstrument');
        }
        if ((strlen($customerTokenId) > 32)) {
            throw new \InvalidArgumentException('invalid length for "$customerTokenId" when calling CustomerPaymentInstrumentApi.patchCustomersPaymentInstrument, must be smaller than or equal to 32.');
        }
        if ((strlen($customerTokenId) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$customerTokenId" when calling CustomerPaymentInstrumentApi.patchCustomersPaymentInstrument, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'paymentInstrumentTokenId' is set
        if ($paymentInstrumentTokenId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paymentInstrumentTokenId when calling patchCustomersPaymentInstrument');
        }
        if ((strlen($paymentInstrumentTokenId) > 32)) {
            throw new \InvalidArgumentException('invalid length for "$paymentInstrumentTokenId" when calling CustomerPaymentInstrumentApi.patchCustomersPaymentInstrument, must be smaller than or equal to 32.');
        }
        if ((strlen($paymentInstrumentTokenId) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$paymentInstrumentTokenId" when calling CustomerPaymentInstrumentApi.patchCustomersPaymentInstrument, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'patchCustomerPaymentInstrumentRequest' is set
        if ($patchCustomerPaymentInstrumentRequest === null) {
            throw new \InvalidArgumentException('Missing the required parameter $patchCustomerPaymentInstrumentRequest when calling patchCustomersPaymentInstrument');
        }
        if (!is_null($profileId) && (strlen($profileId) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$profileId" when calling CustomerPaymentInstrumentApi.patchCustomersPaymentInstrument, must be smaller than or equal to 36.');
        }
        if (!is_null($profileId) && (strlen($profileId) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$profileId" when calling CustomerPaymentInstrumentApi.patchCustomersPaymentInstrument, must be bigger than or equal to 36.');
        }

        if (!is_null($ifMatch) && (strlen($ifMatch) > 32)) {
            throw new \InvalidArgumentException('invalid length for "$ifMatch" when calling CustomerPaymentInstrumentApi.patchCustomersPaymentInstrument, must be smaller than or equal to 32.');
        }
        if (!is_null($ifMatch) && (strlen($ifMatch) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$ifMatch" when calling CustomerPaymentInstrumentApi.patchCustomersPaymentInstrument, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/tms/v2/customers/{customerTokenId}/payment-instruments/{paymentInstrumentTokenId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=utf-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=utf-8']);

        // header params
        if ($profileId !== null) {
            $headerParams['profile-id'] = $this->apiClient->getSerializer()->toHeaderValue($profileId);
        }
        // header params
        if ($ifMatch !== null) {
            $headerParams['if-match'] = $this->apiClient->getSerializer()->toHeaderValue($ifMatch);
        }
        // path params
        if ($customerTokenId !== null) {
            $resourcePath = str_replace(
                "{" . "customerTokenId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customerTokenId),
                $resourcePath
            );
        }
        // path params
        if ($paymentInstrumentTokenId !== null) {
            $resourcePath = str_replace(
                "{" . "paymentInstrumentTokenId" . "}",
                $this->apiClient->getSerializer()->toPathValue($paymentInstrumentTokenId),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($patchCustomerPaymentInstrumentRequest)) {
            $_tempBody = $patchCustomerPaymentInstrumentRequest;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CyberSource\Model\Tmsv2customersEmbeddedDefaultPaymentInstrument',
                '/tms/v2/customers/{customerTokenId}/payment-instruments/{paymentInstrumentTokenId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CyberSource\Model\Tmsv2customersEmbeddedDefaultPaymentInstrument', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\Tmsv2customersEmbeddedDefaultPaymentInstrument', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 424:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postCustomerPaymentInstrument
     *
     * Create a Customer Payment Instrument
     *
     * @param string $customerTokenId The TokenId of a customer. (required)
     * @param \CyberSource\Model\PostCustomerPaymentInstrumentRequest $postCustomerPaymentInstrumentRequest  (required)
     * @param string $profileId The id of a profile containing user specific TMS configuration. (optional)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return array of \CyberSource\Model\Tmsv2customersEmbeddedDefaultPaymentInstrument, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCustomerPaymentInstrument($customerTokenId, $postCustomerPaymentInstrumentRequest, $profileId = null)
    {
        list($response, $statusCode, $httpHeader) = $this->postCustomerPaymentInstrumentWithHttpInfo($customerTokenId, $postCustomerPaymentInstrumentRequest, $profileId);
        return [$response, $statusCode, $httpHeader];
    }

    /**
     * Operation postCustomerPaymentInstrumentWithHttpInfo
     *
     * Create a Customer Payment Instrument
     *
     * @param string $customerTokenId The TokenId of a customer. (required)
     * @param \CyberSource\Model\PostCustomerPaymentInstrumentRequest $postCustomerPaymentInstrumentRequest  (required)
     * @param string $profileId The id of a profile containing user specific TMS configuration. (optional)
     * @throws \CyberSource\ApiException on non-2xx response
     * @return array of \CyberSource\Model\Tmsv2customersEmbeddedDefaultPaymentInstrument, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCustomerPaymentInstrumentWithHttpInfo($customerTokenId, $postCustomerPaymentInstrumentRequest, $profileId = null)
    {
        // verify the required parameter 'customerTokenId' is set
        if ($customerTokenId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customerTokenId when calling postCustomerPaymentInstrument');
        }
        if ((strlen($customerTokenId) > 32)) {
            throw new \InvalidArgumentException('invalid length for "$customerTokenId" when calling CustomerPaymentInstrumentApi.postCustomerPaymentInstrument, must be smaller than or equal to 32.');
        }
        if ((strlen($customerTokenId) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$customerTokenId" when calling CustomerPaymentInstrumentApi.postCustomerPaymentInstrument, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'postCustomerPaymentInstrumentRequest' is set
        if ($postCustomerPaymentInstrumentRequest === null) {
            throw new \InvalidArgumentException('Missing the required parameter $postCustomerPaymentInstrumentRequest when calling postCustomerPaymentInstrument');
        }
        if (!is_null($profileId) && (strlen($profileId) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$profileId" when calling CustomerPaymentInstrumentApi.postCustomerPaymentInstrument, must be smaller than or equal to 36.');
        }
        if (!is_null($profileId) && (strlen($profileId) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$profileId" when calling CustomerPaymentInstrumentApi.postCustomerPaymentInstrument, must be bigger than or equal to 36.');
        }

        // parse inputs
        $resourcePath = "/tms/v2/customers/{customerTokenId}/payment-instruments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=utf-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=utf-8']);

        // header params
        if ($profileId !== null) {
            $headerParams['profile-id'] = $this->apiClient->getSerializer()->toHeaderValue($profileId);
        }
        // path params
        if ($customerTokenId !== null) {
            $resourcePath = str_replace(
                "{" . "customerTokenId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customerTokenId),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($postCustomerPaymentInstrumentRequest)) {
            $_tempBody = $postCustomerPaymentInstrumentRequest;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\CyberSource\Model\Tmsv2customersEmbeddedDefaultPaymentInstrument',
                '/tms/v2/customers/{customerTokenId}/payment-instruments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\CyberSource\Model\Tmsv2customersEmbeddedDefaultPaymentInstrument', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\Tmsv2customersEmbeddedDefaultPaymentInstrument', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 424:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\CyberSource\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
