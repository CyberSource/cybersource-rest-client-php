<?php
/**
 * Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ptsv2paymentsidcaptures_processingInformation_authorizationOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authType' => 'string',
        'verbalAuthCode' => 'string',
        'verbalAuthTransactionId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authType' => null,
        'verbalAuthCode' => null,
        'verbalAuthTransactionId' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'authType' => 'authType',
        'verbalAuthCode' => 'verbalAuthCode',
        'verbalAuthTransactionId' => 'verbalAuthTransactionId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'authType' => 'setAuthType',
        'verbalAuthCode' => 'setVerbalAuthCode',
        'verbalAuthTransactionId' => 'setVerbalAuthTransactionId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'authType' => 'getAuthType',
        'verbalAuthCode' => 'getVerbalAuthCode',
        'verbalAuthTransactionId' => 'getVerbalAuthTransactionId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authType'] = isset($data['authType']) ? $data['authType'] : null;
        $this->container['verbalAuthCode'] = isset($data['verbalAuthCode']) ? $data['verbalAuthCode'] : null;
        $this->container['verbalAuthTransactionId'] = isset($data['verbalAuthTransactionId']) ? $data['verbalAuthTransactionId'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['authType']) && (strlen($this->container['authType']) > 15)) {
            $invalid_properties[] = "invalid value for 'authType', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['verbalAuthCode']) && (strlen($this->container['verbalAuthCode']) > 7)) {
            $invalid_properties[] = "invalid value for 'verbalAuthCode', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['verbalAuthTransactionId']) && (strlen($this->container['verbalAuthTransactionId']) > 15)) {
            $invalid_properties[] = "invalid value for 'verbalAuthTransactionId', the character length must be smaller than or equal to 15.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['authType']) > 15) {
            return false;
        }
        if (strlen($this->container['verbalAuthCode']) > 7) {
            return false;
        }
        if (strlen($this->container['verbalAuthTransactionId']) > 15) {
            return false;
        }
        return true;
    }


    /**
     * Gets authType
     * @return string
     */
    public function getAuthType()
    {
        return $this->container['authType'];
    }

    /**
     * Sets authType
     * @param string $authType Authorization type. Possible values:   - `AUTOCAPTURE`: automatic capture.  - `STANDARDCAPTURE`: standard capture.  - `VERBAL`: forced capture. Include it in the payment request for a forced capture. Include it in the capture request for a verbal payment.  #### Asia, Middle East, and Africa Gateway; Cielo; Comercio Latino; and CyberSource Latin American Processing Set this field to `AUTOCAPTURE` and include it in a bundled request to indicate that you are requesting an automatic capture. If your account is configured to enable automatic captures, set this field to `STANDARDCAPTURE` and include it in a standard authorization or bundled request to indicate that you are overriding an automatic capture. For more information, see the `auth_type` field description in [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Forced Capture Set this field to `VERBAL` and include it in the authorization request to indicate that you are performing a forced capture; therefore, you receive the authorization code outside the CyberSource system.  #### Verbal Authorization Set this field to `VERBAL` and include it in the capture request to indicate that the request is for a verbal authorization. For more information, see \"Verbal Authorizations\" in [Credit Card Services Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html).
     * @return $this
     */
    public function setAuthType($authType)
    {
        if (!is_null($authType) && (strlen($authType) > 15)) {
            throw new \InvalidArgumentException('invalid length for $authType when calling Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions., must be smaller than or equal to 15.');
        }

        $this->container['authType'] = $authType;

        return $this;
    }

    /**
     * Gets verbalAuthCode
     * @return string
     */
    public function getVerbalAuthCode()
    {
        return $this->container['verbalAuthCode'];
    }

    /**
     * Sets verbalAuthCode
     * @param string $verbalAuthCode Authorization code.  #### Forced Capture Use this field to send the authorization code you received from a payment that you authorized outside the CyberSource system.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit purchase.  #### Verbal Authorization Use this field in CAPTURE API to send the verbally received authorization code.  For processor-specific information, see the `auth_code` field description in [Credit Card Services Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html).
     * @return $this
     */
    public function setVerbalAuthCode($verbalAuthCode)
    {
        if (!is_null($verbalAuthCode) && (strlen($verbalAuthCode) > 7)) {
            throw new \InvalidArgumentException('invalid length for $verbalAuthCode when calling Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions., must be smaller than or equal to 7.');
        }

        $this->container['verbalAuthCode'] = $verbalAuthCode;

        return $this;
    }

    /**
     * Gets verbalAuthTransactionId
     * @return string
     */
    public function getVerbalAuthTransactionId()
    {
        return $this->container['verbalAuthTransactionId'];
    }

    /**
     * Sets verbalAuthTransactionId
     * @param string $verbalAuthTransactionId Transaction ID (TID).  #### FDMS South This field is required for verbal authorizations and forced captures with the American Express card type to comply with the CAPN requirements: - Forced capture: Obtain the value for this field from the authorization response. - Verbal authorization: You cannot obtain a value for this field so CyberSource uses the default value of `000000000000000` (15 zeros).
     * @return $this
     */
    public function setVerbalAuthTransactionId($verbalAuthTransactionId)
    {
        if (!is_null($verbalAuthTransactionId) && (strlen($verbalAuthTransactionId) > 15)) {
            throw new \InvalidArgumentException('invalid length for $verbalAuthTransactionId when calling Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions., must be smaller than or equal to 15.');
        }

        $this->container['verbalAuthTransactionId'] = $verbalAuthTransactionId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


