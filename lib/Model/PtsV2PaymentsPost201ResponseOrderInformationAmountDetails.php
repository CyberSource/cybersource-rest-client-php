<?php
/**
 * PtsV2PaymentsPost201ResponseOrderInformationAmountDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * PtsV2PaymentsPost201ResponseOrderInformationAmountDetails Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PtsV2PaymentsPost201ResponseOrderInformationAmountDetails implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ptsV2PaymentsPost201Response_orderInformation_amountDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'totalAmount' => 'string',
        'authorizedAmount' => 'string',
        'currency' => 'string',
        'settlementAmount' => 'string',
        'settlementCurrency' => 'string',
        'originalAmount' => 'string',
        'originalCurrency' => 'string',
        'processorTransactionFee' => 'string',
        'exchangeRate' => 'string',
        'foreignCurrency' => 'string',
        'foreignAmount' => 'string',
        'discountAmount' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'totalAmount' => null,
        'authorizedAmount' => null,
        'currency' => null,
        'settlementAmount' => null,
        'settlementCurrency' => null,
        'originalAmount' => null,
        'originalCurrency' => null,
        'processorTransactionFee' => null,
        'exchangeRate' => null,
        'foreignCurrency' => null,
        'foreignAmount' => null,
        'discountAmount' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'totalAmount' => 'totalAmount',
        'authorizedAmount' => 'authorizedAmount',
        'currency' => 'currency',
        'settlementAmount' => 'settlementAmount',
        'settlementCurrency' => 'settlementCurrency',
        'originalAmount' => 'originalAmount',
        'originalCurrency' => 'originalCurrency',
        'processorTransactionFee' => 'processorTransactionFee',
        'exchangeRate' => 'exchangeRate',
        'foreignCurrency' => 'foreignCurrency',
        'foreignAmount' => 'foreignAmount',
        'discountAmount' => 'discountAmount'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'totalAmount' => 'setTotalAmount',
        'authorizedAmount' => 'setAuthorizedAmount',
        'currency' => 'setCurrency',
        'settlementAmount' => 'setSettlementAmount',
        'settlementCurrency' => 'setSettlementCurrency',
        'originalAmount' => 'setOriginalAmount',
        'originalCurrency' => 'setOriginalCurrency',
        'processorTransactionFee' => 'setProcessorTransactionFee',
        'exchangeRate' => 'setExchangeRate',
        'foreignCurrency' => 'setForeignCurrency',
        'foreignAmount' => 'setForeignAmount',
        'discountAmount' => 'setDiscountAmount'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'totalAmount' => 'getTotalAmount',
        'authorizedAmount' => 'getAuthorizedAmount',
        'currency' => 'getCurrency',
        'settlementAmount' => 'getSettlementAmount',
        'settlementCurrency' => 'getSettlementCurrency',
        'originalAmount' => 'getOriginalAmount',
        'originalCurrency' => 'getOriginalCurrency',
        'processorTransactionFee' => 'getProcessorTransactionFee',
        'exchangeRate' => 'getExchangeRate',
        'foreignCurrency' => 'getForeignCurrency',
        'foreignAmount' => 'getForeignAmount',
        'discountAmount' => 'getDiscountAmount'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['totalAmount'] = isset($data['totalAmount']) ? $data['totalAmount'] : null;
        $this->container['authorizedAmount'] = isset($data['authorizedAmount']) ? $data['authorizedAmount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['settlementAmount'] = isset($data['settlementAmount']) ? $data['settlementAmount'] : null;
        $this->container['settlementCurrency'] = isset($data['settlementCurrency']) ? $data['settlementCurrency'] : null;
        $this->container['originalAmount'] = isset($data['originalAmount']) ? $data['originalAmount'] : null;
        $this->container['originalCurrency'] = isset($data['originalCurrency']) ? $data['originalCurrency'] : null;
        $this->container['processorTransactionFee'] = isset($data['processorTransactionFee']) ? $data['processorTransactionFee'] : null;
        $this->container['exchangeRate'] = isset($data['exchangeRate']) ? $data['exchangeRate'] : null;
        $this->container['foreignCurrency'] = isset($data['foreignCurrency']) ? $data['foreignCurrency'] : null;
        $this->container['foreignAmount'] = isset($data['foreignAmount']) ? $data['foreignAmount'] : null;
        $this->container['discountAmount'] = isset($data['discountAmount']) ? $data['discountAmount'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets totalAmount
     * @return string
     */
    public function getTotalAmount()
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount
     * @param string $totalAmount Amount you requested for the payment or capture.  This value is returned for partial authorizations. This field is also returned on incremental authorizations will contain the aggregated amount from the original authorizations and all the incremental authorizations.
     * @return $this
     */
    public function setTotalAmount($totalAmount)
    {
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets authorizedAmount
     * @return string
     */
    public function getAuthorizedAmount()
    {
        return $this->container['authorizedAmount'];
    }

    /**
     * Sets authorizedAmount
     * @param string $authorizedAmount Amount that was authorized.  Returned by authorization service.  #### PIN debit Amount of the purchase.  Returned by PIN debit purchase.  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in Merchant Descriptors Using the SCMP API.
     * @return $this
     */
    public function setAuthorizedAmount($authorizedAmount)
    {
        $this->container['authorizedAmount'] = $authorizedAmount;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets settlementAmount
     * @return string
     */
    public function getSettlementAmount()
    {
        return $this->container['settlementAmount'];
    }

    /**
     * Sets settlementAmount
     * @param string $settlementAmount This is a multicurrency field. It contains the transaction amount (field 4), converted to the Currency used to bill the cardholder's account. This field is returned for OCT transactions.
     * @return $this
     */
    public function setSettlementAmount($settlementAmount)
    {
        $this->container['settlementAmount'] = $settlementAmount;

        return $this;
    }

    /**
     * Gets settlementCurrency
     * @return string
     */
    public function getSettlementCurrency()
    {
        return $this->container['settlementCurrency'];
    }

    /**
     * Sets settlementCurrency
     * @param string $settlementCurrency This is a multicurrency-only field. It contains a 3-digit numeric code that identifies the currency used by the issuer to bill the cardholder's account. This field is returned for OCT transactions.
     * @return $this
     */
    public function setSettlementCurrency($settlementCurrency)
    {
        $this->container['settlementCurrency'] = $settlementCurrency;

        return $this;
    }

    /**
     * Gets originalAmount
     * @return string
     */
    public function getOriginalAmount()
    {
        return $this->container['originalAmount'];
    }

    /**
     * Sets originalAmount
     * @param string $originalAmount Amount in your original local pricing currency.  This value cannot be negative. You can include a decimal point (.) in this field to denote the currency exponent, but you cannot include any other special characters.  If needed, CyberSource truncates the amount to the correct number of decimal places.
     * @return $this
     */
    public function setOriginalAmount($originalAmount)
    {
        $this->container['originalAmount'] = $originalAmount;

        return $this;
    }

    /**
     * Gets originalCurrency
     * @return string
     */
    public function getOriginalCurrency()
    {
        return $this->container['originalCurrency'];
    }

    /**
     * Sets originalCurrency
     * @param string $originalCurrency Your local pricing currency code.  For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
     * @return $this
     */
    public function setOriginalCurrency($originalCurrency)
    {
        $this->container['originalCurrency'] = $originalCurrency;

        return $this;
    }

    /**
     * Gets processorTransactionFee
     * @return string
     */
    public function getProcessorTransactionFee()
    {
        return $this->container['processorTransactionFee'];
    }

    /**
     * Sets processorTransactionFee
     * @param string $processorTransactionFee Amount up to N digit after the decimals separator as defined in ISO 4217 for the appropriate currency code.
     * @return $this
     */
    public function setProcessorTransactionFee($processorTransactionFee)
    {
        $this->container['processorTransactionFee'] = $processorTransactionFee;

        return $this;
    }

    /**
     * Gets exchangeRate
     * @return string
     */
    public function getExchangeRate()
    {
        return $this->container['exchangeRate'];
    }

    /**
     * Sets exchangeRate
     * @param string $exchangeRate The rate of conversion of the currency given in the request to CNY. The conversion happens at the time when Alipay's trade order is created
     * @return $this
     */
    public function setExchangeRate($exchangeRate)
    {
        $this->container['exchangeRate'] = $exchangeRate;

        return $this;
    }

    /**
     * Gets foreignCurrency
     * @return string
     */
    public function getForeignCurrency()
    {
        return $this->container['foreignCurrency'];
    }

    /**
     * Sets foreignCurrency
     * @param string $foreignCurrency Currency code for the transaction performed in cross border currency.
     * @return $this
     */
    public function setForeignCurrency($foreignCurrency)
    {
        $this->container['foreignCurrency'] = $foreignCurrency;

        return $this;
    }

    /**
     * Gets foreignAmount
     * @return string
     */
    public function getForeignAmount()
    {
        return $this->container['foreignAmount'];
    }

    /**
     * Sets foreignAmount
     * @param string $foreignAmount The transaction amount in CNY.
     * @return $this
     */
    public function setForeignAmount($foreignAmount)
    {
        $this->container['foreignAmount'] = $foreignAmount;

        return $this;
    }

    /**
     * Gets discountAmount
     * @return string
     */
    public function getDiscountAmount()
    {
        return $this->container['discountAmount'];
    }

    /**
     * Sets discountAmount
     * @param string $discountAmount If coupons/vouchers are used in the transaction, the discount amount redeemed in the settlement currency will be returned. Otherwise, no return.
     * @return $this
     */
    public function setDiscountAmount($discountAmount)
    {
        $this->container['discountAmount'] = $discountAmount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


