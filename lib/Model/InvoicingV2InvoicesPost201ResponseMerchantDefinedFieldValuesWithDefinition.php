<?php
/**
 * InvoicingV2InvoicesPost201ResponseMerchantDefinedFieldValuesWithDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * InvoicingV2InvoicesPost201ResponseMerchantDefinedFieldValuesWithDefinition Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InvoicingV2InvoicesPost201ResponseMerchantDefinedFieldValuesWithDefinition implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'invoicingV2InvoicesPost201Response_merchantDefinedFieldValuesWithDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'referenceType' => 'string',
        'label' => 'string',
        'fieldType' => 'string',
        'customerVisible' => 'bool',
        'readOnly' => 'bool',
        'textMinLength' => 'int',
        'textMaxLength' => 'int',
        'textDefaultValue' => 'string',
        'possibleValues' => 'string',
        'value' => 'string',
        'position' => 'int',
        'definitionId' => 'int',
        'merchantDefinedDataIndex' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'referenceType' => null,
        'label' => null,
        'fieldType' => null,
        'customerVisible' => null,
        'readOnly' => null,
        'textMinLength' => 'int32',
        'textMaxLength' => 'int32',
        'textDefaultValue' => null,
        'possibleValues' => null,
        'value' => null,
        'position' => null,
        'definitionId' => null,
        'merchantDefinedDataIndex' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'referenceType' => 'referenceType',
        'label' => 'label',
        'fieldType' => 'fieldType',
        'customerVisible' => 'customerVisible',
        'readOnly' => 'readOnly',
        'textMinLength' => 'textMinLength',
        'textMaxLength' => 'textMaxLength',
        'textDefaultValue' => 'textDefaultValue',
        'possibleValues' => 'possibleValues',
        'value' => 'value',
        'position' => 'position',
        'definitionId' => 'definitionId',
        'merchantDefinedDataIndex' => 'merchantDefinedDataIndex'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'referenceType' => 'setReferenceType',
        'label' => 'setLabel',
        'fieldType' => 'setFieldType',
        'customerVisible' => 'setCustomerVisible',
        'readOnly' => 'setReadOnly',
        'textMinLength' => 'setTextMinLength',
        'textMaxLength' => 'setTextMaxLength',
        'textDefaultValue' => 'setTextDefaultValue',
        'possibleValues' => 'setPossibleValues',
        'value' => 'setValue',
        'position' => 'setPosition',
        'definitionId' => 'setDefinitionId',
        'merchantDefinedDataIndex' => 'setMerchantDefinedDataIndex'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'referenceType' => 'getReferenceType',
        'label' => 'getLabel',
        'fieldType' => 'getFieldType',
        'customerVisible' => 'getCustomerVisible',
        'readOnly' => 'getReadOnly',
        'textMinLength' => 'getTextMinLength',
        'textMaxLength' => 'getTextMaxLength',
        'textDefaultValue' => 'getTextDefaultValue',
        'possibleValues' => 'getPossibleValues',
        'value' => 'getValue',
        'position' => 'getPosition',
        'definitionId' => 'getDefinitionId',
        'merchantDefinedDataIndex' => 'getMerchantDefinedDataIndex'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['referenceType'] = isset($data['referenceType']) ? $data['referenceType'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['fieldType'] = isset($data['fieldType']) ? $data['fieldType'] : null;
        $this->container['customerVisible'] = isset($data['customerVisible']) ? $data['customerVisible'] : null;
        $this->container['readOnly'] = isset($data['readOnly']) ? $data['readOnly'] : null;
        $this->container['textMinLength'] = isset($data['textMinLength']) ? $data['textMinLength'] : null;
        $this->container['textMaxLength'] = isset($data['textMaxLength']) ? $data['textMaxLength'] : null;
        $this->container['textDefaultValue'] = isset($data['textDefaultValue']) ? $data['textDefaultValue'] : null;
        $this->container['possibleValues'] = isset($data['possibleValues']) ? $data['possibleValues'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['definitionId'] = isset($data['definitionId']) ? $data['definitionId'] : null;
        $this->container['merchantDefinedDataIndex'] = isset($data['merchantDefinedDataIndex']) ? $data['merchantDefinedDataIndex'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets referenceType
     * @return string
     */
    public function getReferenceType()
    {
        return $this->container['referenceType'];
    }

    /**
     * Sets referenceType
     * @param string $referenceType
     * @return $this
     */
    public function setReferenceType($referenceType)
    {
        $this->container['referenceType'] = $referenceType;

        return $this;
    }

    /**
     * Gets label
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     * @param string $label
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets fieldType
     * @return string
     */
    public function getFieldType()
    {
        return $this->container['fieldType'];
    }

    /**
     * Sets fieldType
     * @param string $fieldType
     * @return $this
     */
    public function setFieldType($fieldType)
    {
        $this->container['fieldType'] = $fieldType;

        return $this;
    }

    /**
     * Gets customerVisible
     * @return bool
     */
    public function getCustomerVisible()
    {
        return $this->container['customerVisible'];
    }

    /**
     * Sets customerVisible
     * @param bool $customerVisible
     * @return $this
     */
    public function setCustomerVisible($customerVisible)
    {
        $this->container['customerVisible'] = $customerVisible;

        return $this;
    }

    /**
     * Gets readOnly
     * @return bool
     */
    public function getReadOnly()
    {
        return $this->container['readOnly'];
    }

    /**
     * Sets readOnly
     * @param bool $readOnly
     * @return $this
     */
    public function setReadOnly($readOnly)
    {
        $this->container['readOnly'] = $readOnly;

        return $this;
    }

    /**
     * Gets textMinLength
     * @return int
     */
    public function getTextMinLength()
    {
        return $this->container['textMinLength'];
    }

    /**
     * Sets textMinLength
     * @param int $textMinLength
     * @return $this
     */
    public function setTextMinLength($textMinLength)
    {
        $this->container['textMinLength'] = $textMinLength;

        return $this;
    }

    /**
     * Gets textMaxLength
     * @return int
     */
    public function getTextMaxLength()
    {
        return $this->container['textMaxLength'];
    }

    /**
     * Sets textMaxLength
     * @param int $textMaxLength
     * @return $this
     */
    public function setTextMaxLength($textMaxLength)
    {
        $this->container['textMaxLength'] = $textMaxLength;

        return $this;
    }

    /**
     * Gets textDefaultValue
     * @return string
     */
    public function getTextDefaultValue()
    {
        return $this->container['textDefaultValue'];
    }

    /**
     * Sets textDefaultValue
     * @param string $textDefaultValue
     * @return $this
     */
    public function setTextDefaultValue($textDefaultValue)
    {
        $this->container['textDefaultValue'] = $textDefaultValue;

        return $this;
    }

    /**
     * Gets possibleValues
     * @return string
     */
    public function getPossibleValues()
    {
        return $this->container['possibleValues'];
    }

    /**
     * Sets possibleValues
     * @param string $possibleValues
     * @return $this
     */
    public function setPossibleValues($possibleValues)
    {
        $this->container['possibleValues'] = $possibleValues;

        return $this;
    }

    /**
     * Gets value
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param string $value
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets position
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     * @param int $position
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets definitionId
     * @return int
     */
    public function getDefinitionId()
    {
        return $this->container['definitionId'];
    }

    /**
     * Sets definitionId
     * @param int $definitionId
     * @return $this
     */
    public function setDefinitionId($definitionId)
    {
        $this->container['definitionId'] = $definitionId;

        return $this;
    }

    /**
     * Gets merchantDefinedDataIndex
     * @return int
     */
    public function getMerchantDefinedDataIndex()
    {
        return $this->container['merchantDefinedDataIndex'];
    }

    /**
     * Sets merchantDefinedDataIndex
     * @param int $merchantDefinedDataIndex
     * @return $this
     */
    public function setMerchantDefinedDataIndex($merchantDefinedDataIndex)
    {
        $this->container['merchantDefinedDataIndex'] = $merchantDefinedDataIndex;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


