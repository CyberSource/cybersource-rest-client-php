<?php
/**
 * ECheckConfigCommon
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * ECheckConfigCommon Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ECheckConfigCommon implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ECheckConfig_common';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'processors' => 'map[string,\CyberSource\Model\ECheckConfigCommonProcessors]',
        'internalOnly' => '\CyberSource\Model\ECheckConfigCommonInternalOnly',
        'accountHolderName' => 'string',
        'accountType' => 'string',
        'accountRoutingNumber' => 'string',
        'accountNumber' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'processors' => null,
        'internalOnly' => null,
        'accountHolderName' => null,
        'accountType' => null,
        'accountRoutingNumber' => null,
        'accountNumber' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'processors' => 'processors',
        'internalOnly' => 'internalOnly',
        'accountHolderName' => 'accountHolderName',
        'accountType' => 'accountType',
        'accountRoutingNumber' => 'accountRoutingNumber',
        'accountNumber' => 'accountNumber'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'processors' => 'setProcessors',
        'internalOnly' => 'setInternalOnly',
        'accountHolderName' => 'setAccountHolderName',
        'accountType' => 'setAccountType',
        'accountRoutingNumber' => 'setAccountRoutingNumber',
        'accountNumber' => 'setAccountNumber'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'processors' => 'getProcessors',
        'internalOnly' => 'getInternalOnly',
        'accountHolderName' => 'getAccountHolderName',
        'accountType' => 'getAccountType',
        'accountRoutingNumber' => 'getAccountRoutingNumber',
        'accountNumber' => 'getAccountNumber'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['processors'] = isset($data['processors']) ? $data['processors'] : null;
        $this->container['internalOnly'] = isset($data['internalOnly']) ? $data['internalOnly'] : null;
        $this->container['accountHolderName'] = isset($data['accountHolderName']) ? $data['accountHolderName'] : null;
        $this->container['accountType'] = isset($data['accountType']) ? $data['accountType'] : null;
        $this->container['accountRoutingNumber'] = isset($data['accountRoutingNumber']) ? $data['accountRoutingNumber'] : null;
        $this->container['accountNumber'] = isset($data['accountNumber']) ? $data['accountNumber'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['accountHolderName'] === null) {
            $invalid_properties[] = "'accountHolderName' can't be null";
        }
        if ($this->container['accountType'] === null) {
            $invalid_properties[] = "'accountType' can't be null";
        }
        if ($this->container['accountRoutingNumber'] === null) {
            $invalid_properties[] = "'accountRoutingNumber' can't be null";
        }
        if ($this->container['accountNumber'] === null) {
            $invalid_properties[] = "'accountNumber' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['accountHolderName'] === null) {
            return false;
        }
        if ($this->container['accountType'] === null) {
            return false;
        }
        if ($this->container['accountRoutingNumber'] === null) {
            return false;
        }
        if ($this->container['accountNumber'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets processors
     * @return map[string,\CyberSource\Model\ECheckConfigCommonProcessors]
     */
    public function getProcessors()
    {
        return $this->container['processors'];
    }

    /**
     * Sets processors
     * @param map[string,\CyberSource\Model\ECheckConfigCommonProcessors] $processors
     * @return $this
     */
    public function setProcessors($processors)
    {
        $this->container['processors'] = $processors;

        return $this;
    }

    /**
     * Gets internalOnly
     * @return \CyberSource\Model\ECheckConfigCommonInternalOnly
     */
    public function getInternalOnly()
    {
        return $this->container['internalOnly'];
    }

    /**
     * Sets internalOnly
     * @param \CyberSource\Model\ECheckConfigCommonInternalOnly $internalOnly
     * @return $this
     */
    public function setInternalOnly($internalOnly)
    {
        $this->container['internalOnly'] = $internalOnly;

        return $this;
    }

    /**
     * Gets accountHolderName
     * @return string
     */
    public function getAccountHolderName()
    {
        return $this->container['accountHolderName'];
    }

    /**
     * Sets accountHolderName
     * @param string $accountHolderName Mandatory  Name on Merchant's Bank Account Only ASCII (Hex 20 to Hex 7E)
     * @return $this
     */
    public function setAccountHolderName($accountHolderName)
    {
        $this->container['accountHolderName'] = $accountHolderName;

        return $this;
    }

    /**
     * Gets accountType
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['accountType'];
    }

    /**
     * Sets accountType
     * @param string $accountType Mandatory  Type of account for Merchant's Bank Account Possible values: - checking - savings - corporatechecking - corporatesavings
     * @return $this
     */
    public function setAccountType($accountType)
    {
        $this->container['accountType'] = $accountType;

        return $this;
    }

    /**
     * Gets accountRoutingNumber
     * @return string
     */
    public function getAccountRoutingNumber()
    {
        return $this->container['accountRoutingNumber'];
    }

    /**
     * Sets accountRoutingNumber
     * @param string $accountRoutingNumber Mandatory  Routing number for Merchant's Bank Account US Account Routing Number
     * @return $this
     */
    public function setAccountRoutingNumber($accountRoutingNumber)
    {
        $this->container['accountRoutingNumber'] = $accountRoutingNumber;

        return $this;
    }

    /**
     * Gets accountNumber
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['accountNumber'];
    }

    /**
     * Sets accountNumber
     * @param string $accountNumber Mandatory  Account number for Merchant's Bank Account
     * @return $this
     */
    public function setAccountNumber($accountNumber)
    {
        $this->container['accountNumber'] = $accountNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


