<?php
/**
 * UnderwritingConfigurationSaleRepresentativeInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * UnderwritingConfigurationSaleRepresentativeInformation Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UnderwritingConfigurationSaleRepresentativeInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'underwritingConfiguration_saleRepresentativeInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'salesRepId' => 'string',
        'salesRepFirstName' => 'string',
        'salesRepLastName' => 'string',
        'salesRepEmail' => 'string',
        'salesRepNumericPhoneNumberCountryCode' => 'string',
        'salesRepPhoneNumber' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'salesRepId' => null,
        'salesRepFirstName' => null,
        'salesRepLastName' => null,
        'salesRepEmail' => null,
        'salesRepNumericPhoneNumberCountryCode' => null,
        'salesRepPhoneNumber' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'salesRepId' => 'salesRepId',
        'salesRepFirstName' => 'salesRepFirstName',
        'salesRepLastName' => 'salesRepLastName',
        'salesRepEmail' => 'salesRepEmail',
        'salesRepNumericPhoneNumberCountryCode' => 'salesRepNumericPhoneNumberCountryCode',
        'salesRepPhoneNumber' => 'salesRepPhoneNumber'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'salesRepId' => 'setSalesRepId',
        'salesRepFirstName' => 'setSalesRepFirstName',
        'salesRepLastName' => 'setSalesRepLastName',
        'salesRepEmail' => 'setSalesRepEmail',
        'salesRepNumericPhoneNumberCountryCode' => 'setSalesRepNumericPhoneNumberCountryCode',
        'salesRepPhoneNumber' => 'setSalesRepPhoneNumber'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'salesRepId' => 'getSalesRepId',
        'salesRepFirstName' => 'getSalesRepFirstName',
        'salesRepLastName' => 'getSalesRepLastName',
        'salesRepEmail' => 'getSalesRepEmail',
        'salesRepNumericPhoneNumberCountryCode' => 'getSalesRepNumericPhoneNumberCountryCode',
        'salesRepPhoneNumber' => 'getSalesRepPhoneNumber'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['salesRepId'] = isset($data['salesRepId']) ? $data['salesRepId'] : null;
        $this->container['salesRepFirstName'] = isset($data['salesRepFirstName']) ? $data['salesRepFirstName'] : null;
        $this->container['salesRepLastName'] = isset($data['salesRepLastName']) ? $data['salesRepLastName'] : null;
        $this->container['salesRepEmail'] = isset($data['salesRepEmail']) ? $data['salesRepEmail'] : null;
        $this->container['salesRepNumericPhoneNumberCountryCode'] = isset($data['salesRepNumericPhoneNumberCountryCode']) ? $data['salesRepNumericPhoneNumberCountryCode'] : null;
        $this->container['salesRepPhoneNumber'] = isset($data['salesRepPhoneNumber']) ? $data['salesRepPhoneNumber'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['salesRepId'] === null) {
            $invalid_properties[] = "'salesRepId' can't be null";
        }
        if ($this->container['salesRepFirstName'] === null) {
            $invalid_properties[] = "'salesRepFirstName' can't be null";
        }
        if ($this->container['salesRepLastName'] === null) {
            $invalid_properties[] = "'salesRepLastName' can't be null";
        }
        if ($this->container['salesRepEmail'] === null) {
            $invalid_properties[] = "'salesRepEmail' can't be null";
        }
        if ($this->container['salesRepNumericPhoneNumberCountryCode'] === null) {
            $invalid_properties[] = "'salesRepNumericPhoneNumberCountryCode' can't be null";
        }
        if ($this->container['salesRepPhoneNumber'] === null) {
            $invalid_properties[] = "'salesRepPhoneNumber' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['salesRepId'] === null) {
            return false;
        }
        if ($this->container['salesRepFirstName'] === null) {
            return false;
        }
        if ($this->container['salesRepLastName'] === null) {
            return false;
        }
        if ($this->container['salesRepEmail'] === null) {
            return false;
        }
        if ($this->container['salesRepNumericPhoneNumberCountryCode'] === null) {
            return false;
        }
        if ($this->container['salesRepPhoneNumber'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets salesRepId
     * @return string
     */
    public function getSalesRepId()
    {
        return $this->container['salesRepId'];
    }

    /**
     * Sets salesRepId
     * @param string $salesRepId Sales rep Identifier
     * @return $this
     */
    public function setSalesRepId($salesRepId)
    {
        $this->container['salesRepId'] = $salesRepId;

        return $this;
    }

    /**
     * Gets salesRepFirstName
     * @return string
     */
    public function getSalesRepFirstName()
    {
        return $this->container['salesRepFirstName'];
    }

    /**
     * Sets salesRepFirstName
     * @param string $salesRepFirstName Sales rep First Name
     * @return $this
     */
    public function setSalesRepFirstName($salesRepFirstName)
    {
        $this->container['salesRepFirstName'] = $salesRepFirstName;

        return $this;
    }

    /**
     * Gets salesRepLastName
     * @return string
     */
    public function getSalesRepLastName()
    {
        return $this->container['salesRepLastName'];
    }

    /**
     * Sets salesRepLastName
     * @param string $salesRepLastName Sales Rep Last Name
     * @return $this
     */
    public function setSalesRepLastName($salesRepLastName)
    {
        $this->container['salesRepLastName'] = $salesRepLastName;

        return $this;
    }

    /**
     * Gets salesRepEmail
     * @return string
     */
    public function getSalesRepEmail()
    {
        return $this->container['salesRepEmail'];
    }

    /**
     * Sets salesRepEmail
     * @param string $salesRepEmail Sales Rep eMail
     * @return $this
     */
    public function setSalesRepEmail($salesRepEmail)
    {
        $this->container['salesRepEmail'] = $salesRepEmail;

        return $this;
    }

    /**
     * Gets salesRepNumericPhoneNumberCountryCode
     * @return string
     */
    public function getSalesRepNumericPhoneNumberCountryCode()
    {
        return $this->container['salesRepNumericPhoneNumberCountryCode'];
    }

    /**
     * Sets salesRepNumericPhoneNumberCountryCode
     * @param string $salesRepNumericPhoneNumberCountryCode Sales Rep Phone Number Country. Two character country code, ISO 3166-1 alpha-2.
     * @return $this
     */
    public function setSalesRepNumericPhoneNumberCountryCode($salesRepNumericPhoneNumberCountryCode)
    {
        $this->container['salesRepNumericPhoneNumberCountryCode'] = $salesRepNumericPhoneNumberCountryCode;

        return $this;
    }

    /**
     * Gets salesRepPhoneNumber
     * @return string
     */
    public function getSalesRepPhoneNumber()
    {
        return $this->container['salesRepPhoneNumber'];
    }

    /**
     * Sets salesRepPhoneNumber
     * @param string $salesRepPhoneNumber Sales Rep Phone
     * @return $this
     */
    public function setSalesRepPhoneNumber($salesRepPhoneNumber)
    {
        $this->container['salesRepPhoneNumber'] = $salesRepPhoneNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


