<?php
/**
 * CardProcessingConfigCommonAcquirers
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * CardProcessingConfigCommonAcquirers Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CardProcessingConfigCommonAcquirers implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CardProcessingConfig_common_acquirers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'institutionId' => 'string',
        'interbankCardAssociationId' => 'string',
        'discoverInstitutionId' => 'string',
        'countryCode' => 'string',
        'fileDestinationBin' => 'string',
        'merchantVerificationValue' => 'string',
        'merchantId' => 'string',
        'terminalId' => 'string',
        'allowMultipleBills' => 'bool',
        'enableTransactionReferenceNumber' => 'bool',
        'paymentTypes' => 'map[string,\CyberSource\Model\CardProcessingConfigCommonPaymentTypes]',
        'currencies' => 'map[string,\CyberSource\Model\CardProcessingConfigCommonCurrencies]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'institutionId' => null,
        'interbankCardAssociationId' => null,
        'discoverInstitutionId' => null,
        'countryCode' => null,
        'fileDestinationBin' => null,
        'merchantVerificationValue' => null,
        'merchantId' => null,
        'terminalId' => null,
        'allowMultipleBills' => null,
        'enableTransactionReferenceNumber' => null,
        'paymentTypes' => null,
        'currencies' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'institutionId' => 'institutionId',
        'interbankCardAssociationId' => 'interbankCardAssociationId',
        'discoverInstitutionId' => 'discoverInstitutionId',
        'countryCode' => 'countryCode',
        'fileDestinationBin' => 'fileDestinationBin',
        'merchantVerificationValue' => 'merchantVerificationValue',
        'merchantId' => 'merchantId',
        'terminalId' => 'terminalId',
        'allowMultipleBills' => 'allowMultipleBills',
        'enableTransactionReferenceNumber' => 'enableTransactionReferenceNumber',
        'paymentTypes' => 'paymentTypes',
        'currencies' => 'currencies'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'institutionId' => 'setInstitutionId',
        'interbankCardAssociationId' => 'setInterbankCardAssociationId',
        'discoverInstitutionId' => 'setDiscoverInstitutionId',
        'countryCode' => 'setCountryCode',
        'fileDestinationBin' => 'setFileDestinationBin',
        'merchantVerificationValue' => 'setMerchantVerificationValue',
        'merchantId' => 'setMerchantId',
        'terminalId' => 'setTerminalId',
        'allowMultipleBills' => 'setAllowMultipleBills',
        'enableTransactionReferenceNumber' => 'setEnableTransactionReferenceNumber',
        'paymentTypes' => 'setPaymentTypes',
        'currencies' => 'setCurrencies'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'institutionId' => 'getInstitutionId',
        'interbankCardAssociationId' => 'getInterbankCardAssociationId',
        'discoverInstitutionId' => 'getDiscoverInstitutionId',
        'countryCode' => 'getCountryCode',
        'fileDestinationBin' => 'getFileDestinationBin',
        'merchantVerificationValue' => 'getMerchantVerificationValue',
        'merchantId' => 'getMerchantId',
        'terminalId' => 'getTerminalId',
        'allowMultipleBills' => 'getAllowMultipleBills',
        'enableTransactionReferenceNumber' => 'getEnableTransactionReferenceNumber',
        'paymentTypes' => 'getPaymentTypes',
        'currencies' => 'getCurrencies'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['institutionId'] = isset($data['institutionId']) ? $data['institutionId'] : null;
        $this->container['interbankCardAssociationId'] = isset($data['interbankCardAssociationId']) ? $data['interbankCardAssociationId'] : null;
        $this->container['discoverInstitutionId'] = isset($data['discoverInstitutionId']) ? $data['discoverInstitutionId'] : null;
        $this->container['countryCode'] = isset($data['countryCode']) ? $data['countryCode'] : null;
        $this->container['fileDestinationBin'] = isset($data['fileDestinationBin']) ? $data['fileDestinationBin'] : null;
        $this->container['merchantVerificationValue'] = isset($data['merchantVerificationValue']) ? $data['merchantVerificationValue'] : null;
        $this->container['merchantId'] = isset($data['merchantId']) ? $data['merchantId'] : null;
        $this->container['terminalId'] = isset($data['terminalId']) ? $data['terminalId'] : null;
        $this->container['allowMultipleBills'] = isset($data['allowMultipleBills']) ? $data['allowMultipleBills'] : null;
        $this->container['enableTransactionReferenceNumber'] = isset($data['enableTransactionReferenceNumber']) ? $data['enableTransactionReferenceNumber'] : null;
        $this->container['paymentTypes'] = isset($data['paymentTypes']) ? $data['paymentTypes'] : null;
        $this->container['currencies'] = isset($data['currencies']) ? $data['currencies'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets institutionId
     * @return string
     */
    public function getInstitutionId()
    {
        return $this->container['institutionId'];
    }

    /**
     * Sets institutionId
     * @param string $institutionId Identifier of the acquirer. This number is usually assigned by Visa.
     * @return $this
     */
    public function setInstitutionId($institutionId)
    {
        $this->container['institutionId'] = $institutionId;

        return $this;
    }

    /**
     * Gets interbankCardAssociationId
     * @return string
     */
    public function getInterbankCardAssociationId()
    {
        return $this->container['interbankCardAssociationId'];
    }

    /**
     * Sets interbankCardAssociationId
     * @param string $interbankCardAssociationId Number assigned by MasterCard to banks to identify the member in transactions.
     * @return $this
     */
    public function setInterbankCardAssociationId($interbankCardAssociationId)
    {
        $this->container['interbankCardAssociationId'] = $interbankCardAssociationId;

        return $this;
    }

    /**
     * Gets discoverInstitutionId
     * @return string
     */
    public function getDiscoverInstitutionId()
    {
        return $this->container['discoverInstitutionId'];
    }

    /**
     * Sets discoverInstitutionId
     * @param string $discoverInstitutionId Assigned by Discover to identify the acquirer.
     * @return $this
     */
    public function setDiscoverInstitutionId($discoverInstitutionId)
    {
        $this->container['discoverInstitutionId'] = $discoverInstitutionId;

        return $this;
    }

    /**
     * Gets countryCode
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     * @param string $countryCode ISO 4217 format.
     * @return $this
     */
    public function setCountryCode($countryCode)
    {
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets fileDestinationBin
     * @return string
     */
    public function getFileDestinationBin()
    {
        return $this->container['fileDestinationBin'];
    }

    /**
     * Sets fileDestinationBin
     * @param string $fileDestinationBin The BIN to which this capturefile is sent. This field must contain a valid BIN.
     * @return $this
     */
    public function setFileDestinationBin($fileDestinationBin)
    {
        $this->container['fileDestinationBin'] = $fileDestinationBin;

        return $this;
    }

    /**
     * Gets merchantVerificationValue
     * @return string
     */
    public function getMerchantVerificationValue()
    {
        return $this->container['merchantVerificationValue'];
    }

    /**
     * Sets merchantVerificationValue
     * @param string $merchantVerificationValue Identify merchants that participate in Select Merchant Fee (SMF) programs. Unique to the merchant.
     * @return $this
     */
    public function setMerchantVerificationValue($merchantVerificationValue)
    {
        $this->container['merchantVerificationValue'] = $merchantVerificationValue;

        return $this;
    }

    /**
     * Gets merchantId
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchantId'];
    }

    /**
     * Sets merchantId
     * @param string $merchantId Merchant ID assigned by an acquirer or a processor. Should not be overriden by any other party.
     * @return $this
     */
    public function setMerchantId($merchantId)
    {
        $this->container['merchantId'] = $merchantId;

        return $this;
    }

    /**
     * Gets terminalId
     * @return string
     */
    public function getTerminalId()
    {
        return $this->container['terminalId'];
    }

    /**
     * Sets terminalId
     * @param string $terminalId The 'Terminal Id' aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions.
     * @return $this
     */
    public function setTerminalId($terminalId)
    {
        $this->container['terminalId'] = $terminalId;

        return $this;
    }

    /**
     * Gets allowMultipleBills
     * @return bool
     */
    public function getAllowMultipleBills()
    {
        return $this->container['allowMultipleBills'];
    }

    /**
     * Sets allowMultipleBills
     * @param bool $allowMultipleBills Allows multiple captures for a single authorization transaction.
     * @return $this
     */
    public function setAllowMultipleBills($allowMultipleBills)
    {
        $this->container['allowMultipleBills'] = $allowMultipleBills;

        return $this;
    }

    /**
     * Gets enableTransactionReferenceNumber
     * @return bool
     */
    public function getEnableTransactionReferenceNumber()
    {
        return $this->container['enableTransactionReferenceNumber'];
    }

    /**
     * Sets enableTransactionReferenceNumber
     * @param bool $enableTransactionReferenceNumber To enable merchant to send in transaction reference number (unique reconciliation ID).
     * @return $this
     */
    public function setEnableTransactionReferenceNumber($enableTransactionReferenceNumber)
    {
        $this->container['enableTransactionReferenceNumber'] = $enableTransactionReferenceNumber;

        return $this;
    }

    /**
     * Gets paymentTypes
     * @return map[string,\CyberSource\Model\CardProcessingConfigCommonPaymentTypes]
     */
    public function getPaymentTypes()
    {
        return $this->container['paymentTypes'];
    }

    /**
     * Sets paymentTypes
     * @param map[string,\CyberSource\Model\CardProcessingConfigCommonPaymentTypes] $paymentTypes Valid values are: * VISA * MASTERCARD * AMERICAN_EXPRESS * CUP * EFTPOS * DINERS_CLUB * DISCOVER * JCB
     * @return $this
     */
    public function setPaymentTypes($paymentTypes)
    {
        $this->container['paymentTypes'] = $paymentTypes;

        return $this;
    }

    /**
     * Gets currencies
     * @return map[string,\CyberSource\Model\CardProcessingConfigCommonCurrencies]
     */
    public function getCurrencies()
    {
        return $this->container['currencies'];
    }

    /**
     * Sets currencies
     * @param map[string,\CyberSource\Model\CardProcessingConfigCommonCurrencies] $currencies Three-character [ISO 4217 ALPHA-3 Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
     * @return $this
     */
    public function setCurrencies($currencies)
    {
        $this->container['currencies'] = $currencies;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


