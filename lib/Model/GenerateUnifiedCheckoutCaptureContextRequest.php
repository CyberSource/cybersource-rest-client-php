<?php
/**
 * GenerateUnifiedCheckoutCaptureContextRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * GenerateUnifiedCheckoutCaptureContextRequest Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GenerateUnifiedCheckoutCaptureContextRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'generateUnifiedCheckoutCaptureContextRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'targetOrigins' => 'string[]',
        'clientVersion' => 'string',
        'allowedCardNetworks' => 'string[]',
        'allowedPaymentTypes' => 'string[]',
        'country' => 'string',
        'locale' => 'string',
        'captureMandate' => '\CyberSource\Model\Upv1capturecontextsCaptureMandate',
        'orderInformation' => '\CyberSource\Model\Upv1capturecontextsOrderInformation',
        'checkoutApiInitialization' => '\CyberSource\Model\Upv1capturecontextsCheckoutApiInitialization'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'targetOrigins' => null,
        'clientVersion' => null,
        'allowedCardNetworks' => null,
        'allowedPaymentTypes' => null,
        'country' => null,
        'locale' => null,
        'captureMandate' => null,
        'orderInformation' => null,
        'checkoutApiInitialization' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'targetOrigins' => 'targetOrigins',
        'clientVersion' => 'clientVersion',
        'allowedCardNetworks' => 'allowedCardNetworks',
        'allowedPaymentTypes' => 'allowedPaymentTypes',
        'country' => 'country',
        'locale' => 'locale',
        'captureMandate' => 'captureMandate',
        'orderInformation' => 'orderInformation',
        'checkoutApiInitialization' => 'checkoutApiInitialization'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'targetOrigins' => 'setTargetOrigins',
        'clientVersion' => 'setClientVersion',
        'allowedCardNetworks' => 'setAllowedCardNetworks',
        'allowedPaymentTypes' => 'setAllowedPaymentTypes',
        'country' => 'setCountry',
        'locale' => 'setLocale',
        'captureMandate' => 'setCaptureMandate',
        'orderInformation' => 'setOrderInformation',
        'checkoutApiInitialization' => 'setCheckoutApiInitialization'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'targetOrigins' => 'getTargetOrigins',
        'clientVersion' => 'getClientVersion',
        'allowedCardNetworks' => 'getAllowedCardNetworks',
        'allowedPaymentTypes' => 'getAllowedPaymentTypes',
        'country' => 'getCountry',
        'locale' => 'getLocale',
        'captureMandate' => 'getCaptureMandate',
        'orderInformation' => 'getOrderInformation',
        'checkoutApiInitialization' => 'getCheckoutApiInitialization'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['targetOrigins'] = isset($data['targetOrigins']) ? $data['targetOrigins'] : null;
        $this->container['clientVersion'] = isset($data['clientVersion']) ? $data['clientVersion'] : null;
        $this->container['allowedCardNetworks'] = isset($data['allowedCardNetworks']) ? $data['allowedCardNetworks'] : null;
        $this->container['allowedPaymentTypes'] = isset($data['allowedPaymentTypes']) ? $data['allowedPaymentTypes'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['captureMandate'] = isset($data['captureMandate']) ? $data['captureMandate'] : null;
        $this->container['orderInformation'] = isset($data['orderInformation']) ? $data['orderInformation'] : null;
        $this->container['checkoutApiInitialization'] = isset($data['checkoutApiInitialization']) ? $data['checkoutApiInitialization'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets targetOrigins
     * @return string[]
     */
    public function getTargetOrigins()
    {
        return $this->container['targetOrigins'];
    }

    /**
     * Sets targetOrigins
     * @param string[] $targetOrigins
     * @return $this
     */
    public function setTargetOrigins($targetOrigins)
    {
        $this->container['targetOrigins'] = $targetOrigins;

        return $this;
    }

    /**
     * Gets clientVersion
     * @return string
     */
    public function getClientVersion()
    {
        return $this->container['clientVersion'];
    }

    /**
     * Sets clientVersion
     * @param string $clientVersion version number of Unified Checkout being used
     * @return $this
     */
    public function setClientVersion($clientVersion)
    {
        $this->container['clientVersion'] = $clientVersion;

        return $this;
    }

    /**
     * Gets allowedCardNetworks
     * @return string[]
     */
    public function getAllowedCardNetworks()
    {
        return $this->container['allowedCardNetworks'];
    }

    /**
     * Sets allowedCardNetworks
     * @param string[] $allowedCardNetworks
     * @return $this
     */
    public function setAllowedCardNetworks($allowedCardNetworks)
    {
        $this->container['allowedCardNetworks'] = $allowedCardNetworks;

        return $this;
    }

    /**
     * Gets allowedPaymentTypes
     * @return string[]
     */
    public function getAllowedPaymentTypes()
    {
        return $this->container['allowedPaymentTypes'];
    }

    /**
     * Sets allowedPaymentTypes
     * @param string[] $allowedPaymentTypes
     * @return $this
     */
    public function setAllowedPaymentTypes($allowedPaymentTypes)
    {
        $this->container['allowedPaymentTypes'] = $allowedPaymentTypes;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country Country the purchase is originating from (e.g. country of the merchant). Use the two- character ISO Standard
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets locale
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     * @param string $locale Localization of the User experience conforming to the ISO 639-1 language standards and two-character ISO Standard Country Code
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets captureMandate
     * @return \CyberSource\Model\Upv1capturecontextsCaptureMandate
     */
    public function getCaptureMandate()
    {
        return $this->container['captureMandate'];
    }

    /**
     * Sets captureMandate
     * @param \CyberSource\Model\Upv1capturecontextsCaptureMandate $captureMandate
     * @return $this
     */
    public function setCaptureMandate($captureMandate)
    {
        $this->container['captureMandate'] = $captureMandate;

        return $this;
    }

    /**
     * Gets orderInformation
     * @return \CyberSource\Model\Upv1capturecontextsOrderInformation
     */
    public function getOrderInformation()
    {
        return $this->container['orderInformation'];
    }

    /**
     * Sets orderInformation
     * @param \CyberSource\Model\Upv1capturecontextsOrderInformation $orderInformation
     * @return $this
     */
    public function setOrderInformation($orderInformation)
    {
        $this->container['orderInformation'] = $orderInformation;

        return $this;
    }

    /**
     * Gets checkoutApiInitialization
     * @return \CyberSource\Model\Upv1capturecontextsCheckoutApiInitialization
     */
    public function getCheckoutApiInitialization()
    {
        return $this->container['checkoutApiInitialization'];
    }

    /**
     * Sets checkoutApiInitialization
     * @param \CyberSource\Model\Upv1capturecontextsCheckoutApiInitialization $checkoutApiInitialization
     * @return $this
     */
    public function setCheckoutApiInitialization($checkoutApiInitialization)
    {
        $this->container['checkoutApiInitialization'] = $checkoutApiInitialization;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


