<?php
/**
 * Kmsegressv2keyssymKeyInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * Kmsegressv2keyssymKeyInformation Class Doc Comment
 *
 * @category    Class
 * @description Egress Key Information Request
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Kmsegressv2keyssymKeyInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'kmsegressv2keyssym_keyInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'provider' => 'string',
        'tenant' => 'string',
        'keyType' => 'string',
        'organizationId' => 'string',
        'clientKeyId' => 'string',
        'keyId' => 'string',
        'key' => 'string',
        'status' => 'string',
        'expiryDuration' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'provider' => null,
        'tenant' => null,
        'keyType' => null,
        'organizationId' => null,
        'clientKeyId' => null,
        'keyId' => null,
        'key' => null,
        'status' => null,
        'expiryDuration' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'provider' => 'provider',
        'tenant' => 'tenant',
        'keyType' => 'keyType',
        'organizationId' => 'organizationId',
        'clientKeyId' => 'clientKeyId',
        'keyId' => 'keyId',
        'key' => 'key',
        'status' => 'status',
        'expiryDuration' => 'expiryDuration'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'provider' => 'setProvider',
        'tenant' => 'setTenant',
        'keyType' => 'setKeyType',
        'organizationId' => 'setOrganizationId',
        'clientKeyId' => 'setClientKeyId',
        'keyId' => 'setKeyId',
        'key' => 'setKey',
        'status' => 'setStatus',
        'expiryDuration' => 'setExpiryDuration'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'provider' => 'getProvider',
        'tenant' => 'getTenant',
        'keyType' => 'getKeyType',
        'organizationId' => 'getOrganizationId',
        'clientKeyId' => 'getClientKeyId',
        'keyId' => 'getKeyId',
        'key' => 'getKey',
        'status' => 'getStatus',
        'expiryDuration' => 'getExpiryDuration'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['tenant'] = isset($data['tenant']) ? $data['tenant'] : null;
        $this->container['keyType'] = isset($data['keyType']) ? $data['keyType'] : null;
        $this->container['organizationId'] = isset($data['organizationId']) ? $data['organizationId'] : null;
        $this->container['clientKeyId'] = isset($data['clientKeyId']) ? $data['clientKeyId'] : null;
        $this->container['keyId'] = isset($data['keyId']) ? $data['keyId'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['expiryDuration'] = isset($data['expiryDuration']) ? $data['expiryDuration'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets provider
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     * @param string $provider Provider name
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets tenant
     * @return string
     */
    public function getTenant()
    {
        return $this->container['tenant'];
    }

    /**
     * Sets tenant
     * @param string $tenant Tenant name
     * @return $this
     */
    public function setTenant($tenant)
    {
        $this->container['tenant'] = $tenant;

        return $this;
    }

    /**
     * Gets keyType
     * @return string
     */
    public function getKeyType()
    {
        return $this->container['keyType'];
    }

    /**
     * Sets keyType
     * @param string $keyType Type of the key
     * @return $this
     */
    public function setKeyType($keyType)
    {
        $this->container['keyType'] = $keyType;

        return $this;
    }

    /**
     * Gets organizationId
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organizationId'];
    }

    /**
     * Sets organizationId
     * @param string $organizationId Organization Id
     * @return $this
     */
    public function setOrganizationId($organizationId)
    {
        $this->container['organizationId'] = $organizationId;

        return $this;
    }

    /**
     * Gets clientKeyId
     * @return string
     */
    public function getClientKeyId()
    {
        return $this->container['clientKeyId'];
    }

    /**
     * Sets clientKeyId
     * @param string $clientKeyId Client key Id
     * @return $this
     */
    public function setClientKeyId($clientKeyId)
    {
        $this->container['clientKeyId'] = $clientKeyId;

        return $this;
    }

    /**
     * Gets keyId
     * @return string
     */
    public function getKeyId()
    {
        return $this->container['keyId'];
    }

    /**
     * Sets keyId
     * @param string $keyId Key Serial Number
     * @return $this
     */
    public function setKeyId($keyId)
    {
        $this->container['keyId'] = $keyId;

        return $this;
    }

    /**
     * Gets key
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     * @param string $key Value of the key
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status The status of the key
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets expiryDuration
     * @return string
     */
    public function getExpiryDuration()
    {
        return $this->container['expiryDuration'];
    }

    /**
     * Sets expiryDuration
     * @param string $expiryDuration Key expiry duration in days
     * @return $this
     */
    public function setExpiryDuration($expiryDuration)
    {
        $this->container['expiryDuration'] = $expiryDuration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


