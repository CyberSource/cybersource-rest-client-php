<?php
/**
 * PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze Class Doc Comment
 *
 * @category    Class
 * @description Paze specific required configuration details under unified checkout
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'paymentsProducts_unifiedCheckout_configurationInformation_configurations_features_paze';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'financialInstitution' => 'string',
        'financialInstitutionContract' => 'bool',
        'pazeEnabledInProfile' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'financialInstitution' => null,
        'financialInstitutionContract' => null,
        'pazeEnabledInProfile' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'financialInstitution' => 'financialInstitution',
        'financialInstitutionContract' => 'financialInstitutionContract',
        'pazeEnabledInProfile' => 'pazeEnabledInProfile'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'financialInstitution' => 'setFinancialInstitution',
        'financialInstitutionContract' => 'setFinancialInstitutionContract',
        'pazeEnabledInProfile' => 'setPazeEnabledInProfile'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'financialInstitution' => 'getFinancialInstitution',
        'financialInstitutionContract' => 'getFinancialInstitutionContract',
        'pazeEnabledInProfile' => 'getPazeEnabledInProfile'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['financialInstitution'] = isset($data['financialInstitution']) ? $data['financialInstitution'] : null;
        $this->container['financialInstitutionContract'] = isset($data['financialInstitutionContract']) ? $data['financialInstitutionContract'] : null;
        $this->container['pazeEnabledInProfile'] = isset($data['pazeEnabledInProfile']) ? $data['pazeEnabledInProfile'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets financialInstitution
     * @return string
     */
    public function getFinancialInstitution()
    {
        return $this->container['financialInstitution'];
    }

    /**
     * Sets financialInstitution
     * @param string $financialInstitution Indicates the financial institution with whom the contract has been signed  Possible values: - BANKOFAMERICA - WELLSFARGO
     * @return $this
     */
    public function setFinancialInstitution($financialInstitution)
    {
        $this->container['financialInstitution'] = $financialInstitution;

        return $this;
    }

    /**
     * Gets financialInstitutionContract
     * @return bool
     */
    public function getFinancialInstitutionContract()
    {
        return $this->container['financialInstitutionContract'];
    }

    /**
     * Sets financialInstitutionContract
     * @param bool $financialInstitutionContract Indicates if the contract has been signed with the selected bank
     * @return $this
     */
    public function setFinancialInstitutionContract($financialInstitutionContract)
    {
        $this->container['financialInstitutionContract'] = $financialInstitutionContract;

        return $this;
    }

    /**
     * Gets pazeEnabledInProfile
     * @return bool
     */
    public function getPazeEnabledInProfile()
    {
        return $this->container['pazeEnabledInProfile'];
    }

    /**
     * Sets pazeEnabledInProfile
     * @param bool $pazeEnabledInProfile Paze enabled in the profile for the merchants
     * @return $this
     */
    public function setPazeEnabledInProfile($pazeEnabledInProfile)
    {
        $this->container['pazeEnabledInProfile'] = $pazeEnabledInProfile;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


