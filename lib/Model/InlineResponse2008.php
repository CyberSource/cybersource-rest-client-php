<?php
/**
 * InlineResponse2008
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * InlineResponse2008 Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2008 implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_8';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'version' => 'string',
        'reportCreatedDate' => 'string',
        'batchId' => 'string',
        'batchSource' => 'string',
        'batchCaEndpoints' => 'string',
        'batchCreatedDate' => 'string',
        'merchantReference' => 'string',
        'totals' => '\CyberSource\Model\InlineResponse2006EmbeddedTotals',
        'billing' => '\CyberSource\Model\InlineResponse2007Billing',
        'records' => '\CyberSource\Model\InlineResponse2008Records[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'version' => null,
        'reportCreatedDate' => null,
        'batchId' => null,
        'batchSource' => null,
        'batchCaEndpoints' => null,
        'batchCreatedDate' => null,
        'merchantReference' => null,
        'totals' => null,
        'billing' => null,
        'records' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'reportCreatedDate' => 'reportCreatedDate',
        'batchId' => 'batchId',
        'batchSource' => 'batchSource',
        'batchCaEndpoints' => 'batchCaEndpoints',
        'batchCreatedDate' => 'batchCreatedDate',
        'merchantReference' => 'merchantReference',
        'totals' => 'totals',
        'billing' => 'billing',
        'records' => 'records'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'reportCreatedDate' => 'setReportCreatedDate',
        'batchId' => 'setBatchId',
        'batchSource' => 'setBatchSource',
        'batchCaEndpoints' => 'setBatchCaEndpoints',
        'batchCreatedDate' => 'setBatchCreatedDate',
        'merchantReference' => 'setMerchantReference',
        'totals' => 'setTotals',
        'billing' => 'setBilling',
        'records' => 'setRecords'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'reportCreatedDate' => 'getReportCreatedDate',
        'batchId' => 'getBatchId',
        'batchSource' => 'getBatchSource',
        'batchCaEndpoints' => 'getBatchCaEndpoints',
        'batchCreatedDate' => 'getBatchCreatedDate',
        'merchantReference' => 'getMerchantReference',
        'totals' => 'getTotals',
        'billing' => 'getBilling',
        'records' => 'getRecords'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['reportCreatedDate'] = isset($data['reportCreatedDate']) ? $data['reportCreatedDate'] : null;
        $this->container['batchId'] = isset($data['batchId']) ? $data['batchId'] : null;
        $this->container['batchSource'] = isset($data['batchSource']) ? $data['batchSource'] : null;
        $this->container['batchCaEndpoints'] = isset($data['batchCaEndpoints']) ? $data['batchCaEndpoints'] : null;
        $this->container['batchCreatedDate'] = isset($data['batchCreatedDate']) ? $data['batchCreatedDate'] : null;
        $this->container['merchantReference'] = isset($data['merchantReference']) ? $data['merchantReference'] : null;
        $this->container['totals'] = isset($data['totals']) ? $data['totals'] : null;
        $this->container['billing'] = isset($data['billing']) ? $data['billing'] : null;
        $this->container['records'] = isset($data['records']) ? $data['records'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets reportCreatedDate
     * @return string
     */
    public function getReportCreatedDate()
    {
        return $this->container['reportCreatedDate'];
    }

    /**
     * Sets reportCreatedDate
     * @param string $reportCreatedDate ISO-8601 format: yyyy-MM-ddTHH:mm:ssZ
     * @return $this
     */
    public function setReportCreatedDate($reportCreatedDate)
    {
        $this->container['reportCreatedDate'] = $reportCreatedDate;

        return $this;
    }

    /**
     * Gets batchId
     * @return string
     */
    public function getBatchId()
    {
        return $this->container['batchId'];
    }

    /**
     * Sets batchId
     * @param string $batchId Unique identification number assigned to the submitted request.
     * @return $this
     */
    public function setBatchId($batchId)
    {
        $this->container['batchId'] = $batchId;

        return $this;
    }

    /**
     * Gets batchSource
     * @return string
     */
    public function getBatchSource()
    {
        return $this->container['batchSource'];
    }

    /**
     * Sets batchSource
     * @param string $batchSource Valid Values:   * SCHEDULER   * TOKEN_API   * CREDIT_CARD_FILE_UPLOAD   * AMEX_REGSITRY   * AMEX_REGISTRY_API   * AMEX_MAINTENANCE
     * @return $this
     */
    public function setBatchSource($batchSource)
    {
        $this->container['batchSource'] = $batchSource;

        return $this;
    }

    /**
     * Gets batchCaEndpoints
     * @return string
     */
    public function getBatchCaEndpoints()
    {
        return $this->container['batchCaEndpoints'];
    }

    /**
     * Sets batchCaEndpoints
     * @param string $batchCaEndpoints
     * @return $this
     */
    public function setBatchCaEndpoints($batchCaEndpoints)
    {
        $this->container['batchCaEndpoints'] = $batchCaEndpoints;

        return $this;
    }

    /**
     * Gets batchCreatedDate
     * @return string
     */
    public function getBatchCreatedDate()
    {
        return $this->container['batchCreatedDate'];
    }

    /**
     * Sets batchCreatedDate
     * @param string $batchCreatedDate ISO-8601 format: yyyy-MM-ddTHH:mm:ssZ
     * @return $this
     */
    public function setBatchCreatedDate($batchCreatedDate)
    {
        $this->container['batchCreatedDate'] = $batchCreatedDate;

        return $this;
    }

    /**
     * Gets merchantReference
     * @return string
     */
    public function getMerchantReference()
    {
        return $this->container['merchantReference'];
    }

    /**
     * Sets merchantReference
     * @param string $merchantReference Reference used by merchant to identify batch.
     * @return $this
     */
    public function setMerchantReference($merchantReference)
    {
        $this->container['merchantReference'] = $merchantReference;

        return $this;
    }

    /**
     * Gets totals
     * @return \CyberSource\Model\InlineResponse2006EmbeddedTotals
     */
    public function getTotals()
    {
        return $this->container['totals'];
    }

    /**
     * Sets totals
     * @param \CyberSource\Model\InlineResponse2006EmbeddedTotals $totals
     * @return $this
     */
    public function setTotals($totals)
    {
        $this->container['totals'] = $totals;

        return $this;
    }

    /**
     * Gets billing
     * @return \CyberSource\Model\InlineResponse2007Billing
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     * @param \CyberSource\Model\InlineResponse2007Billing $billing
     * @return $this
     */
    public function setBilling($billing)
    {
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets records
     * @return \CyberSource\Model\InlineResponse2008Records[]
     */
    public function getRecords()
    {
        return $this->container['records'];
    }

    /**
     * Sets records
     * @param \CyberSource\Model\InlineResponse2008Records[] $records
     * @return $this
     */
    public function setRecords($records)
    {
        $this->container['records'] = $records;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


