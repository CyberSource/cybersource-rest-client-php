<?php
/**
 * TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'tssV2TransactionsGet200Response_paymentInformation_accountFeatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'balanceAmount' => 'string',
        'previousBalanceAmount' => 'string',
        'currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'balanceAmount' => null,
        'previousBalanceAmount' => null,
        'currency' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'balanceAmount' => 'balanceAmount',
        'previousBalanceAmount' => 'previousBalanceAmount',
        'currency' => 'currency'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'balanceAmount' => 'setBalanceAmount',
        'previousBalanceAmount' => 'setPreviousBalanceAmount',
        'currency' => 'setCurrency'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'balanceAmount' => 'getBalanceAmount',
        'previousBalanceAmount' => 'getPreviousBalanceAmount',
        'currency' => 'getCurrency'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['balanceAmount'] = isset($data['balanceAmount']) ? $data['balanceAmount'] : null;
        $this->container['previousBalanceAmount'] = isset($data['previousBalanceAmount']) ? $data['previousBalanceAmount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['balanceAmount']) && (strlen($this->container['balanceAmount']) > 12)) {
            $invalid_properties[] = "invalid value for 'balanceAmount', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['previousBalanceAmount']) && (strlen($this->container['previousBalanceAmount']) > 12)) {
            $invalid_properties[] = "invalid value for 'previousBalanceAmount', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['currency']) && (strlen($this->container['currency']) > 5)) {
            $invalid_properties[] = "invalid value for 'currency', the character length must be smaller than or equal to 5.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['balanceAmount']) > 12) {
            return false;
        }
        if (strlen($this->container['previousBalanceAmount']) > 12) {
            return false;
        }
        if (strlen($this->container['currency']) > 5) {
            return false;
        }
        return true;
    }


    /**
     * Gets balanceAmount
     * @return string
     */
    public function getBalanceAmount()
    {
        return $this->container['balanceAmount'];
    }

    /**
     * Sets balanceAmount
     * @param string $balanceAmount Remaining balance on the account.  Returned by authorization service.  #### PIN debit Remaining balance on the prepaid card.  Returned by PIN debit purchase.
     * @return $this
     */
    public function setBalanceAmount($balanceAmount)
    {
        if (!is_null($balanceAmount) && (strlen($balanceAmount) > 12)) {
            throw new \InvalidArgumentException('invalid length for $balanceAmount when calling TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures., must be smaller than or equal to 12.');
        }

        $this->container['balanceAmount'] = $balanceAmount;

        return $this;
    }

    /**
     * Gets previousBalanceAmount
     * @return string
     */
    public function getPreviousBalanceAmount()
    {
        return $this->container['previousBalanceAmount'];
    }

    /**
     * Sets previousBalanceAmount
     * @param string $previousBalanceAmount Remaining balance on the account.  Returned by authorization service.  #### PIN debit Remaining balance on the prepaid card.  Returned by PIN debit purchase.
     * @return $this
     */
    public function setPreviousBalanceAmount($previousBalanceAmount)
    {
        if (!is_null($previousBalanceAmount) && (strlen($previousBalanceAmount) > 12)) {
            throw new \InvalidArgumentException('invalid length for $previousBalanceAmount when calling TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures., must be smaller than or equal to 12.');
        }

        $this->container['previousBalanceAmount'] = $previousBalanceAmount;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency Currency of the remaining balance on the account. For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  Returned by authorization service.  #### PIN debit Currency of the remaining balance on the prepaid card.  Returned by PIN debit purchase.
     * @return $this
     */
    public function setCurrency($currency)
    {
        if (!is_null($currency) && (strlen($currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures., must be smaller than or equal to 5.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


