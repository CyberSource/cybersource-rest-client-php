<?php
/**
 * PayerAuthConfigCardTypes
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * PayerAuthConfigCardTypes Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PayerAuthConfigCardTypes implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PayerAuthConfig_cardTypes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'verifiedByVisa' => '\CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa',
        'masterCardSecureCode' => '\CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa',
        'amexSafeKey' => '\CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa',
        'jCBJSecure' => '\CyberSource\Model\PayerAuthConfigCardTypesJCBJSecure',
        'dinersClubInternationalProtectBuy' => '\CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa',
        'eLO' => '\CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa',
        'uPI' => '\CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa',
        'cB' => '\CyberSource\Model\PayerAuthConfigCardTypesCB'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'verifiedByVisa' => null,
        'masterCardSecureCode' => null,
        'amexSafeKey' => null,
        'jCBJSecure' => null,
        'dinersClubInternationalProtectBuy' => null,
        'eLO' => null,
        'uPI' => null,
        'cB' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'verifiedByVisa' => 'verifiedByVisa',
        'masterCardSecureCode' => 'masterCardSecureCode',
        'amexSafeKey' => 'amexSafeKey',
        'jCBJSecure' => 'jCBJSecure',
        'dinersClubInternationalProtectBuy' => 'dinersClubInternationalProtectBuy',
        'eLO' => 'ELO',
        'uPI' => 'UPI',
        'cB' => 'CB'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'verifiedByVisa' => 'setVerifiedByVisa',
        'masterCardSecureCode' => 'setMasterCardSecureCode',
        'amexSafeKey' => 'setAmexSafeKey',
        'jCBJSecure' => 'setJCBJSecure',
        'dinersClubInternationalProtectBuy' => 'setDinersClubInternationalProtectBuy',
        'eLO' => 'setELO',
        'uPI' => 'setUPI',
        'cB' => 'setCB'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'verifiedByVisa' => 'getVerifiedByVisa',
        'masterCardSecureCode' => 'getMasterCardSecureCode',
        'amexSafeKey' => 'getAmexSafeKey',
        'jCBJSecure' => 'getJCBJSecure',
        'dinersClubInternationalProtectBuy' => 'getDinersClubInternationalProtectBuy',
        'eLO' => 'getELO',
        'uPI' => 'getUPI',
        'cB' => 'getCB'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['verifiedByVisa'] = isset($data['verifiedByVisa']) ? $data['verifiedByVisa'] : null;
        $this->container['masterCardSecureCode'] = isset($data['masterCardSecureCode']) ? $data['masterCardSecureCode'] : null;
        $this->container['amexSafeKey'] = isset($data['amexSafeKey']) ? $data['amexSafeKey'] : null;
        $this->container['jCBJSecure'] = isset($data['jCBJSecure']) ? $data['jCBJSecure'] : null;
        $this->container['dinersClubInternationalProtectBuy'] = isset($data['dinersClubInternationalProtectBuy']) ? $data['dinersClubInternationalProtectBuy'] : null;
        $this->container['eLO'] = isset($data['eLO']) ? $data['eLO'] : null;
        $this->container['uPI'] = isset($data['uPI']) ? $data['uPI'] : null;
        $this->container['cB'] = isset($data['cB']) ? $data['cB'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets verifiedByVisa
     * @return \CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa
     */
    public function getVerifiedByVisa()
    {
        return $this->container['verifiedByVisa'];
    }

    /**
     * Sets verifiedByVisa
     * @param \CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa $verifiedByVisa
     * @return $this
     */
    public function setVerifiedByVisa($verifiedByVisa)
    {
        $this->container['verifiedByVisa'] = $verifiedByVisa;

        return $this;
    }

    /**
     * Gets masterCardSecureCode
     * @return \CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa
     */
    public function getMasterCardSecureCode()
    {
        return $this->container['masterCardSecureCode'];
    }

    /**
     * Sets masterCardSecureCode
     * @param \CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa $masterCardSecureCode
     * @return $this
     */
    public function setMasterCardSecureCode($masterCardSecureCode)
    {
        $this->container['masterCardSecureCode'] = $masterCardSecureCode;

        return $this;
    }

    /**
     * Gets amexSafeKey
     * @return \CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa
     */
    public function getAmexSafeKey()
    {
        return $this->container['amexSafeKey'];
    }

    /**
     * Sets amexSafeKey
     * @param \CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa $amexSafeKey
     * @return $this
     */
    public function setAmexSafeKey($amexSafeKey)
    {
        $this->container['amexSafeKey'] = $amexSafeKey;

        return $this;
    }

    /**
     * Gets jCBJSecure
     * @return \CyberSource\Model\PayerAuthConfigCardTypesJCBJSecure
     */
    public function getJCBJSecure()
    {
        return $this->container['jCBJSecure'];
    }

    /**
     * Sets jCBJSecure
     * @param \CyberSource\Model\PayerAuthConfigCardTypesJCBJSecure $jCBJSecure
     * @return $this
     */
    public function setJCBJSecure($jCBJSecure)
    {
        $this->container['jCBJSecure'] = $jCBJSecure;

        return $this;
    }

    /**
     * Gets dinersClubInternationalProtectBuy
     * @return \CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa
     */
    public function getDinersClubInternationalProtectBuy()
    {
        return $this->container['dinersClubInternationalProtectBuy'];
    }

    /**
     * Sets dinersClubInternationalProtectBuy
     * @param \CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa $dinersClubInternationalProtectBuy
     * @return $this
     */
    public function setDinersClubInternationalProtectBuy($dinersClubInternationalProtectBuy)
    {
        $this->container['dinersClubInternationalProtectBuy'] = $dinersClubInternationalProtectBuy;

        return $this;
    }

    /**
     * Gets eLO
     * @return \CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa
     */
    public function getELO()
    {
        return $this->container['eLO'];
    }

    /**
     * Sets eLO
     * @param \CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa $eLO
     * @return $this
     */
    public function setELO($eLO)
    {
        $this->container['eLO'] = $eLO;

        return $this;
    }

    /**
     * Gets uPI
     * @return \CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa
     */
    public function getUPI()
    {
        return $this->container['uPI'];
    }

    /**
     * Sets uPI
     * @param \CyberSource\Model\PayerAuthConfigCardTypesVerifiedByVisa $uPI
     * @return $this
     */
    public function setUPI($uPI)
    {
        $this->container['uPI'] = $uPI;

        return $this;
    }

    /**
     * Gets cB
     * @return \CyberSource\Model\PayerAuthConfigCardTypesCB
     */
    public function getCB()
    {
        return $this->container['cB'];
    }

    /**
     * Sets cB
     * @param \CyberSource\Model\PayerAuthConfigCardTypesCB $cB
     * @return $this
     */
    public function setCB($cB)
    {
        $this->container['cB'] = $cB;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


