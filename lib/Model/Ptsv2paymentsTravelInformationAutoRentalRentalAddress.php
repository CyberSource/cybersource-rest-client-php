<?php
/**
 * Ptsv2paymentsTravelInformationAutoRentalRentalAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * Ptsv2paymentsTravelInformationAutoRentalRentalAddress Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Ptsv2paymentsTravelInformationAutoRentalRentalAddress implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ptsv2payments_travelInformation_autoRental_rentalAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'city' => 'string',
        'state' => 'string',
        'country' => 'string',
        'locationId' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'location' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'city' => null,
        'state' => null,
        'country' => null,
        'locationId' => null,
        'address1' => null,
        'address2' => null,
        'location' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'city' => 'city',
        'state' => 'state',
        'country' => 'country',
        'locationId' => 'locationId',
        'address1' => 'address1',
        'address2' => 'address2',
        'location' => 'location'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'city' => 'setCity',
        'state' => 'setState',
        'country' => 'setCountry',
        'locationId' => 'setLocationId',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'location' => 'setLocation'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'city' => 'getCity',
        'state' => 'getState',
        'country' => 'getCountry',
        'locationId' => 'getLocationId',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'location' => 'getLocation'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['locationId'] = isset($data['locationId']) ? $data['locationId'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['city']) && (strlen($this->container['city']) > 25)) {
            $invalid_properties[] = "invalid value for 'city', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['state']) && (strlen($this->container['state']) > 3)) {
            $invalid_properties[] = "invalid value for 'state', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['country']) && (strlen($this->container['country']) > 3)) {
            $invalid_properties[] = "invalid value for 'country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['locationId']) && (strlen($this->container['locationId']) > 10)) {
            $invalid_properties[] = "invalid value for 'locationId', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['address1']) && (strlen($this->container['address1']) > 13)) {
            $invalid_properties[] = "invalid value for 'address1', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['address2']) && (strlen($this->container['address2']) > 13)) {
            $invalid_properties[] = "invalid value for 'address2', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['location']) && (strlen($this->container['location']) > 38)) {
            $invalid_properties[] = "invalid value for 'location', the character length must be smaller than or equal to 38.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['city']) > 25) {
            return false;
        }
        if (strlen($this->container['state']) > 3) {
            return false;
        }
        if (strlen($this->container['country']) > 3) {
            return false;
        }
        if (strlen($this->container['locationId']) > 10) {
            return false;
        }
        if (strlen($this->container['address1']) > 13) {
            return false;
        }
        if (strlen($this->container['address2']) > 13) {
            return false;
        }
        if (strlen($this->container['location']) > 38) {
            return false;
        }
        return true;
    }


    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city City in which the auto was rented.  For authorizations, this field is supported for Visa, MasterCard, and American Express.  For captures, this field is supported only for American Express.  For all other card types, this field is ignored.
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (strlen($city) > 25)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Ptsv2paymentsTravelInformationAutoRentalRentalAddress., must be smaller than or equal to 25.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state State in which the auto was rented. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).
     * @return $this
     */
    public function setState($state)
    {
        if (!is_null($state) && (strlen($state) > 3)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Ptsv2paymentsTravelInformationAutoRentalRentalAddress., must be smaller than or equal to 3.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country Country where the auto was rented. Use the [ISO Standard Country Codes.](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf) This field is supported only for American Express.
     * @return $this
     */
    public function setCountry($country)
    {
        if (!is_null($country) && (strlen($country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country when calling Ptsv2paymentsTravelInformationAutoRentalRentalAddress., must be smaller than or equal to 3.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets locationId
     * @return string
     */
    public function getLocationId()
    {
        return $this->container['locationId'];
    }

    /**
     * Sets locationId
     * @param string $locationId The agency code, address, phone number, etc., used to identify the location where the vehicle was rented.
     * @return $this
     */
    public function setLocationId($locationId)
    {
        if (!is_null($locationId) && (strlen($locationId) > 10)) {
            throw new \InvalidArgumentException('invalid length for $locationId when calling Ptsv2paymentsTravelInformationAutoRentalRentalAddress., must be smaller than or equal to 10.');
        }

        $this->container['locationId'] = $locationId;

        return $this;
    }

    /**
     * Gets address1
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     * @param string $address1 Address from where the vehicle was rented.
     * @return $this
     */
    public function setAddress1($address1)
    {
        if (!is_null($address1) && (strlen($address1) > 13)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling Ptsv2paymentsTravelInformationAutoRentalRentalAddress., must be smaller than or equal to 13.');
        }

        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     * @param string $address2 Address from where the vehicle was rented.
     * @return $this
     */
    public function setAddress2($address2)
    {
        if (!is_null($address2) && (strlen($address2) > 13)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling Ptsv2paymentsTravelInformationAutoRentalRentalAddress., must be smaller than or equal to 13.');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets location
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     * @param string $location This field contains the location where a taxi passenger was picked up or where an auto rental vehicle was picked up. In most cases, this is the rental agency's business name that appears on the storefront and/or customer receipts, commonly referred to as the DBA (Doing Business As) name. However, if the vehicle was picked up at another location (e.g., a hotel,auto dealership, repair shop, etc.), the name of that location should be used. This entry must be easily recognized by the Cardmember to avoid unnecessary inquiries. If the name is more than 38  characters, use proper and meaningful abbreviation, when possible.
     * @return $this
     */
    public function setLocation($location)
    {
        if (!is_null($location) && (strlen($location) > 38)) {
            throw new \InvalidArgumentException('invalid length for $location when calling Ptsv2paymentsTravelInformationAutoRentalRentalAddress., must be smaller than or equal to 38.');
        }

        $this->container['location'] = $location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


