<?php
/**
 * CardProcessingConfigFeaturesCardNotPresent
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * CardProcessingConfigFeaturesCardNotPresent Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CardProcessingConfigFeaturesCardNotPresent implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CardProcessingConfig_features_cardNotPresent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'processors' => 'map[string,\CyberSource\Model\CardProcessingConfigFeaturesCardNotPresentProcessors]',
        'ignoreAddressVerificationSystem' => 'bool',
        'visaStraightThroughProcessingOnly' => 'bool',
        'amexTransactionAdviceAddendum1' => 'string',
        'installment' => '\CyberSource\Model\CardProcessingConfigFeaturesCardNotPresentInstallment'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'processors' => null,
        'ignoreAddressVerificationSystem' => null,
        'visaStraightThroughProcessingOnly' => null,
        'amexTransactionAdviceAddendum1' => null,
        'installment' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'processors' => 'processors',
        'ignoreAddressVerificationSystem' => 'ignoreAddressVerificationSystem',
        'visaStraightThroughProcessingOnly' => 'visaStraightThroughProcessingOnly',
        'amexTransactionAdviceAddendum1' => 'amexTransactionAdviceAddendum1',
        'installment' => 'installment'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'processors' => 'setProcessors',
        'ignoreAddressVerificationSystem' => 'setIgnoreAddressVerificationSystem',
        'visaStraightThroughProcessingOnly' => 'setVisaStraightThroughProcessingOnly',
        'amexTransactionAdviceAddendum1' => 'setAmexTransactionAdviceAddendum1',
        'installment' => 'setInstallment'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'processors' => 'getProcessors',
        'ignoreAddressVerificationSystem' => 'getIgnoreAddressVerificationSystem',
        'visaStraightThroughProcessingOnly' => 'getVisaStraightThroughProcessingOnly',
        'amexTransactionAdviceAddendum1' => 'getAmexTransactionAdviceAddendum1',
        'installment' => 'getInstallment'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['processors'] = isset($data['processors']) ? $data['processors'] : null;
        $this->container['ignoreAddressVerificationSystem'] = isset($data['ignoreAddressVerificationSystem']) ? $data['ignoreAddressVerificationSystem'] : null;
        $this->container['visaStraightThroughProcessingOnly'] = isset($data['visaStraightThroughProcessingOnly']) ? $data['visaStraightThroughProcessingOnly'] : null;
        $this->container['amexTransactionAdviceAddendum1'] = isset($data['amexTransactionAdviceAddendum1']) ? $data['amexTransactionAdviceAddendum1'] : null;
        $this->container['installment'] = isset($data['installment']) ? $data['installment'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets processors
     * @return map[string,\CyberSource\Model\CardProcessingConfigFeaturesCardNotPresentProcessors]
     */
    public function getProcessors()
    {
        return $this->container['processors'];
    }

    /**
     * Sets processors
     * @param map[string,\CyberSource\Model\CardProcessingConfigFeaturesCardNotPresentProcessors] $processors e.g. * amexdirect * barclays2 * CUP * EFTPOS * fdiglobal * gpx * smartfdc * tsys * vero * VPC  For VPC, CUP and EFTPOS processors, replace the processor name from VPC or CUP or EFTPOS to the actual processor name in the sample request. e.g. replace VPC with &lt;your vpc processor&gt;
     * @return $this
     */
    public function setProcessors($processors)
    {
        $this->container['processors'] = $processors;

        return $this;
    }

    /**
     * Gets ignoreAddressVerificationSystem
     * @return bool
     */
    public function getIgnoreAddressVerificationSystem()
    {
        return $this->container['ignoreAddressVerificationSystem'];
    }

    /**
     * Sets ignoreAddressVerificationSystem
     * @param bool $ignoreAddressVerificationSystem Flag for a sale request that indicates whether to allow the capture service to run even when the authorization receives an AVS decline. Applicable for VPC, FDI Global (fdiglobal), GPX (gpx) and GPN (gpn) processors.
     * @return $this
     */
    public function setIgnoreAddressVerificationSystem($ignoreAddressVerificationSystem)
    {
        $this->container['ignoreAddressVerificationSystem'] = $ignoreAddressVerificationSystem;

        return $this;
    }

    /**
     * Gets visaStraightThroughProcessingOnly
     * @return bool
     */
    public function getVisaStraightThroughProcessingOnly()
    {
        return $this->container['visaStraightThroughProcessingOnly'];
    }

    /**
     * Sets visaStraightThroughProcessingOnly
     * @param bool $visaStraightThroughProcessingOnly Indicates if a merchant is enabled for Straight Through Processing - B2B invoice payments. Applicable for FDI Global (fdiglobal), TSYS (tsys), VPC and GPX (gpx) processors.
     * @return $this
     */
    public function setVisaStraightThroughProcessingOnly($visaStraightThroughProcessingOnly)
    {
        $this->container['visaStraightThroughProcessingOnly'] = $visaStraightThroughProcessingOnly;

        return $this;
    }

    /**
     * Gets amexTransactionAdviceAddendum1
     * @return string
     */
    public function getAmexTransactionAdviceAddendum1()
    {
        return $this->container['amexTransactionAdviceAddendum1'];
    }

    /**
     * Sets amexTransactionAdviceAddendum1
     * @param string $amexTransactionAdviceAddendum1 Advice addendum field. It is used to display descriptive information about a transaction on customer's American Express card statement. Applicable for TSYS (tsys), FDI Global (fdiglobal) and American Express Direct (amexdirect) processors.
     * @return $this
     */
    public function setAmexTransactionAdviceAddendum1($amexTransactionAdviceAddendum1)
    {
        $this->container['amexTransactionAdviceAddendum1'] = $amexTransactionAdviceAddendum1;

        return $this;
    }

    /**
     * Gets installment
     * @return \CyberSource\Model\CardProcessingConfigFeaturesCardNotPresentInstallment
     */
    public function getInstallment()
    {
        return $this->container['installment'];
    }

    /**
     * Sets installment
     * @param \CyberSource\Model\CardProcessingConfigFeaturesCardNotPresentInstallment $installment
     * @return $this
     */
    public function setInstallment($installment)
    {
        $this->container['installment'] = $installment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


