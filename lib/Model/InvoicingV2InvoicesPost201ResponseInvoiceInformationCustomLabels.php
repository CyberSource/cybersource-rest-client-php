<?php
/**
 * InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'invoicingV2InvoicesPost201Response_invoiceInformation_customLabels';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'key' => 'string',
        'value' => 'string',
        'hidden' => 'bool',
        'hiddenForInvoice' => 'bool',
        'hiddenForItem' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'key' => null,
        'value' => null,
        'hidden' => null,
        'hiddenForInvoice' => null,
        'hiddenForItem' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'value' => 'value',
        'hidden' => 'hidden',
        'hiddenForInvoice' => 'hiddenForInvoice',
        'hiddenForItem' => 'hiddenForItem'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'value' => 'setValue',
        'hidden' => 'setHidden',
        'hiddenForInvoice' => 'setHiddenForInvoice',
        'hiddenForItem' => 'setHiddenForItem'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'value' => 'getValue',
        'hidden' => 'getHidden',
        'hiddenForInvoice' => 'getHiddenForInvoice',
        'hiddenForItem' => 'getHiddenForItem'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : false;
        $this->container['hiddenForInvoice'] = isset($data['hiddenForInvoice']) ? $data['hiddenForInvoice'] : false;
        $this->container['hiddenForItem'] = isset($data['hiddenForItem']) ? $data['hiddenForItem'] : false;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets key
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     * @param string $key The invoice field key. Possible values:   - billTo   - invoiceNumber   - customerId   - companyName   - description   - shipping   - partialPayment   - discount   - tax
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets value
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param string $value The new (overridden) field name
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets hidden
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     * @param bool $hidden Hides the specified field. This field is applicable for keys:   - customerId   - companyName   - description   - shipping   - partialPayment
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets hiddenForInvoice
     * @return bool
     */
    public function getHiddenForInvoice()
    {
        return $this->container['hiddenForInvoice'];
    }

    /**
     * Sets hiddenForInvoice
     * @param bool $hiddenForInvoice Hides the field at invoice level. This field is applicable for keys:   - discount   - tax
     * @return $this
     */
    public function setHiddenForInvoice($hiddenForInvoice)
    {
        $this->container['hiddenForInvoice'] = $hiddenForInvoice;

        return $this;
    }

    /**
     * Gets hiddenForItem
     * @return bool
     */
    public function getHiddenForItem()
    {
        return $this->container['hiddenForItem'];
    }

    /**
     * Sets hiddenForItem
     * @param bool $hiddenForItem Hides the field at invoice item level. This field is applicable for keys:   - discount   - tax
     * @return $this
     */
    public function setHiddenForItem($hiddenForItem)
    {
        $this->container['hiddenForItem'] = $hiddenForItem;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


