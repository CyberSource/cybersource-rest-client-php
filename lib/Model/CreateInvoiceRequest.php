<?php
/**
 * CreateInvoiceRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * CreateInvoiceRequest Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateInvoiceRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'createInvoiceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clientReferenceInformation' => '\CyberSource\Model\Invoicingv2invoicesClientReferenceInformation',
        'customerInformation' => '\CyberSource\Model\Invoicingv2invoicesCustomerInformation',
        'processingInformation' => '\CyberSource\Model\Invoicingv2invoicesProcessingInformation',
        'invoiceInformation' => '\CyberSource\Model\Invoicingv2invoicesInvoiceInformation',
        'orderInformation' => '\CyberSource\Model\Invoicingv2invoicesOrderInformation',
        'merchantDefinedFieldValues' => '\CyberSource\Model\Invoicingv2invoicesMerchantDefinedFieldValues[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clientReferenceInformation' => null,
        'customerInformation' => null,
        'processingInformation' => null,
        'invoiceInformation' => null,
        'orderInformation' => null,
        'merchantDefinedFieldValues' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'clientReferenceInformation' => 'clientReferenceInformation',
        'customerInformation' => 'customerInformation',
        'processingInformation' => 'processingInformation',
        'invoiceInformation' => 'invoiceInformation',
        'orderInformation' => 'orderInformation',
        'merchantDefinedFieldValues' => 'merchantDefinedFieldValues'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'clientReferenceInformation' => 'setClientReferenceInformation',
        'customerInformation' => 'setCustomerInformation',
        'processingInformation' => 'setProcessingInformation',
        'invoiceInformation' => 'setInvoiceInformation',
        'orderInformation' => 'setOrderInformation',
        'merchantDefinedFieldValues' => 'setMerchantDefinedFieldValues'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'clientReferenceInformation' => 'getClientReferenceInformation',
        'customerInformation' => 'getCustomerInformation',
        'processingInformation' => 'getProcessingInformation',
        'invoiceInformation' => 'getInvoiceInformation',
        'orderInformation' => 'getOrderInformation',
        'merchantDefinedFieldValues' => 'getMerchantDefinedFieldValues'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clientReferenceInformation'] = isset($data['clientReferenceInformation']) ? $data['clientReferenceInformation'] : null;
        $this->container['customerInformation'] = isset($data['customerInformation']) ? $data['customerInformation'] : null;
        $this->container['processingInformation'] = isset($data['processingInformation']) ? $data['processingInformation'] : null;
        $this->container['invoiceInformation'] = isset($data['invoiceInformation']) ? $data['invoiceInformation'] : null;
        $this->container['orderInformation'] = isset($data['orderInformation']) ? $data['orderInformation'] : null;
        $this->container['merchantDefinedFieldValues'] = isset($data['merchantDefinedFieldValues']) ? $data['merchantDefinedFieldValues'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['invoiceInformation'] === null) {
            $invalid_properties[] = "'invoiceInformation' can't be null";
        }
        if ($this->container['orderInformation'] === null) {
            $invalid_properties[] = "'orderInformation' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['invoiceInformation'] === null) {
            return false;
        }
        if ($this->container['orderInformation'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets clientReferenceInformation
     * @return \CyberSource\Model\Invoicingv2invoicesClientReferenceInformation
     */
    public function getClientReferenceInformation()
    {
        return $this->container['clientReferenceInformation'];
    }

    /**
     * Sets clientReferenceInformation
     * @param \CyberSource\Model\Invoicingv2invoicesClientReferenceInformation $clientReferenceInformation
     * @return $this
     */
    public function setClientReferenceInformation($clientReferenceInformation)
    {
        $this->container['clientReferenceInformation'] = $clientReferenceInformation;

        return $this;
    }

    /**
     * Gets customerInformation
     * @return \CyberSource\Model\Invoicingv2invoicesCustomerInformation
     */
    public function getCustomerInformation()
    {
        return $this->container['customerInformation'];
    }

    /**
     * Sets customerInformation
     * @param \CyberSource\Model\Invoicingv2invoicesCustomerInformation $customerInformation
     * @return $this
     */
    public function setCustomerInformation($customerInformation)
    {
        $this->container['customerInformation'] = $customerInformation;

        return $this;
    }

    /**
     * Gets processingInformation
     * @return \CyberSource\Model\Invoicingv2invoicesProcessingInformation
     */
    public function getProcessingInformation()
    {
        return $this->container['processingInformation'];
    }

    /**
     * Sets processingInformation
     * @param \CyberSource\Model\Invoicingv2invoicesProcessingInformation $processingInformation
     * @return $this
     */
    public function setProcessingInformation($processingInformation)
    {
        $this->container['processingInformation'] = $processingInformation;

        return $this;
    }

    /**
     * Gets invoiceInformation
     * @return \CyberSource\Model\Invoicingv2invoicesInvoiceInformation
     */
    public function getInvoiceInformation()
    {
        return $this->container['invoiceInformation'];
    }

    /**
     * Sets invoiceInformation
     * @param \CyberSource\Model\Invoicingv2invoicesInvoiceInformation $invoiceInformation
     * @return $this
     */
    public function setInvoiceInformation($invoiceInformation)
    {
        $this->container['invoiceInformation'] = $invoiceInformation;

        return $this;
    }

    /**
     * Gets orderInformation
     * @return \CyberSource\Model\Invoicingv2invoicesOrderInformation
     */
    public function getOrderInformation()
    {
        return $this->container['orderInformation'];
    }

    /**
     * Sets orderInformation
     * @param \CyberSource\Model\Invoicingv2invoicesOrderInformation $orderInformation
     * @return $this
     */
    public function setOrderInformation($orderInformation)
    {
        $this->container['orderInformation'] = $orderInformation;

        return $this;
    }

    /**
     * Gets merchantDefinedFieldValues
     * @return \CyberSource\Model\Invoicingv2invoicesMerchantDefinedFieldValues[]
     */
    public function getMerchantDefinedFieldValues()
    {
        return $this->container['merchantDefinedFieldValues'];
    }

    /**
     * Sets merchantDefinedFieldValues
     * @param \CyberSource\Model\Invoicingv2invoicesMerchantDefinedFieldValues[] $merchantDefinedFieldValues
     * @return $this
     */
    public function setMerchantDefinedFieldValues($merchantDefinedFieldValues)
    {
        $this->container['merchantDefinedFieldValues'] = $merchantDefinedFieldValues;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


