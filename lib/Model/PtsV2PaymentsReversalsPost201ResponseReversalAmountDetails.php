<?php
/**
 * PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ptsV2PaymentsReversalsPost201Response_reversalAmountDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reversedAmount' => 'string',
        'originalTransactionAmount' => 'string',
        'currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reversedAmount' => null,
        'originalTransactionAmount' => null,
        'currency' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'reversedAmount' => 'reversedAmount',
        'originalTransactionAmount' => 'originalTransactionAmount',
        'currency' => 'currency'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'reversedAmount' => 'setReversedAmount',
        'originalTransactionAmount' => 'setOriginalTransactionAmount',
        'currency' => 'setCurrency'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'reversedAmount' => 'getReversedAmount',
        'originalTransactionAmount' => 'getOriginalTransactionAmount',
        'currency' => 'getCurrency'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reversedAmount'] = isset($data['reversedAmount']) ? $data['reversedAmount'] : null;
        $this->container['originalTransactionAmount'] = isset($data['originalTransactionAmount']) ? $data['originalTransactionAmount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['reversedAmount']) && (strlen($this->container['reversedAmount']) > 15)) {
            $invalid_properties[] = "invalid value for 'reversedAmount', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['originalTransactionAmount']) && (strlen($this->container['originalTransactionAmount']) > 15)) {
            $invalid_properties[] = "invalid value for 'originalTransactionAmount', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['currency']) && (strlen($this->container['currency']) > 3)) {
            $invalid_properties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['reversedAmount']) > 15) {
            return false;
        }
        if (strlen($this->container['originalTransactionAmount']) > 15) {
            return false;
        }
        if (strlen($this->container['currency']) > 3) {
            return false;
        }
        return true;
    }


    /**
     * Gets reversedAmount
     * @return string
     */
    public function getReversedAmount()
    {
        return $this->container['reversedAmount'];
    }

    /**
     * Sets reversedAmount
     * @param string $reversedAmount Total reversed amount.  Returned by authorization reversal.
     * @return $this
     */
    public function setReversedAmount($reversedAmount)
    {
        if (!is_null($reversedAmount) && (strlen($reversedAmount) > 15)) {
            throw new \InvalidArgumentException('invalid length for $reversedAmount when calling PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails., must be smaller than or equal to 15.');
        }

        $this->container['reversedAmount'] = $reversedAmount;

        return $this;
    }

    /**
     * Gets originalTransactionAmount
     * @return string
     */
    public function getOriginalTransactionAmount()
    {
        return $this->container['originalTransactionAmount'];
    }

    /**
     * Sets originalTransactionAmount
     * @param string $originalTransactionAmount Amount of the original transaction.  Returned by authorization reversal and void.
     * @return $this
     */
    public function setOriginalTransactionAmount($originalTransactionAmount)
    {
        if (!is_null($originalTransactionAmount) && (strlen($originalTransactionAmount) > 15)) {
            throw new \InvalidArgumentException('invalid length for $originalTransactionAmount when calling PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails., must be smaller than or equal to 15.');
        }

        $this->container['originalTransactionAmount'] = $originalTransactionAmount;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     * @return $this
     */
    public function setCurrency($currency)
    {
        if (!is_null($currency) && (strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails., must be smaller than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


