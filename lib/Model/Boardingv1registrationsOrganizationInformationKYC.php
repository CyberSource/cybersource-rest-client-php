<?php
/**
 * Boardingv1registrationsOrganizationInformationKYC
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * Boardingv1registrationsOrganizationInformationKYC Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Boardingv1registrationsOrganizationInformationKYC implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'boardingv1registrations_organizationInformation_KYC';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'whenIsCustomerCharged' => 'string',
        'whenIsCustomerChargedDescription' => 'string',
        'offerSubscriptions' => 'bool',
        'monthlySubscriptionPercent' => 'float',
        'quarterlySubscriptionPercent' => 'float',
        'semiAnnualSubscriptionPercent' => 'float',
        'annualSubscriptionPercent' => 'float',
        'timeToProductDelivery' => 'string',
        'estimatedMonthlySales' => 'float',
        'averageOrderAmount' => 'float',
        'largestExpectedOrderAmount' => 'float',
        'depositBankAccount' => '\CyberSource\Model\Boardingv1registrationsOrganizationInformationKYCDepositBankAccount'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'whenIsCustomerCharged' => null,
        'whenIsCustomerChargedDescription' => null,
        'offerSubscriptions' => null,
        'monthlySubscriptionPercent' => 'decimal',
        'quarterlySubscriptionPercent' => 'decimal',
        'semiAnnualSubscriptionPercent' => 'decimal',
        'annualSubscriptionPercent' => 'decimal',
        'timeToProductDelivery' => null,
        'estimatedMonthlySales' => 'currency',
        'averageOrderAmount' => 'currency',
        'largestExpectedOrderAmount' => 'currency',
        'depositBankAccount' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'whenIsCustomerCharged' => 'whenIsCustomerCharged',
        'whenIsCustomerChargedDescription' => 'whenIsCustomerChargedDescription',
        'offerSubscriptions' => 'offerSubscriptions',
        'monthlySubscriptionPercent' => 'monthlySubscriptionPercent',
        'quarterlySubscriptionPercent' => 'quarterlySubscriptionPercent',
        'semiAnnualSubscriptionPercent' => 'semiAnnualSubscriptionPercent',
        'annualSubscriptionPercent' => 'annualSubscriptionPercent',
        'timeToProductDelivery' => 'timeToProductDelivery',
        'estimatedMonthlySales' => 'estimatedMonthlySales',
        'averageOrderAmount' => 'averageOrderAmount',
        'largestExpectedOrderAmount' => 'largestExpectedOrderAmount',
        'depositBankAccount' => 'depositBankAccount'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'whenIsCustomerCharged' => 'setWhenIsCustomerCharged',
        'whenIsCustomerChargedDescription' => 'setWhenIsCustomerChargedDescription',
        'offerSubscriptions' => 'setOfferSubscriptions',
        'monthlySubscriptionPercent' => 'setMonthlySubscriptionPercent',
        'quarterlySubscriptionPercent' => 'setQuarterlySubscriptionPercent',
        'semiAnnualSubscriptionPercent' => 'setSemiAnnualSubscriptionPercent',
        'annualSubscriptionPercent' => 'setAnnualSubscriptionPercent',
        'timeToProductDelivery' => 'setTimeToProductDelivery',
        'estimatedMonthlySales' => 'setEstimatedMonthlySales',
        'averageOrderAmount' => 'setAverageOrderAmount',
        'largestExpectedOrderAmount' => 'setLargestExpectedOrderAmount',
        'depositBankAccount' => 'setDepositBankAccount'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'whenIsCustomerCharged' => 'getWhenIsCustomerCharged',
        'whenIsCustomerChargedDescription' => 'getWhenIsCustomerChargedDescription',
        'offerSubscriptions' => 'getOfferSubscriptions',
        'monthlySubscriptionPercent' => 'getMonthlySubscriptionPercent',
        'quarterlySubscriptionPercent' => 'getQuarterlySubscriptionPercent',
        'semiAnnualSubscriptionPercent' => 'getSemiAnnualSubscriptionPercent',
        'annualSubscriptionPercent' => 'getAnnualSubscriptionPercent',
        'timeToProductDelivery' => 'getTimeToProductDelivery',
        'estimatedMonthlySales' => 'getEstimatedMonthlySales',
        'averageOrderAmount' => 'getAverageOrderAmount',
        'largestExpectedOrderAmount' => 'getLargestExpectedOrderAmount',
        'depositBankAccount' => 'getDepositBankAccount'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const WHEN_IS_CUSTOMER_CHARGED_ONETIMEBEFORE = 'ONETIMEBEFORE';
    const WHEN_IS_CUSTOMER_CHARGED_ONETIMEAFTER = 'ONETIMEAFTER';
    const WHEN_IS_CUSTOMER_CHARGED_OTHER = 'OTHER';
    const TIME_TO_PRODUCT_DELIVERY_INSTANT = 'INSTANT';
    const TIME_TO_PRODUCT_DELIVERY_UPTO2 = 'UPTO2';
    const TIME_TO_PRODUCT_DELIVERY_UPTO5 = 'UPTO5';
    const TIME_TO_PRODUCT_DELIVERY_UPTO10 = 'UPTO10';
    const TIME_TO_PRODUCT_DELIVERY_GREATERTHAN10 = 'GREATERTHAN10';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getWhenIsCustomerChargedAllowableValues()
    {
        return [
            self::WHEN_IS_CUSTOMER_CHARGED_ONETIMEBEFORE,
            self::WHEN_IS_CUSTOMER_CHARGED_ONETIMEAFTER,
            self::WHEN_IS_CUSTOMER_CHARGED_OTHER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTimeToProductDeliveryAllowableValues()
    {
        return [
            self::TIME_TO_PRODUCT_DELIVERY_INSTANT,
            self::TIME_TO_PRODUCT_DELIVERY_UPTO2,
            self::TIME_TO_PRODUCT_DELIVERY_UPTO5,
            self::TIME_TO_PRODUCT_DELIVERY_UPTO10,
            self::TIME_TO_PRODUCT_DELIVERY_GREATERTHAN10,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['whenIsCustomerCharged'] = isset($data['whenIsCustomerCharged']) ? $data['whenIsCustomerCharged'] : null;
        $this->container['whenIsCustomerChargedDescription'] = isset($data['whenIsCustomerChargedDescription']) ? $data['whenIsCustomerChargedDescription'] : null;
        $this->container['offerSubscriptions'] = isset($data['offerSubscriptions']) ? $data['offerSubscriptions'] : null;
        $this->container['monthlySubscriptionPercent'] = isset($data['monthlySubscriptionPercent']) ? $data['monthlySubscriptionPercent'] : null;
        $this->container['quarterlySubscriptionPercent'] = isset($data['quarterlySubscriptionPercent']) ? $data['quarterlySubscriptionPercent'] : null;
        $this->container['semiAnnualSubscriptionPercent'] = isset($data['semiAnnualSubscriptionPercent']) ? $data['semiAnnualSubscriptionPercent'] : null;
        $this->container['annualSubscriptionPercent'] = isset($data['annualSubscriptionPercent']) ? $data['annualSubscriptionPercent'] : null;
        $this->container['timeToProductDelivery'] = isset($data['timeToProductDelivery']) ? $data['timeToProductDelivery'] : null;
        $this->container['estimatedMonthlySales'] = isset($data['estimatedMonthlySales']) ? $data['estimatedMonthlySales'] : null;
        $this->container['averageOrderAmount'] = isset($data['averageOrderAmount']) ? $data['averageOrderAmount'] : null;
        $this->container['largestExpectedOrderAmount'] = isset($data['largestExpectedOrderAmount']) ? $data['largestExpectedOrderAmount'] : null;
        $this->container['depositBankAccount'] = isset($data['depositBankAccount']) ? $data['depositBankAccount'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['whenIsCustomerCharged'] === null) {
            $invalid_properties[] = "'whenIsCustomerCharged' can't be null";
        }
        $allowed_values = $this->getWhenIsCustomerChargedAllowableValues();
        if (!in_array($this->container['whenIsCustomerCharged'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'whenIsCustomerCharged', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['offerSubscriptions'] === null) {
            $invalid_properties[] = "'offerSubscriptions' can't be null";
        }
        if ($this->container['timeToProductDelivery'] === null) {
            $invalid_properties[] = "'timeToProductDelivery' can't be null";
        }
        $allowed_values = $this->getTimeToProductDeliveryAllowableValues();
        if (!in_array($this->container['timeToProductDelivery'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'timeToProductDelivery', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['estimatedMonthlySales'] === null) {
            $invalid_properties[] = "'estimatedMonthlySales' can't be null";
        }
        if ($this->container['averageOrderAmount'] === null) {
            $invalid_properties[] = "'averageOrderAmount' can't be null";
        }
        if ($this->container['largestExpectedOrderAmount'] === null) {
            $invalid_properties[] = "'largestExpectedOrderAmount' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['whenIsCustomerCharged'] === null) {
            return false;
        }
        $allowed_values = $this->getWhenIsCustomerChargedAllowableValues();
        if (!in_array($this->container['whenIsCustomerCharged'], $allowed_values)) {
            return false;
        }
        if ($this->container['offerSubscriptions'] === null) {
            return false;
        }
        if ($this->container['timeToProductDelivery'] === null) {
            return false;
        }
        $allowed_values = $this->getTimeToProductDeliveryAllowableValues();
        if (!in_array($this->container['timeToProductDelivery'], $allowed_values)) {
            return false;
        }
        if ($this->container['estimatedMonthlySales'] === null) {
            return false;
        }
        if ($this->container['averageOrderAmount'] === null) {
            return false;
        }
        if ($this->container['largestExpectedOrderAmount'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets whenIsCustomerCharged
     * @return string
     */
    public function getWhenIsCustomerCharged()
    {
        return $this->container['whenIsCustomerCharged'];
    }

    /**
     * Sets whenIsCustomerCharged
     * @param string $whenIsCustomerCharged
     * @return $this
     */
    public function setWhenIsCustomerCharged($whenIsCustomerCharged)
    {
        $allowed_values = $this->getWhenIsCustomerChargedAllowableValues();
        if (!in_array($whenIsCustomerCharged, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'whenIsCustomerCharged', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['whenIsCustomerCharged'] = $whenIsCustomerCharged;

        return $this;
    }

    /**
     * Gets whenIsCustomerChargedDescription
     * @return string
     */
    public function getWhenIsCustomerChargedDescription()
    {
        return $this->container['whenIsCustomerChargedDescription'];
    }

    /**
     * Sets whenIsCustomerChargedDescription
     * @param string $whenIsCustomerChargedDescription
     * @return $this
     */
    public function setWhenIsCustomerChargedDescription($whenIsCustomerChargedDescription)
    {
        $this->container['whenIsCustomerChargedDescription'] = $whenIsCustomerChargedDescription;

        return $this;
    }

    /**
     * Gets offerSubscriptions
     * @return bool
     */
    public function getOfferSubscriptions()
    {
        return $this->container['offerSubscriptions'];
    }

    /**
     * Sets offerSubscriptions
     * @param bool $offerSubscriptions
     * @return $this
     */
    public function setOfferSubscriptions($offerSubscriptions)
    {
        $this->container['offerSubscriptions'] = $offerSubscriptions;

        return $this;
    }

    /**
     * Gets monthlySubscriptionPercent
     * @return float
     */
    public function getMonthlySubscriptionPercent()
    {
        return $this->container['monthlySubscriptionPercent'];
    }

    /**
     * Sets monthlySubscriptionPercent
     * @param float $monthlySubscriptionPercent
     * @return $this
     */
    public function setMonthlySubscriptionPercent($monthlySubscriptionPercent)
    {
        $this->container['monthlySubscriptionPercent'] = $monthlySubscriptionPercent;

        return $this;
    }

    /**
     * Gets quarterlySubscriptionPercent
     * @return float
     */
    public function getQuarterlySubscriptionPercent()
    {
        return $this->container['quarterlySubscriptionPercent'];
    }

    /**
     * Sets quarterlySubscriptionPercent
     * @param float $quarterlySubscriptionPercent
     * @return $this
     */
    public function setQuarterlySubscriptionPercent($quarterlySubscriptionPercent)
    {
        $this->container['quarterlySubscriptionPercent'] = $quarterlySubscriptionPercent;

        return $this;
    }

    /**
     * Gets semiAnnualSubscriptionPercent
     * @return float
     */
    public function getSemiAnnualSubscriptionPercent()
    {
        return $this->container['semiAnnualSubscriptionPercent'];
    }

    /**
     * Sets semiAnnualSubscriptionPercent
     * @param float $semiAnnualSubscriptionPercent
     * @return $this
     */
    public function setSemiAnnualSubscriptionPercent($semiAnnualSubscriptionPercent)
    {
        $this->container['semiAnnualSubscriptionPercent'] = $semiAnnualSubscriptionPercent;

        return $this;
    }

    /**
     * Gets annualSubscriptionPercent
     * @return float
     */
    public function getAnnualSubscriptionPercent()
    {
        return $this->container['annualSubscriptionPercent'];
    }

    /**
     * Sets annualSubscriptionPercent
     * @param float $annualSubscriptionPercent
     * @return $this
     */
    public function setAnnualSubscriptionPercent($annualSubscriptionPercent)
    {
        $this->container['annualSubscriptionPercent'] = $annualSubscriptionPercent;

        return $this;
    }

    /**
     * Gets timeToProductDelivery
     * @return string
     */
    public function getTimeToProductDelivery()
    {
        return $this->container['timeToProductDelivery'];
    }

    /**
     * Sets timeToProductDelivery
     * @param string $timeToProductDelivery
     * @return $this
     */
    public function setTimeToProductDelivery($timeToProductDelivery)
    {
        $allowed_values = $this->getTimeToProductDeliveryAllowableValues();
        if (!in_array($timeToProductDelivery, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'timeToProductDelivery', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['timeToProductDelivery'] = $timeToProductDelivery;

        return $this;
    }

    /**
     * Gets estimatedMonthlySales
     * @return float
     */
    public function getEstimatedMonthlySales()
    {
        return $this->container['estimatedMonthlySales'];
    }

    /**
     * Sets estimatedMonthlySales
     * @param float $estimatedMonthlySales
     * @return $this
     */
    public function setEstimatedMonthlySales($estimatedMonthlySales)
    {
        $this->container['estimatedMonthlySales'] = $estimatedMonthlySales;

        return $this;
    }

    /**
     * Gets averageOrderAmount
     * @return float
     */
    public function getAverageOrderAmount()
    {
        return $this->container['averageOrderAmount'];
    }

    /**
     * Sets averageOrderAmount
     * @param float $averageOrderAmount
     * @return $this
     */
    public function setAverageOrderAmount($averageOrderAmount)
    {
        $this->container['averageOrderAmount'] = $averageOrderAmount;

        return $this;
    }

    /**
     * Gets largestExpectedOrderAmount
     * @return float
     */
    public function getLargestExpectedOrderAmount()
    {
        return $this->container['largestExpectedOrderAmount'];
    }

    /**
     * Sets largestExpectedOrderAmount
     * @param float $largestExpectedOrderAmount
     * @return $this
     */
    public function setLargestExpectedOrderAmount($largestExpectedOrderAmount)
    {
        $this->container['largestExpectedOrderAmount'] = $largestExpectedOrderAmount;

        return $this;
    }

    /**
     * Gets depositBankAccount
     * @return \CyberSource\Model\Boardingv1registrationsOrganizationInformationKYCDepositBankAccount
     */
    public function getDepositBankAccount()
    {
        return $this->container['depositBankAccount'];
    }

    /**
     * Sets depositBankAccount
     * @param \CyberSource\Model\Boardingv1registrationsOrganizationInformationKYCDepositBankAccount $depositBankAccount
     * @return $this
     */
    public function setDepositBankAccount($depositBankAccount)
    {
        $this->container['depositBankAccount'] = $depositBankAccount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


