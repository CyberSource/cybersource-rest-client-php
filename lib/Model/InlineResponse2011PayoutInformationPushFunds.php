<?php
/**
 * InlineResponse2011PayoutInformationPushFunds
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * InlineResponse2011PayoutInformationPushFunds Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2011PayoutInformationPushFunds implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_201_1_payoutInformation_pushFunds';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'moneyTransferFastFundsCrossBorder' => 'string',
        'moneyTransferFastFundsDomestic' => 'string',
        'moneyTransferCrossBorder' => 'string',
        'moneyTransferDomestic' => 'string',
        'nonMoneyTransferFastFundsCrossBorder' => 'string',
        'nonMoneyTransferFastFundsDomestic' => 'string',
        'nonMoneyTransferCrossBorder' => 'string',
        'nonMoneyTransferDomestic' => 'string',
        'onlineGamblingFastFundsCrossBorder' => 'string',
        'onlineGamblingFastFundsDomestic' => 'string',
        'onlineGamblingCrossBorder' => 'string',
        'onlineGamblingDomestic' => 'string',
        'domesticParticipant' => 'string',
        'crossBorderParticipant' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'moneyTransferFastFundsCrossBorder' => null,
        'moneyTransferFastFundsDomestic' => null,
        'moneyTransferCrossBorder' => null,
        'moneyTransferDomestic' => null,
        'nonMoneyTransferFastFundsCrossBorder' => null,
        'nonMoneyTransferFastFundsDomestic' => null,
        'nonMoneyTransferCrossBorder' => null,
        'nonMoneyTransferDomestic' => null,
        'onlineGamblingFastFundsCrossBorder' => null,
        'onlineGamblingFastFundsDomestic' => null,
        'onlineGamblingCrossBorder' => null,
        'onlineGamblingDomestic' => null,
        'domesticParticipant' => null,
        'crossBorderParticipant' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'moneyTransferFastFundsCrossBorder' => 'moneyTransferFastFundsCrossBorder',
        'moneyTransferFastFundsDomestic' => 'moneyTransferFastFundsDomestic',
        'moneyTransferCrossBorder' => 'moneyTransferCrossBorder',
        'moneyTransferDomestic' => 'moneyTransferDomestic',
        'nonMoneyTransferFastFundsCrossBorder' => 'nonMoneyTransferFastFundsCrossBorder',
        'nonMoneyTransferFastFundsDomestic' => 'nonMoneyTransferFastFundsDomestic',
        'nonMoneyTransferCrossBorder' => 'nonMoneyTransferCrossBorder',
        'nonMoneyTransferDomestic' => 'nonMoneyTransferDomestic',
        'onlineGamblingFastFundsCrossBorder' => 'onlineGamblingFastFundsCrossBorder',
        'onlineGamblingFastFundsDomestic' => 'onlineGamblingFastFundsDomestic',
        'onlineGamblingCrossBorder' => 'onlineGamblingCrossBorder',
        'onlineGamblingDomestic' => 'onlineGamblingDomestic',
        'domesticParticipant' => 'domesticParticipant',
        'crossBorderParticipant' => 'crossBorderParticipant'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'moneyTransferFastFundsCrossBorder' => 'setMoneyTransferFastFundsCrossBorder',
        'moneyTransferFastFundsDomestic' => 'setMoneyTransferFastFundsDomestic',
        'moneyTransferCrossBorder' => 'setMoneyTransferCrossBorder',
        'moneyTransferDomestic' => 'setMoneyTransferDomestic',
        'nonMoneyTransferFastFundsCrossBorder' => 'setNonMoneyTransferFastFundsCrossBorder',
        'nonMoneyTransferFastFundsDomestic' => 'setNonMoneyTransferFastFundsDomestic',
        'nonMoneyTransferCrossBorder' => 'setNonMoneyTransferCrossBorder',
        'nonMoneyTransferDomestic' => 'setNonMoneyTransferDomestic',
        'onlineGamblingFastFundsCrossBorder' => 'setOnlineGamblingFastFundsCrossBorder',
        'onlineGamblingFastFundsDomestic' => 'setOnlineGamblingFastFundsDomestic',
        'onlineGamblingCrossBorder' => 'setOnlineGamblingCrossBorder',
        'onlineGamblingDomestic' => 'setOnlineGamblingDomestic',
        'domesticParticipant' => 'setDomesticParticipant',
        'crossBorderParticipant' => 'setCrossBorderParticipant'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'moneyTransferFastFundsCrossBorder' => 'getMoneyTransferFastFundsCrossBorder',
        'moneyTransferFastFundsDomestic' => 'getMoneyTransferFastFundsDomestic',
        'moneyTransferCrossBorder' => 'getMoneyTransferCrossBorder',
        'moneyTransferDomestic' => 'getMoneyTransferDomestic',
        'nonMoneyTransferFastFundsCrossBorder' => 'getNonMoneyTransferFastFundsCrossBorder',
        'nonMoneyTransferFastFundsDomestic' => 'getNonMoneyTransferFastFundsDomestic',
        'nonMoneyTransferCrossBorder' => 'getNonMoneyTransferCrossBorder',
        'nonMoneyTransferDomestic' => 'getNonMoneyTransferDomestic',
        'onlineGamblingFastFundsCrossBorder' => 'getOnlineGamblingFastFundsCrossBorder',
        'onlineGamblingFastFundsDomestic' => 'getOnlineGamblingFastFundsDomestic',
        'onlineGamblingCrossBorder' => 'getOnlineGamblingCrossBorder',
        'onlineGamblingDomestic' => 'getOnlineGamblingDomestic',
        'domesticParticipant' => 'getDomesticParticipant',
        'crossBorderParticipant' => 'getCrossBorderParticipant'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['moneyTransferFastFundsCrossBorder'] = isset($data['moneyTransferFastFundsCrossBorder']) ? $data['moneyTransferFastFundsCrossBorder'] : null;
        $this->container['moneyTransferFastFundsDomestic'] = isset($data['moneyTransferFastFundsDomestic']) ? $data['moneyTransferFastFundsDomestic'] : null;
        $this->container['moneyTransferCrossBorder'] = isset($data['moneyTransferCrossBorder']) ? $data['moneyTransferCrossBorder'] : null;
        $this->container['moneyTransferDomestic'] = isset($data['moneyTransferDomestic']) ? $data['moneyTransferDomestic'] : null;
        $this->container['nonMoneyTransferFastFundsCrossBorder'] = isset($data['nonMoneyTransferFastFundsCrossBorder']) ? $data['nonMoneyTransferFastFundsCrossBorder'] : null;
        $this->container['nonMoneyTransferFastFundsDomestic'] = isset($data['nonMoneyTransferFastFundsDomestic']) ? $data['nonMoneyTransferFastFundsDomestic'] : null;
        $this->container['nonMoneyTransferCrossBorder'] = isset($data['nonMoneyTransferCrossBorder']) ? $data['nonMoneyTransferCrossBorder'] : null;
        $this->container['nonMoneyTransferDomestic'] = isset($data['nonMoneyTransferDomestic']) ? $data['nonMoneyTransferDomestic'] : null;
        $this->container['onlineGamblingFastFundsCrossBorder'] = isset($data['onlineGamblingFastFundsCrossBorder']) ? $data['onlineGamblingFastFundsCrossBorder'] : null;
        $this->container['onlineGamblingFastFundsDomestic'] = isset($data['onlineGamblingFastFundsDomestic']) ? $data['onlineGamblingFastFundsDomestic'] : null;
        $this->container['onlineGamblingCrossBorder'] = isset($data['onlineGamblingCrossBorder']) ? $data['onlineGamblingCrossBorder'] : null;
        $this->container['onlineGamblingDomestic'] = isset($data['onlineGamblingDomestic']) ? $data['onlineGamblingDomestic'] : null;
        $this->container['domesticParticipant'] = isset($data['domesticParticipant']) ? $data['domesticParticipant'] : null;
        $this->container['crossBorderParticipant'] = isset($data['crossBorderParticipant']) ? $data['crossBorderParticipant'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets moneyTransferFastFundsCrossBorder
     * @return string
     */
    public function getMoneyTransferFastFundsCrossBorder()
    {
        return $this->container['moneyTransferFastFundsCrossBorder'];
    }

    /**
     * Sets moneyTransferFastFundsCrossBorder
     * @param string $moneyTransferFastFundsCrossBorder This field indicates if cross-border money transfer OCTs (fast push funds) are allowed. Possible values:   - `Y`   - `N`
     * @return $this
     */
    public function setMoneyTransferFastFundsCrossBorder($moneyTransferFastFundsCrossBorder)
    {
        $this->container['moneyTransferFastFundsCrossBorder'] = $moneyTransferFastFundsCrossBorder;

        return $this;
    }

    /**
     * Gets moneyTransferFastFundsDomestic
     * @return string
     */
    public function getMoneyTransferFastFundsDomestic()
    {
        return $this->container['moneyTransferFastFundsDomestic'];
    }

    /**
     * Sets moneyTransferFastFundsDomestic
     * @param string $moneyTransferFastFundsDomestic This field indicates if domestic money transfer OCTs (fast push funds) are allowed. Possible values:   - `Y`   - `N`
     * @return $this
     */
    public function setMoneyTransferFastFundsDomestic($moneyTransferFastFundsDomestic)
    {
        $this->container['moneyTransferFastFundsDomestic'] = $moneyTransferFastFundsDomestic;

        return $this;
    }

    /**
     * Gets moneyTransferCrossBorder
     * @return string
     */
    public function getMoneyTransferCrossBorder()
    {
        return $this->container['moneyTransferCrossBorder'];
    }

    /**
     * Sets moneyTransferCrossBorder
     * @param string $moneyTransferCrossBorder This field indicates if cross-border money transfer OCTs (push funds) are allowed. Possible values:   - `Y`   - `N`
     * @return $this
     */
    public function setMoneyTransferCrossBorder($moneyTransferCrossBorder)
    {
        $this->container['moneyTransferCrossBorder'] = $moneyTransferCrossBorder;

        return $this;
    }

    /**
     * Gets moneyTransferDomestic
     * @return string
     */
    public function getMoneyTransferDomestic()
    {
        return $this->container['moneyTransferDomestic'];
    }

    /**
     * Sets moneyTransferDomestic
     * @param string $moneyTransferDomestic This field indicates if domestic money transfer OCTs (push funds) are allowed. Possible values:   - `Y`   - `N`
     * @return $this
     */
    public function setMoneyTransferDomestic($moneyTransferDomestic)
    {
        $this->container['moneyTransferDomestic'] = $moneyTransferDomestic;

        return $this;
    }

    /**
     * Gets nonMoneyTransferFastFundsCrossBorder
     * @return string
     */
    public function getNonMoneyTransferFastFundsCrossBorder()
    {
        return $this->container['nonMoneyTransferFastFundsCrossBorder'];
    }

    /**
     * Sets nonMoneyTransferFastFundsCrossBorder
     * @param string $nonMoneyTransferFastFundsCrossBorder This field indicates if cross-border non-money transfer OCTs (fast push funds) are allowed. Possible values:   - `Y`   - `N`
     * @return $this
     */
    public function setNonMoneyTransferFastFundsCrossBorder($nonMoneyTransferFastFundsCrossBorder)
    {
        $this->container['nonMoneyTransferFastFundsCrossBorder'] = $nonMoneyTransferFastFundsCrossBorder;

        return $this;
    }

    /**
     * Gets nonMoneyTransferFastFundsDomestic
     * @return string
     */
    public function getNonMoneyTransferFastFundsDomestic()
    {
        return $this->container['nonMoneyTransferFastFundsDomestic'];
    }

    /**
     * Sets nonMoneyTransferFastFundsDomestic
     * @param string $nonMoneyTransferFastFundsDomestic This field indicates if domestic non-money transfer OCTs (fast push funds) are allowed. Possible values:   - `Y`   - `N`
     * @return $this
     */
    public function setNonMoneyTransferFastFundsDomestic($nonMoneyTransferFastFundsDomestic)
    {
        $this->container['nonMoneyTransferFastFundsDomestic'] = $nonMoneyTransferFastFundsDomestic;

        return $this;
    }

    /**
     * Gets nonMoneyTransferCrossBorder
     * @return string
     */
    public function getNonMoneyTransferCrossBorder()
    {
        return $this->container['nonMoneyTransferCrossBorder'];
    }

    /**
     * Sets nonMoneyTransferCrossBorder
     * @param string $nonMoneyTransferCrossBorder This field indicates if cross-border non-money transfer OCTs (push funds) are allowed. Possible values:   - `Y`   - `N`
     * @return $this
     */
    public function setNonMoneyTransferCrossBorder($nonMoneyTransferCrossBorder)
    {
        $this->container['nonMoneyTransferCrossBorder'] = $nonMoneyTransferCrossBorder;

        return $this;
    }

    /**
     * Gets nonMoneyTransferDomestic
     * @return string
     */
    public function getNonMoneyTransferDomestic()
    {
        return $this->container['nonMoneyTransferDomestic'];
    }

    /**
     * Sets nonMoneyTransferDomestic
     * @param string $nonMoneyTransferDomestic This field indicates if domestic non-money transfer OCTs (push funds) are allowed. Possible values:   - `Y`   - `N`
     * @return $this
     */
    public function setNonMoneyTransferDomestic($nonMoneyTransferDomestic)
    {
        $this->container['nonMoneyTransferDomestic'] = $nonMoneyTransferDomestic;

        return $this;
    }

    /**
     * Gets onlineGamblingFastFundsCrossBorder
     * @return string
     */
    public function getOnlineGamblingFastFundsCrossBorder()
    {
        return $this->container['onlineGamblingFastFundsCrossBorder'];
    }

    /**
     * Sets onlineGamblingFastFundsCrossBorder
     * @param string $onlineGamblingFastFundsCrossBorder This field indicates if cross-border gambling OCTs (fast push funds) are allowed. Possible values:   - `Y`   - `N`
     * @return $this
     */
    public function setOnlineGamblingFastFundsCrossBorder($onlineGamblingFastFundsCrossBorder)
    {
        $this->container['onlineGamblingFastFundsCrossBorder'] = $onlineGamblingFastFundsCrossBorder;

        return $this;
    }

    /**
     * Gets onlineGamblingFastFundsDomestic
     * @return string
     */
    public function getOnlineGamblingFastFundsDomestic()
    {
        return $this->container['onlineGamblingFastFundsDomestic'];
    }

    /**
     * Sets onlineGamblingFastFundsDomestic
     * @param string $onlineGamblingFastFundsDomestic This field indicates if domestic gambling OCTs (fast push funds) are allowed. Possible values:   - `Y`   - `N`
     * @return $this
     */
    public function setOnlineGamblingFastFundsDomestic($onlineGamblingFastFundsDomestic)
    {
        $this->container['onlineGamblingFastFundsDomestic'] = $onlineGamblingFastFundsDomestic;

        return $this;
    }

    /**
     * Gets onlineGamblingCrossBorder
     * @return string
     */
    public function getOnlineGamblingCrossBorder()
    {
        return $this->container['onlineGamblingCrossBorder'];
    }

    /**
     * Sets onlineGamblingCrossBorder
     * @param string $onlineGamblingCrossBorder This field indicates if cross-border gambling OCTs (push funds) are allowed. Possible values:   - `Y`   - `N`
     * @return $this
     */
    public function setOnlineGamblingCrossBorder($onlineGamblingCrossBorder)
    {
        $this->container['onlineGamblingCrossBorder'] = $onlineGamblingCrossBorder;

        return $this;
    }

    /**
     * Gets onlineGamblingDomestic
     * @return string
     */
    public function getOnlineGamblingDomestic()
    {
        return $this->container['onlineGamblingDomestic'];
    }

    /**
     * Sets onlineGamblingDomestic
     * @param string $onlineGamblingDomestic This field indicates if domestic gambling OCTs (push funds) are allowed. Possible values:   - `Y`   - `N`
     * @return $this
     */
    public function setOnlineGamblingDomestic($onlineGamblingDomestic)
    {
        $this->container['onlineGamblingDomestic'] = $onlineGamblingDomestic;

        return $this;
    }

    /**
     * Gets domesticParticipant
     * @return string
     */
    public function getDomesticParticipant()
    {
        return $this->container['domesticParticipant'];
    }

    /**
     * Sets domesticParticipant
     * @param string $domesticParticipant This field indicates if domestic OCTs (push funds) are allowed. Note: Supported only in US for domestic transactions involving Push Payments Gateway Service(PPGS). Possible values:   - `true`   - `false`
     * @return $this
     */
    public function setDomesticParticipant($domesticParticipant)
    {
        $this->container['domesticParticipant'] = $domesticParticipant;

        return $this;
    }

    /**
     * Gets crossBorderParticipant
     * @return string
     */
    public function getCrossBorderParticipant()
    {
        return $this->container['crossBorderParticipant'];
    }

    /**
     * Sets crossBorderParticipant
     * @param string $crossBorderParticipant This field indicates if cross-border OCTs (push funds) are allowed. Note: Supported only in US for cross-border transactions involving Push Payments Gateway Service(PPGS). Possible values:   - `true`   - `false`
     * @return $this
     */
    public function setCrossBorderParticipant($crossBorderParticipant)
    {
        $this->container['crossBorderParticipant'] = $crossBorderParticipant;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


