<?php
/**
 * Vasv2taxTaxInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * Vasv2taxTaxInformation Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Vasv2taxTaxInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'vasv2tax_taxInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reportingDate' => 'string',
        'dateOverrideReason' => 'string',
        'nexus' => 'string[]',
        'noNexus' => 'string[]',
        'showTaxPerLineItem' => 'string',
        'commitIndicator' => 'bool',
        'refundIndicator' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reportingDate' => null,
        'dateOverrideReason' => null,
        'nexus' => null,
        'noNexus' => null,
        'showTaxPerLineItem' => null,
        'commitIndicator' => null,
        'refundIndicator' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'reportingDate' => 'reportingDate',
        'dateOverrideReason' => 'dateOverrideReason',
        'nexus' => 'nexus',
        'noNexus' => 'noNexus',
        'showTaxPerLineItem' => 'showTaxPerLineItem',
        'commitIndicator' => 'commitIndicator',
        'refundIndicator' => 'refundIndicator'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'reportingDate' => 'setReportingDate',
        'dateOverrideReason' => 'setDateOverrideReason',
        'nexus' => 'setNexus',
        'noNexus' => 'setNoNexus',
        'showTaxPerLineItem' => 'setShowTaxPerLineItem',
        'commitIndicator' => 'setCommitIndicator',
        'refundIndicator' => 'setRefundIndicator'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'reportingDate' => 'getReportingDate',
        'dateOverrideReason' => 'getDateOverrideReason',
        'nexus' => 'getNexus',
        'noNexus' => 'getNoNexus',
        'showTaxPerLineItem' => 'getShowTaxPerLineItem',
        'commitIndicator' => 'getCommitIndicator',
        'refundIndicator' => 'getRefundIndicator'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reportingDate'] = isset($data['reportingDate']) ? $data['reportingDate'] : null;
        $this->container['dateOverrideReason'] = isset($data['dateOverrideReason']) ? $data['dateOverrideReason'] : null;
        $this->container['nexus'] = isset($data['nexus']) ? $data['nexus'] : null;
        $this->container['noNexus'] = isset($data['noNexus']) ? $data['noNexus'] : null;
        $this->container['showTaxPerLineItem'] = isset($data['showTaxPerLineItem']) ? $data['showTaxPerLineItem'] : null;
        $this->container['commitIndicator'] = isset($data['commitIndicator']) ? $data['commitIndicator'] : null;
        $this->container['refundIndicator'] = isset($data['refundIndicator']) ? $data['refundIndicator'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['reportingDate']) && (strlen($this->container['reportingDate']) > 8)) {
            $invalid_properties[] = "invalid value for 'reportingDate', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['dateOverrideReason']) && (strlen($this->container['dateOverrideReason']) > 50)) {
            $invalid_properties[] = "invalid value for 'dateOverrideReason', the character length must be smaller than or equal to 50.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['reportingDate']) > 8) {
            return false;
        }
        if (strlen($this->container['dateOverrideReason']) > 50) {
            return false;
        }
        return true;
    }


    /**
     * Gets reportingDate
     * @return string
     */
    public function getReportingDate()
    {
        return $this->container['reportingDate'];
    }

    /**
     * Sets reportingDate
     * @param string $reportingDate Reporting date of transaction. Format: YYYYMMDD. Defaults to current date if not specified. Also the default tax calculation date unless a different date is specified in `orderInformation.invoiceDetails.invoiceDate`.  Optional for U.S., Canadian, international tax, and value added taxes.
     * @return $this
     */
    public function setReportingDate($reportingDate)
    {
        if (!is_null($reportingDate) && (strlen($reportingDate) > 8)) {
            throw new \InvalidArgumentException('invalid length for $reportingDate when calling Vasv2taxTaxInformation., must be smaller than or equal to 8.');
        }

        $this->container['reportingDate'] = $reportingDate;

        return $this;
    }

    /**
     * Gets dateOverrideReason
     * @return string
     */
    public function getDateOverrideReason()
    {
        return $this->container['dateOverrideReason'];
    }

    /**
     * Sets dateOverrideReason
     * @param string $dateOverrideReason If a past or future date is specified in `orderInformation.invoiceDetails.invoiceDate`, then provide the reason for that for audit purposes. Typical reasons include: 'Return', 'Layaway', 'Imported'.  Optional for U.S., Canadian, international tax, and value added taxes.
     * @return $this
     */
    public function setDateOverrideReason($dateOverrideReason)
    {
        if (!is_null($dateOverrideReason) && (strlen($dateOverrideReason) > 50)) {
            throw new \InvalidArgumentException('invalid length for $dateOverrideReason when calling Vasv2taxTaxInformation., must be smaller than or equal to 50.');
        }

        $this->container['dateOverrideReason'] = $dateOverrideReason;

        return $this;
    }

    /**
     * Gets nexus
     * @return string[]
     */
    public function getNexus()
    {
        return $this->container['nexus'];
    }

    /**
     * Sets nexus
     * @param string[] $nexus Comma-separated list of states or provinces in which merchandise is taxable. Note merchandise may be still be non-taxable or tax exempt depending on the product taxability. Indicate the type of product you are selling in the product code field for product-level taxability rules to be applied. Do not use both the `taxInformation.nexus` and `taxInformation.noNexus` fields in your request. If you do not include this field in a tax calculation service request, the tax system makes its calculations as if you have nexus in every US state or Canadian province. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  If you indicate you do not have nexus in the destination state, jurisdiction level fields are left blank in the Tax Detail Report.  Optional field for U.S. and Canadian taxes only. Either this field or `taxInformation.noNexus` is required if you do not have nexus in every state or province.  Not applicable for international and value added taxes.
     * @return $this
     */
    public function setNexus($nexus)
    {
        $this->container['nexus'] = $nexus;

        return $this;
    }

    /**
     * Gets noNexus
     * @return string[]
     */
    public function getNoNexus()
    {
        return $this->container['noNexus'];
    }

    /**
     * Sets noNexus
     * @param string[] $noNexus Comma-separated list of states or provinces where you do not have nexus. Check with a tax advisor to determine where your business has nexus. Do not use both the `taxInformation.nexus` and `taxInformation.noNexus` fields in your request. If you do not include this field in a tax calculation service request, the tax system makes its calculations as if you have nexus in every US state or Canadian province. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  If you indicate you do not have nexus in the destination state, jurisdiction level fields are left blank in the Tax Detail Report.  Optional field for U.S. and Canadian taxes only. Either this field or `taxInformation.nexus` is required if you do not have nexus in every state or province.  Not applicable for international and value added taxes.
     * @return $this
     */
    public function setNoNexus($noNexus)
    {
        $this->container['noNexus'] = $noNexus;

        return $this;
    }

    /**
     * Gets showTaxPerLineItem
     * @return string
     */
    public function getShowTaxPerLineItem()
    {
        return $this->container['showTaxPerLineItem'];
    }

    /**
     * Sets showTaxPerLineItem
     * @param string $showTaxPerLineItem Whether or not to display tax amounts for each line item. This field can contain one of the following values: - `Yes` - Display tax amounts for each line item - `No` (default) - Do not display tax amounts for each line item  Optional for U.S., Canadian, international tax, and value added taxes.
     * @return $this
     */
    public function setShowTaxPerLineItem($showTaxPerLineItem)
    {
        $this->container['showTaxPerLineItem'] = $showTaxPerLineItem;

        return $this;
    }

    /**
     * Gets commitIndicator
     * @return bool
     */
    public function getCommitIndicator()
    {
        return $this->container['commitIndicator'];
    }

    /**
     * Sets commitIndicator
     * @param bool $commitIndicator Indicates whether this is a committed tax transaction. For a committed tax transaction, the status in the Tax Detail Report is “Committed.” For an uncommitted tax transaction, the status in the Tax Detail Report is “Uncommitted.” Possible values: - `true`: This is a committed tax transaction. - `false` (default): This is not a committed tax transaction.  A committed tax request is a tax service request that sets the status field in the Tax Detail Report to committed. The committed status indicates that the amount calculated by the tax service is included in the amount of a capture or credit.  Use a void service request to cancels a committed tax request or a committed refund tax request. The void transaction is included as a separate entry in the Tax Detail Report. The value of the status field is cancelled. The value of the link ID is the request ID of the committed tax request or refund tax request that was voided. You can use the value of the link ID to reconcile your orders.  Optional for U.S., Canadian, international tax, and value added taxes.
     * @return $this
     */
    public function setCommitIndicator($commitIndicator)
    {
        $this->container['commitIndicator'] = $commitIndicator;

        return $this;
    }

    /**
     * Gets refundIndicator
     * @return bool
     */
    public function getRefundIndicator()
    {
        return $this->container['refundIndicator'];
    }

    /**
     * Sets refundIndicator
     * @param bool $refundIndicator Indicates whether this is a refund tax transaction. For a refund tax transaction, amounts in the Tax Detail Report will be negative. Possible values: - `true`: This is a refund tax transaction. - `false` (default): This is not a refund tax transaction.  A refund tax request is a tax service request that sets the transaction type field in the Tax Detail Report to refunded and makes the reported amount negative. Tax amounts are returned as positive amounts in reply messages, but they are saved in reports as negative amounts which enables the reporting software to accurately calculate the aggregate amounts.  Optional for U.S., Canadian, international tax, and value added taxes.
     * @return $this
     */
    public function setRefundIndicator($refundIndicator)
    {
        $this->container['refundIndicator'] = $refundIndicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


