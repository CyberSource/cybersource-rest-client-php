<?php
/**
 * Ptsv2intentsProcessingInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * Ptsv2intentsProcessingInformation Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Ptsv2intentsProcessingInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ptsv2intents_processingInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'processingInstruction' => 'string',
        'authorizationOptions' => '\CyberSource\Model\Ptsv2intentsProcessingInformationAuthorizationOptions',
        'actionList' => 'string[]',
        'highRiskTransactionFlag' => 'string',
        'transactionRetry' => 'string',
        'lastOneHrTransactionCount' => 'string',
        'lastOneDayTransactionCount' => 'string',
        'lastThreeMonthsTxnCount' => 'string',
        'totalTransactionCount' => 'string',
        'pinVerification' => 'string',
        'faceIdVerification' => 'string',
        'userPassedVerification' => 'string',
        'ipAddress' => 'string',
        'transactionDate' => 'string',
        'tangible' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'processingInstruction' => null,
        'authorizationOptions' => null,
        'actionList' => null,
        'highRiskTransactionFlag' => null,
        'transactionRetry' => null,
        'lastOneHrTransactionCount' => null,
        'lastOneDayTransactionCount' => null,
        'lastThreeMonthsTxnCount' => null,
        'totalTransactionCount' => null,
        'pinVerification' => null,
        'faceIdVerification' => null,
        'userPassedVerification' => null,
        'ipAddress' => null,
        'transactionDate' => null,
        'tangible' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'processingInstruction' => 'processingInstruction',
        'authorizationOptions' => 'authorizationOptions',
        'actionList' => 'actionList',
        'highRiskTransactionFlag' => 'highRiskTransactionFlag',
        'transactionRetry' => 'transactionRetry',
        'lastOneHrTransactionCount' => 'lastOneHrTransactionCount',
        'lastOneDayTransactionCount' => 'lastOneDayTransactionCount',
        'lastThreeMonthsTxnCount' => 'lastThreeMonthsTxnCount',
        'totalTransactionCount' => 'totalTransactionCount',
        'pinVerification' => 'pinVerification',
        'faceIdVerification' => 'faceIdVerification',
        'userPassedVerification' => 'userPassedVerification',
        'ipAddress' => 'ipAddress',
        'transactionDate' => 'transactionDate',
        'tangible' => 'tangible'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'processingInstruction' => 'setProcessingInstruction',
        'authorizationOptions' => 'setAuthorizationOptions',
        'actionList' => 'setActionList',
        'highRiskTransactionFlag' => 'setHighRiskTransactionFlag',
        'transactionRetry' => 'setTransactionRetry',
        'lastOneHrTransactionCount' => 'setLastOneHrTransactionCount',
        'lastOneDayTransactionCount' => 'setLastOneDayTransactionCount',
        'lastThreeMonthsTxnCount' => 'setLastThreeMonthsTxnCount',
        'totalTransactionCount' => 'setTotalTransactionCount',
        'pinVerification' => 'setPinVerification',
        'faceIdVerification' => 'setFaceIdVerification',
        'userPassedVerification' => 'setUserPassedVerification',
        'ipAddress' => 'setIpAddress',
        'transactionDate' => 'setTransactionDate',
        'tangible' => 'setTangible'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'processingInstruction' => 'getProcessingInstruction',
        'authorizationOptions' => 'getAuthorizationOptions',
        'actionList' => 'getActionList',
        'highRiskTransactionFlag' => 'getHighRiskTransactionFlag',
        'transactionRetry' => 'getTransactionRetry',
        'lastOneHrTransactionCount' => 'getLastOneHrTransactionCount',
        'lastOneDayTransactionCount' => 'getLastOneDayTransactionCount',
        'lastThreeMonthsTxnCount' => 'getLastThreeMonthsTxnCount',
        'totalTransactionCount' => 'getTotalTransactionCount',
        'pinVerification' => 'getPinVerification',
        'faceIdVerification' => 'getFaceIdVerification',
        'userPassedVerification' => 'getUserPassedVerification',
        'ipAddress' => 'getIpAddress',
        'transactionDate' => 'getTransactionDate',
        'tangible' => 'getTangible'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['processingInstruction'] = isset($data['processingInstruction']) ? $data['processingInstruction'] : null;
        $this->container['authorizationOptions'] = isset($data['authorizationOptions']) ? $data['authorizationOptions'] : null;
        $this->container['actionList'] = isset($data['actionList']) ? $data['actionList'] : null;
        $this->container['highRiskTransactionFlag'] = isset($data['highRiskTransactionFlag']) ? $data['highRiskTransactionFlag'] : null;
        $this->container['transactionRetry'] = isset($data['transactionRetry']) ? $data['transactionRetry'] : null;
        $this->container['lastOneHrTransactionCount'] = isset($data['lastOneHrTransactionCount']) ? $data['lastOneHrTransactionCount'] : null;
        $this->container['lastOneDayTransactionCount'] = isset($data['lastOneDayTransactionCount']) ? $data['lastOneDayTransactionCount'] : null;
        $this->container['lastThreeMonthsTxnCount'] = isset($data['lastThreeMonthsTxnCount']) ? $data['lastThreeMonthsTxnCount'] : null;
        $this->container['totalTransactionCount'] = isset($data['totalTransactionCount']) ? $data['totalTransactionCount'] : null;
        $this->container['pinVerification'] = isset($data['pinVerification']) ? $data['pinVerification'] : null;
        $this->container['faceIdVerification'] = isset($data['faceIdVerification']) ? $data['faceIdVerification'] : null;
        $this->container['userPassedVerification'] = isset($data['userPassedVerification']) ? $data['userPassedVerification'] : null;
        $this->container['ipAddress'] = isset($data['ipAddress']) ? $data['ipAddress'] : null;
        $this->container['transactionDate'] = isset($data['transactionDate']) ? $data['transactionDate'] : null;
        $this->container['tangible'] = isset($data['tangible']) ? $data['tangible'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets processingInstruction
     * @return string
     */
    public function getProcessingInstruction()
    {
        return $this->container['processingInstruction'];
    }

    /**
     * Sets processingInstruction
     * @param string $processingInstruction The instruction to process an order. - default value: 'NO_INSTRUCTION' - 'ORDER_SAVED_EXPLICITLY'
     * @return $this
     */
    public function setProcessingInstruction($processingInstruction)
    {
        $this->container['processingInstruction'] = $processingInstruction;

        return $this;
    }

    /**
     * Gets authorizationOptions
     * @return \CyberSource\Model\Ptsv2intentsProcessingInformationAuthorizationOptions
     */
    public function getAuthorizationOptions()
    {
        return $this->container['authorizationOptions'];
    }

    /**
     * Sets authorizationOptions
     * @param \CyberSource\Model\Ptsv2intentsProcessingInformationAuthorizationOptions $authorizationOptions
     * @return $this
     */
    public function setAuthorizationOptions($authorizationOptions)
    {
        $this->container['authorizationOptions'] = $authorizationOptions;

        return $this;
    }

    /**
     * Gets actionList
     * @return string[]
     */
    public function getActionList()
    {
        return $this->container['actionList'];
    }

    /**
     * Sets actionList
     * @param string[] $actionList Array of actions (one or more) to be included in the order to invoke bundled services along with order. Possible values: - `AP_ORDER`: Use this when Alternative Payment Order service is requested.
     * @return $this
     */
    public function setActionList($actionList)
    {
        $this->container['actionList'] = $actionList;

        return $this;
    }

    /**
     * Gets highRiskTransactionFlag
     * @return string
     */
    public function getHighRiskTransactionFlag()
    {
        return $this->container['highRiskTransactionFlag'];
    }

    /**
     * Sets highRiskTransactionFlag
     * @param string $highRiskTransactionFlag Indicates if the transaction is flagged as high risk.
     * @return $this
     */
    public function setHighRiskTransactionFlag($highRiskTransactionFlag)
    {
        $this->container['highRiskTransactionFlag'] = $highRiskTransactionFlag;

        return $this;
    }

    /**
     * Gets transactionRetry
     * @return string
     */
    public function getTransactionRetry()
    {
        return $this->container['transactionRetry'];
    }

    /**
     * Sets transactionRetry
     * @param string $transactionRetry Indicates if the transaction is a retry.
     * @return $this
     */
    public function setTransactionRetry($transactionRetry)
    {
        $this->container['transactionRetry'] = $transactionRetry;

        return $this;
    }

    /**
     * Gets lastOneHrTransactionCount
     * @return string
     */
    public function getLastOneHrTransactionCount()
    {
        return $this->container['lastOneHrTransactionCount'];
    }

    /**
     * Sets lastOneHrTransactionCount
     * @param string $lastOneHrTransactionCount The number of transactions in the last one hour.
     * @return $this
     */
    public function setLastOneHrTransactionCount($lastOneHrTransactionCount)
    {
        $this->container['lastOneHrTransactionCount'] = $lastOneHrTransactionCount;

        return $this;
    }

    /**
     * Gets lastOneDayTransactionCount
     * @return string
     */
    public function getLastOneDayTransactionCount()
    {
        return $this->container['lastOneDayTransactionCount'];
    }

    /**
     * Sets lastOneDayTransactionCount
     * @param string $lastOneDayTransactionCount The number of transactions in the last one day.
     * @return $this
     */
    public function setLastOneDayTransactionCount($lastOneDayTransactionCount)
    {
        $this->container['lastOneDayTransactionCount'] = $lastOneDayTransactionCount;

        return $this;
    }

    /**
     * Gets lastThreeMonthsTxnCount
     * @return string
     */
    public function getLastThreeMonthsTxnCount()
    {
        return $this->container['lastThreeMonthsTxnCount'];
    }

    /**
     * Sets lastThreeMonthsTxnCount
     * @param string $lastThreeMonthsTxnCount The number of transactions in the last three months.
     * @return $this
     */
    public function setLastThreeMonthsTxnCount($lastThreeMonthsTxnCount)
    {
        $this->container['lastThreeMonthsTxnCount'] = $lastThreeMonthsTxnCount;

        return $this;
    }

    /**
     * Gets totalTransactionCount
     * @return string
     */
    public function getTotalTransactionCount()
    {
        return $this->container['totalTransactionCount'];
    }

    /**
     * Sets totalTransactionCount
     * @param string $totalTransactionCount The total number of transactions.
     * @return $this
     */
    public function setTotalTransactionCount($totalTransactionCount)
    {
        $this->container['totalTransactionCount'] = $totalTransactionCount;

        return $this;
    }

    /**
     * Gets pinVerification
     * @return string
     */
    public function getPinVerification()
    {
        return $this->container['pinVerification'];
    }

    /**
     * Sets pinVerification
     * @param string $pinVerification Indicates if PIN verification is required.
     * @return $this
     */
    public function setPinVerification($pinVerification)
    {
        $this->container['pinVerification'] = $pinVerification;

        return $this;
    }

    /**
     * Gets faceIdVerification
     * @return string
     */
    public function getFaceIdVerification()
    {
        return $this->container['faceIdVerification'];
    }

    /**
     * Sets faceIdVerification
     * @param string $faceIdVerification Indicates if face ID verification is required.
     * @return $this
     */
    public function setFaceIdVerification($faceIdVerification)
    {
        $this->container['faceIdVerification'] = $faceIdVerification;

        return $this;
    }

    /**
     * Gets userPassedVerification
     * @return string
     */
    public function getUserPassedVerification()
    {
        return $this->container['userPassedVerification'];
    }

    /**
     * Sets userPassedVerification
     * @param string $userPassedVerification Indicates if the user passed verification.
     * @return $this
     */
    public function setUserPassedVerification($userPassedVerification)
    {
        $this->container['userPassedVerification'] = $userPassedVerification;

        return $this;
    }

    /**
     * Gets ipAddress
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ipAddress'];
    }

    /**
     * Sets ipAddress
     * @param string $ipAddress The IP address of the user.
     * @return $this
     */
    public function setIpAddress($ipAddress)
    {
        $this->container['ipAddress'] = $ipAddress;

        return $this;
    }

    /**
     * Gets transactionDate
     * @return string
     */
    public function getTransactionDate()
    {
        return $this->container['transactionDate'];
    }

    /**
     * Sets transactionDate
     * @param string $transactionDate The date of the transaction.
     * @return $this
     */
    public function setTransactionDate($transactionDate)
    {
        $this->container['transactionDate'] = $transactionDate;

        return $this;
    }

    /**
     * Gets tangible
     * @return string
     */
    public function getTangible()
    {
        return $this->container['tangible'];
    }

    /**
     * Sets tangible
     * @param string $tangible Indicates if the transaction involves tangible goods.
     * @return $this
     */
    public function setTangible($tangible)
    {
        $this->container['tangible'] = $tangible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


