<?php
/**
 * VasV2PaymentsPost201ResponseOrderInformationJurisdiction
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * VasV2PaymentsPost201ResponseOrderInformationJurisdiction Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VasV2PaymentsPost201ResponseOrderInformationJurisdiction implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'vasV2PaymentsPost201Response_orderInformation_jurisdiction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'taxName' => 'string',
        'taxAmount' => 'string',
        'taxable' => 'string',
        'name' => 'string',
        'code' => 'string',
        'rate' => 'string',
        'region' => 'string',
        'country' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'taxName' => null,
        'taxAmount' => null,
        'taxable' => null,
        'name' => null,
        'code' => null,
        'rate' => null,
        'region' => null,
        'country' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'taxName' => 'taxName',
        'taxAmount' => 'taxAmount',
        'taxable' => 'taxable',
        'name' => 'name',
        'code' => 'code',
        'rate' => 'rate',
        'region' => 'region',
        'country' => 'country'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'taxName' => 'setTaxName',
        'taxAmount' => 'setTaxAmount',
        'taxable' => 'setTaxable',
        'name' => 'setName',
        'code' => 'setCode',
        'rate' => 'setRate',
        'region' => 'setRegion',
        'country' => 'setCountry'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'taxName' => 'getTaxName',
        'taxAmount' => 'getTaxAmount',
        'taxable' => 'getTaxable',
        'name' => 'getName',
        'code' => 'getCode',
        'rate' => 'getRate',
        'region' => 'getRegion',
        'country' => 'getCountry'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['taxName'] = isset($data['taxName']) ? $data['taxName'] : null;
        $this->container['taxAmount'] = isset($data['taxAmount']) ? $data['taxAmount'] : null;
        $this->container['taxable'] = isset($data['taxable']) ? $data['taxable'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['type']) && (strlen($this->container['type']) > 15)) {
            $invalid_properties[] = "invalid value for 'type', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['taxName']) && (strlen($this->container['taxName']) > 15)) {
            $invalid_properties[] = "invalid value for 'taxName', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['taxAmount']) && (strlen($this->container['taxAmount']) > 15)) {
            $invalid_properties[] = "invalid value for 'taxAmount', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['taxable']) && (strlen($this->container['taxable']) > 15)) {
            $invalid_properties[] = "invalid value for 'taxable', the character length must be smaller than or equal to 15.";
        }

        // if (!is_null($this->container['name']) && (strlen($this->container['name']) > 15)) {
            // $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 15.";
        // }

        if (!is_null($this->container['code']) && (strlen($this->container['code']) > 15)) {
            $invalid_properties[] = "invalid value for 'code', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['rate']) && (strlen($this->container['rate']) > 15)) {
            $invalid_properties[] = "invalid value for 'rate', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['region']) && (strlen($this->container['region']) > 15)) {
            $invalid_properties[] = "invalid value for 'region', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['country']) && (strlen($this->container['country']) > 15)) {
            $invalid_properties[] = "invalid value for 'country', the character length must be smaller than or equal to 15.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['type']) > 15) {
            return false;
        }
        if (strlen($this->container['taxName']) > 15) {
            return false;
        }
        if (strlen($this->container['taxAmount']) > 15) {
            return false;
        }
        if (strlen($this->container['taxable']) > 15) {
            return false;
        }
        // if (strlen($this->container['name']) > 15) {
            // return false;
        // }
        if (strlen($this->container['code']) > 15) {
            return false;
        }
        if (strlen($this->container['rate']) > 15) {
            return false;
        }
        if (strlen($this->container['region']) > 15) {
            return false;
        }
        if (strlen($this->container['country']) > 15) {
            return false;
        }
        return true;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Type of tax jurisdiction for the item. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.  Possible values: - `city` - `county` - `state` - `country` - `special`
     * @return $this
     */
    public function setType($type)
    {
        if (!is_null($type) && (strlen($type) > 15)) {
            throw new \InvalidArgumentException('invalid length for $type when calling VasV2PaymentsPost201ResponseOrderInformationJurisdiction., must be smaller than or equal to 15.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets taxName
     * @return string
     */
    public function getTaxName()
    {
        return $this->container['taxName'];
    }

    /**
     * Sets taxName
     * @param string $taxName Name of the jurisdiction tax for the item. For example, CA State Tax. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     * @return $this
     */
    public function setTaxName($taxName)
    {
        if (!is_null($taxName) && (strlen($taxName) > 15)) {
            throw new \InvalidArgumentException('invalid length for $taxName when calling VasV2PaymentsPost201ResponseOrderInformationJurisdiction., must be smaller than or equal to 15.');
        }

        $this->container['taxName'] = $taxName;

        return $this;
    }

    /**
     * Gets taxAmount
     * @return string
     */
    public function getTaxAmount()
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     * @param string $taxAmount Jurisdiction tax amount for the item. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     * @return $this
     */
    public function setTaxAmount($taxAmount)
    {
        if (!is_null($taxAmount) && (strlen($taxAmount) > 15)) {
            throw new \InvalidArgumentException('invalid length for $taxAmount when calling VasV2PaymentsPost201ResponseOrderInformationJurisdiction., must be smaller than or equal to 15.');
        }

        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets taxable
     * @return string
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     * @param string $taxable Jurisdiction taxable amount for the item, not including product level exemptions. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     * @return $this
     */
    public function setTaxable($taxable)
    {
        if (!is_null($taxable) && (strlen($taxable) > 15)) {
            throw new \InvalidArgumentException('invalid length for $taxable when calling VasV2PaymentsPost201ResponseOrderInformationJurisdiction., must be smaller than or equal to 15.');
        }

        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Free-text description of the jurisdiction for the item. For example, San Mateo County. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     * @return $this
     */
    public function setName($name)
    {
        // if (!is_null($name) && (strlen($name) > 15)) {
            // throw new \InvalidArgumentException('invalid length for $name when calling VasV2PaymentsPost201ResponseOrderInformationJurisdiction., must be smaller than or equal to 15.');
        // }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code Jurisdiction code assigned by the tax provider. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     * @return $this
     */
    public function setCode($code)
    {
        if (!is_null($code) && (strlen($code) > 15)) {
            throw new \InvalidArgumentException('invalid length for $code when calling VasV2PaymentsPost201ResponseOrderInformationJurisdiction., must be smaller than or equal to 15.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets rate
     * @return string
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     * @param string $rate Jurisdiction tax rate for the item. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     * @return $this
     */
    public function setRate($rate)
    {
        if (!is_null($rate) && (strlen($rate) > 15)) {
            throw new \InvalidArgumentException('invalid length for $rate when calling VasV2PaymentsPost201ResponseOrderInformationJurisdiction., must be smaller than or equal to 15.');
        }

        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets region
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     * @param string $region Free-text description of the jurisdiction region for the item. For example, CA (California State) or GB (Great Britain). Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     * @return $this
     */
    public function setRegion($region)
    {
        if (!is_null($region) && (strlen($region) > 15)) {
            throw new \InvalidArgumentException('invalid length for $region when calling VasV2PaymentsPost201ResponseOrderInformationJurisdiction., must be smaller than or equal to 15.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country Tax jurisdiction country for the item. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     * @return $this
     */
    public function setCountry($country)
    {
        if (!is_null($country) && (strlen($country) > 15)) {
            throw new \InvalidArgumentException('invalid length for $country when calling VasV2PaymentsPost201ResponseOrderInformationJurisdiction., must be smaller than or equal to 15.');
        }

        $this->container['country'] = $country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


