<?php
/**
 * Ptsv2paymentsTravelInformationAutoRentalTaxDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * Ptsv2paymentsTravelInformationAutoRentalTaxDetails Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Ptsv2paymentsTravelInformationAutoRentalTaxDetails implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ptsv2payments_travelInformation_autoRental_taxDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount' => 'string',
        'rate' => 'string',
        'applied' => 'bool',
        'exemptionCode' => 'string',
        'taxType' => 'string',
        'taxSummary' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount' => null,
        'rate' => null,
        'applied' => null,
        'exemptionCode' => null,
        'taxType' => null,
        'taxSummary' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'rate' => 'rate',
        'applied' => 'applied',
        'exemptionCode' => 'exemptionCode',
        'taxType' => 'taxType',
        'taxSummary' => 'taxSummary'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'rate' => 'setRate',
        'applied' => 'setApplied',
        'exemptionCode' => 'setExemptionCode',
        'taxType' => 'setTaxType',
        'taxSummary' => 'setTaxSummary'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'rate' => 'getRate',
        'applied' => 'getApplied',
        'exemptionCode' => 'getExemptionCode',
        'taxType' => 'getTaxType',
        'taxSummary' => 'getTaxSummary'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['applied'] = isset($data['applied']) ? $data['applied'] : null;
        $this->container['exemptionCode'] = isset($data['exemptionCode']) ? $data['exemptionCode'] : null;
        $this->container['taxType'] = isset($data['taxType']) ? $data['taxType'] : null;
        $this->container['taxSummary'] = isset($data['taxSummary']) ? $data['taxSummary'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['amount']) && (strlen($this->container['amount']) > 13)) {
            $invalid_properties[] = "invalid value for 'amount', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['rate']) && (strlen($this->container['rate']) > 6)) {
            $invalid_properties[] = "invalid value for 'rate', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['exemptionCode']) && (strlen($this->container['exemptionCode']) > 1)) {
            $invalid_properties[] = "invalid value for 'exemptionCode', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['taxType']) && (strlen($this->container['taxType']) > 10)) {
            $invalid_properties[] = "invalid value for 'taxType', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['taxSummary']) && (strlen($this->container['taxSummary']) > 12)) {
            $invalid_properties[] = "invalid value for 'taxSummary', the character length must be smaller than or equal to 12.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['amount']) > 13) {
            return false;
        }
        if (strlen($this->container['rate']) > 6) {
            return false;
        }
        if (strlen($this->container['exemptionCode']) > 1) {
            return false;
        }
        if (strlen($this->container['taxType']) > 10) {
            return false;
        }
        if (strlen($this->container['taxSummary']) > 12) {
            return false;
        }
        return true;
    }


    /**
     * Gets amount
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param string $amount Indicates the amount of tax based on the `type` field as described in the table below:
     * @return $this
     */
    public function setAmount($amount)
    {
        if (!is_null($amount) && (strlen($amount) > 13)) {
            throw new \InvalidArgumentException('invalid length for $amount when calling Ptsv2paymentsTravelInformationAutoRentalTaxDetails., must be smaller than or equal to 13.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets rate
     * @return string
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     * @param string $rate Rate of VAT or other tax for the order.  Example 0.040 (=4%)  Valid range: 0.01 to 0.99 (1% to 99%, with only whole percentage values accepted; values with additional decimal places will be truncated)
     * @return $this
     */
    public function setRate($rate)
    {
        if (!is_null($rate) && (strlen($rate) > 6)) {
            throw new \InvalidArgumentException('invalid length for $rate when calling Ptsv2paymentsTravelInformationAutoRentalTaxDetails., must be smaller than or equal to 6.');
        }

        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets applied
     * @return bool
     */
    public function getApplied()
    {
        return $this->container['applied'];
    }

    /**
     * Sets applied
     * @param bool $applied Flag that indicates whether the tax amount (`travelInformation.autoRental.taxDetails.amount`) is included in the request.  Possible values: - `false`: tax amount is not included in the request. - `true`:  tax amount is included in the request.
     * @return $this
     */
    public function setApplied($applied)
    {
        $this->container['applied'] = $applied;

        return $this;
    }

    /**
     * Gets exemptionCode
     * @return string
     */
    public function getExemptionCode()
    {
        return $this->container['exemptionCode'];
    }

    /**
     * Sets exemptionCode
     * @param string $exemptionCode Status code for exemption from sales and use tax. This field is a pass-through, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor.
     * @return $this
     */
    public function setExemptionCode($exemptionCode)
    {
        if (!is_null($exemptionCode) && (strlen($exemptionCode) > 1)) {
            throw new \InvalidArgumentException('invalid length for $exemptionCode when calling Ptsv2paymentsTravelInformationAutoRentalTaxDetails., must be smaller than or equal to 1.');
        }

        $this->container['exemptionCode'] = $exemptionCode;

        return $this;
    }

    /**
     * Gets taxType
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['taxType'];
    }

    /**
     * Sets taxType
     * @param string $taxType Different taxes the rental agency applies to the rental agreement such as tourist tax, airport tax, or rental tax.
     * @return $this
     */
    public function setTaxType($taxType)
    {
        if (!is_null($taxType) && (strlen($taxType) > 10)) {
            throw new \InvalidArgumentException('invalid length for $taxType when calling Ptsv2paymentsTravelInformationAutoRentalTaxDetails., must be smaller than or equal to 10.');
        }

        $this->container['taxType'] = $taxType;

        return $this;
    }

    /**
     * Gets taxSummary
     * @return string
     */
    public function getTaxSummary()
    {
        return $this->container['taxSummary'];
    }

    /**
     * Sets taxSummary
     * @param string $taxSummary Summary of all tax types
     * @return $this
     */
    public function setTaxSummary($taxSummary)
    {
        if (!is_null($taxSummary) && (strlen($taxSummary) > 12)) {
            throw new \InvalidArgumentException('invalid length for $taxSummary when calling Ptsv2paymentsTravelInformationAutoRentalTaxDetails., must be smaller than or equal to 12.');
        }

        $this->container['taxSummary'] = $taxSummary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


