<?php
/**
 * FlexV1TokensPost200Response
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * FlexV1TokensPost200Response Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FlexV1TokensPost200Response implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'flexV1TokensPost200Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'keyId' => 'string',
        'token' => 'string',
        'maskedPan' => 'string',
        'cardType' => 'string',
        'timestamp' => 'int',
        'signedFields' => 'string',
        'signature' => 'string',
        'discoverableServices' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'keyId' => null,
        'token' => null,
        'maskedPan' => null,
        'cardType' => null,
        'timestamp' => 'int64',
        'signedFields' => null,
        'signature' => null,
        'discoverableServices' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'keyId' => 'keyId',
        'token' => 'token',
        'maskedPan' => 'maskedPan',
        'cardType' => 'cardType',
        'timestamp' => 'timestamp',
        'signedFields' => 'signedFields',
        'signature' => 'signature',
        'discoverableServices' => 'discoverableServices'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'keyId' => 'setKeyId',
        'token' => 'setToken',
        'maskedPan' => 'setMaskedPan',
        'cardType' => 'setCardType',
        'timestamp' => 'setTimestamp',
        'signedFields' => 'setSignedFields',
        'signature' => 'setSignature',
        'discoverableServices' => 'setDiscoverableServices'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'keyId' => 'getKeyId',
        'token' => 'getToken',
        'maskedPan' => 'getMaskedPan',
        'cardType' => 'getCardType',
        'timestamp' => 'getTimestamp',
        'signedFields' => 'getSignedFields',
        'signature' => 'getSignature',
        'discoverableServices' => 'getDiscoverableServices'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['keyId'] = isset($data['keyId']) ? $data['keyId'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['maskedPan'] = isset($data['maskedPan']) ? $data['maskedPan'] : null;
        $this->container['cardType'] = isset($data['cardType']) ? $data['cardType'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['signedFields'] = isset($data['signedFields']) ? $data['signedFields'] : null;
        $this->container['signature'] = isset($data['signature']) ? $data['signature'] : null;
        $this->container['discoverableServices'] = isset($data['discoverableServices']) ? $data['discoverableServices'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets keyId
     * @return string
     */
    public function getKeyId()
    {
        return $this->container['keyId'];
    }

    /**
     * Sets keyId
     * @param string $keyId The Key ID.
     * @return $this
     */
    public function setKeyId($keyId)
    {
        $this->container['keyId'] = $keyId;

        return $this;
    }

    /**
     * Gets token
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     * @param string $token The generated token. The token replaces card data and is used as the Subscription ID in the CyberSource Simple Order API or SCMP API.
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets maskedPan
     * @return string
     */
    public function getMaskedPan()
    {
        return $this->container['maskedPan'];
    }

    /**
     * Sets maskedPan
     * @param string $maskedPan The masked card number displaying the first 6 digits and the last 4 digits.
     * @return $this
     */
    public function setMaskedPan($maskedPan)
    {
        $this->container['maskedPan'] = $maskedPan;

        return $this;
    }

    /**
     * Gets cardType
     * @return string
     */
    public function getCardType()
    {
        return $this->container['cardType'];
    }

    /**
     * Sets cardType
     * @param string $cardType The card type.
     * @return $this
     */
    public function setCardType($cardType)
    {
        $this->container['cardType'] = $cardType;

        return $this;
    }

    /**
     * Gets timestamp
     * @return int
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     * @param int $timestamp The UTC date and time in milliseconds at which the signature was generated.
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets signedFields
     * @return string
     */
    public function getSignedFields()
    {
        return $this->container['signedFields'];
    }

    /**
     * Sets signedFields
     * @param string $signedFields Indicates which fields from the response make up the data that is used when verifying the response signature. See the [sample code] (https://github.com/CyberSource/cybersource-flex-samples/blob/master/java/spring-boot/src/main/java/com/cybersource/flex/application/CheckoutController.java) on how to verify the signature.
     * @return $this
     */
    public function setSignedFields($signedFields)
    {
        $this->container['signedFields'] = $signedFields;

        return $this;
    }

    /**
     * Gets signature
     * @return string
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     * @param string $signature Flex-generated digital signature. To ensure the values have not been tampered with while passing through the client, verify this server-side using the public key generated from the /keys resource.
     * @return $this
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets discoverableServices
     * @return map[string,object]
     */
    public function getDiscoverableServices()
    {
        return $this->container['discoverableServices'];
    }

    /**
     * Sets discoverableServices
     * @param map[string,object] $discoverableServices
     * @return $this
     */
    public function setDiscoverableServices($discoverableServices)
    {
        $this->container['discoverableServices'] = $discoverableServices;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


