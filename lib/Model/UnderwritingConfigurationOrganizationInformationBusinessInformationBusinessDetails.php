<?php
/**
 * UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'underwritingConfiguration_organizationInformation_businessInformation_businessDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customerType' => 'string',
        'percentageSplitByB2B' => 'float',
        'percentageSplitByB2C' => 'float',
        'interactionTypes' => 'string',
        'percentageSplitByF2F' => 'float',
        'percentageSplitByCNP' => 'float',
        'whenIsCustomerCharged' => 'string',
        'whenIsCustomerChargedDescription' => 'string',
        'offerSubscriptions' => 'bool',
        'monthlySubscriptionPercent' => 'float',
        'quarterlySubscriptionPercent' => 'float',
        'semiannualSubscriptionPercent' => 'float',
        'annualSubscriptionPercent' => 'float',
        'currencyType' => 'string',
        'estimatedMonthlySales' => 'float',
        'averageOrderAmount' => 'float',
        'largestExpectedOrderAmount' => 'float',
        'primaryAccountUsage' => 'string',
        'sourceOfFunds' => 'string',
        'receiveMoney3rdParties' => 'bool',
        'receiveTransactionFrequency' => 'string',
        'estimatedMonthlySpend' => 'string',
        'countryTransactions' => 'string[]',
        'currenciesIn' => 'string[]',
        'currenciesOut' => 'string[]',
        'productServicesSubscription' => '\CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customerType' => null,
        'percentageSplitByB2B' => null,
        'percentageSplitByB2C' => null,
        'interactionTypes' => null,
        'percentageSplitByF2F' => null,
        'percentageSplitByCNP' => null,
        'whenIsCustomerCharged' => null,
        'whenIsCustomerChargedDescription' => null,
        'offerSubscriptions' => null,
        'monthlySubscriptionPercent' => null,
        'quarterlySubscriptionPercent' => null,
        'semiannualSubscriptionPercent' => null,
        'annualSubscriptionPercent' => null,
        'currencyType' => null,
        'estimatedMonthlySales' => null,
        'averageOrderAmount' => null,
        'largestExpectedOrderAmount' => null,
        'primaryAccountUsage' => null,
        'sourceOfFunds' => null,
        'receiveMoney3rdParties' => null,
        'receiveTransactionFrequency' => null,
        'estimatedMonthlySpend' => null,
        'countryTransactions' => null,
        'currenciesIn' => null,
        'currenciesOut' => null,
        'productServicesSubscription' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'customerType' => 'customerType',
        'percentageSplitByB2B' => 'percentageSplitByB2B',
        'percentageSplitByB2C' => 'percentageSplitByB2C',
        'interactionTypes' => 'interactionTypes',
        'percentageSplitByF2F' => 'percentageSplitByF2F',
        'percentageSplitByCNP' => 'percentageSplitByCNP',
        'whenIsCustomerCharged' => 'whenIsCustomerCharged',
        'whenIsCustomerChargedDescription' => 'whenIsCustomerChargedDescription',
        'offerSubscriptions' => 'offerSubscriptions',
        'monthlySubscriptionPercent' => 'monthlySubscriptionPercent',
        'quarterlySubscriptionPercent' => 'quarterlySubscriptionPercent',
        'semiannualSubscriptionPercent' => 'semiannualSubscriptionPercent',
        'annualSubscriptionPercent' => 'annualSubscriptionPercent',
        'currencyType' => 'currencyType',
        'estimatedMonthlySales' => 'estimatedMonthlySales',
        'averageOrderAmount' => 'averageOrderAmount',
        'largestExpectedOrderAmount' => 'largestExpectedOrderAmount',
        'primaryAccountUsage' => 'primaryAccountUsage',
        'sourceOfFunds' => 'sourceOfFunds',
        'receiveMoney3rdParties' => 'receiveMoney3rdParties',
        'receiveTransactionFrequency' => 'receiveTransactionFrequency',
        'estimatedMonthlySpend' => 'estimatedMonthlySpend',
        'countryTransactions' => 'countryTransactions',
        'currenciesIn' => 'currenciesIn',
        'currenciesOut' => 'currenciesOut',
        'productServicesSubscription' => 'productServicesSubscription'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'customerType' => 'setCustomerType',
        'percentageSplitByB2B' => 'setPercentageSplitByB2B',
        'percentageSplitByB2C' => 'setPercentageSplitByB2C',
        'interactionTypes' => 'setInteractionTypes',
        'percentageSplitByF2F' => 'setPercentageSplitByF2F',
        'percentageSplitByCNP' => 'setPercentageSplitByCNP',
        'whenIsCustomerCharged' => 'setWhenIsCustomerCharged',
        'whenIsCustomerChargedDescription' => 'setWhenIsCustomerChargedDescription',
        'offerSubscriptions' => 'setOfferSubscriptions',
        'monthlySubscriptionPercent' => 'setMonthlySubscriptionPercent',
        'quarterlySubscriptionPercent' => 'setQuarterlySubscriptionPercent',
        'semiannualSubscriptionPercent' => 'setSemiannualSubscriptionPercent',
        'annualSubscriptionPercent' => 'setAnnualSubscriptionPercent',
        'currencyType' => 'setCurrencyType',
        'estimatedMonthlySales' => 'setEstimatedMonthlySales',
        'averageOrderAmount' => 'setAverageOrderAmount',
        'largestExpectedOrderAmount' => 'setLargestExpectedOrderAmount',
        'primaryAccountUsage' => 'setPrimaryAccountUsage',
        'sourceOfFunds' => 'setSourceOfFunds',
        'receiveMoney3rdParties' => 'setReceiveMoney3rdParties',
        'receiveTransactionFrequency' => 'setReceiveTransactionFrequency',
        'estimatedMonthlySpend' => 'setEstimatedMonthlySpend',
        'countryTransactions' => 'setCountryTransactions',
        'currenciesIn' => 'setCurrenciesIn',
        'currenciesOut' => 'setCurrenciesOut',
        'productServicesSubscription' => 'setProductServicesSubscription'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'customerType' => 'getCustomerType',
        'percentageSplitByB2B' => 'getPercentageSplitByB2B',
        'percentageSplitByB2C' => 'getPercentageSplitByB2C',
        'interactionTypes' => 'getInteractionTypes',
        'percentageSplitByF2F' => 'getPercentageSplitByF2F',
        'percentageSplitByCNP' => 'getPercentageSplitByCNP',
        'whenIsCustomerCharged' => 'getWhenIsCustomerCharged',
        'whenIsCustomerChargedDescription' => 'getWhenIsCustomerChargedDescription',
        'offerSubscriptions' => 'getOfferSubscriptions',
        'monthlySubscriptionPercent' => 'getMonthlySubscriptionPercent',
        'quarterlySubscriptionPercent' => 'getQuarterlySubscriptionPercent',
        'semiannualSubscriptionPercent' => 'getSemiannualSubscriptionPercent',
        'annualSubscriptionPercent' => 'getAnnualSubscriptionPercent',
        'currencyType' => 'getCurrencyType',
        'estimatedMonthlySales' => 'getEstimatedMonthlySales',
        'averageOrderAmount' => 'getAverageOrderAmount',
        'largestExpectedOrderAmount' => 'getLargestExpectedOrderAmount',
        'primaryAccountUsage' => 'getPrimaryAccountUsage',
        'sourceOfFunds' => 'getSourceOfFunds',
        'receiveMoney3rdParties' => 'getReceiveMoney3rdParties',
        'receiveTransactionFrequency' => 'getReceiveTransactionFrequency',
        'estimatedMonthlySpend' => 'getEstimatedMonthlySpend',
        'countryTransactions' => 'getCountryTransactions',
        'currenciesIn' => 'getCurrenciesIn',
        'currenciesOut' => 'getCurrenciesOut',
        'productServicesSubscription' => 'getProductServicesSubscription'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customerType'] = isset($data['customerType']) ? $data['customerType'] : null;
        $this->container['percentageSplitByB2B'] = isset($data['percentageSplitByB2B']) ? $data['percentageSplitByB2B'] : null;
        $this->container['percentageSplitByB2C'] = isset($data['percentageSplitByB2C']) ? $data['percentageSplitByB2C'] : null;
        $this->container['interactionTypes'] = isset($data['interactionTypes']) ? $data['interactionTypes'] : null;
        $this->container['percentageSplitByF2F'] = isset($data['percentageSplitByF2F']) ? $data['percentageSplitByF2F'] : null;
        $this->container['percentageSplitByCNP'] = isset($data['percentageSplitByCNP']) ? $data['percentageSplitByCNP'] : null;
        $this->container['whenIsCustomerCharged'] = isset($data['whenIsCustomerCharged']) ? $data['whenIsCustomerCharged'] : null;
        $this->container['whenIsCustomerChargedDescription'] = isset($data['whenIsCustomerChargedDescription']) ? $data['whenIsCustomerChargedDescription'] : null;
        $this->container['offerSubscriptions'] = isset($data['offerSubscriptions']) ? $data['offerSubscriptions'] : null;
        $this->container['monthlySubscriptionPercent'] = isset($data['monthlySubscriptionPercent']) ? $data['monthlySubscriptionPercent'] : null;
        $this->container['quarterlySubscriptionPercent'] = isset($data['quarterlySubscriptionPercent']) ? $data['quarterlySubscriptionPercent'] : null;
        $this->container['semiannualSubscriptionPercent'] = isset($data['semiannualSubscriptionPercent']) ? $data['semiannualSubscriptionPercent'] : null;
        $this->container['annualSubscriptionPercent'] = isset($data['annualSubscriptionPercent']) ? $data['annualSubscriptionPercent'] : null;
        $this->container['currencyType'] = isset($data['currencyType']) ? $data['currencyType'] : null;
        $this->container['estimatedMonthlySales'] = isset($data['estimatedMonthlySales']) ? $data['estimatedMonthlySales'] : null;
        $this->container['averageOrderAmount'] = isset($data['averageOrderAmount']) ? $data['averageOrderAmount'] : null;
        $this->container['largestExpectedOrderAmount'] = isset($data['largestExpectedOrderAmount']) ? $data['largestExpectedOrderAmount'] : null;
        $this->container['primaryAccountUsage'] = isset($data['primaryAccountUsage']) ? $data['primaryAccountUsage'] : null;
        $this->container['sourceOfFunds'] = isset($data['sourceOfFunds']) ? $data['sourceOfFunds'] : null;
        $this->container['receiveMoney3rdParties'] = isset($data['receiveMoney3rdParties']) ? $data['receiveMoney3rdParties'] : null;
        $this->container['receiveTransactionFrequency'] = isset($data['receiveTransactionFrequency']) ? $data['receiveTransactionFrequency'] : null;
        $this->container['estimatedMonthlySpend'] = isset($data['estimatedMonthlySpend']) ? $data['estimatedMonthlySpend'] : null;
        $this->container['countryTransactions'] = isset($data['countryTransactions']) ? $data['countryTransactions'] : null;
        $this->container['currenciesIn'] = isset($data['currenciesIn']) ? $data['currenciesIn'] : null;
        $this->container['currenciesOut'] = isset($data['currenciesOut']) ? $data['currenciesOut'] : null;
        $this->container['productServicesSubscription'] = isset($data['productServicesSubscription']) ? $data['productServicesSubscription'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['interactionTypes'] === null) {
            $invalid_properties[] = "'interactionTypes' can't be null";
        }
        if ($this->container['percentageSplitByF2F'] === null) {
            $invalid_properties[] = "'percentageSplitByF2F' can't be null";
        }
        if ($this->container['percentageSplitByCNP'] === null) {
            $invalid_properties[] = "'percentageSplitByCNP' can't be null";
        }
        if ($this->container['whenIsCustomerCharged'] === null) {
            $invalid_properties[] = "'whenIsCustomerCharged' can't be null";
        }
        if ($this->container['offerSubscriptions'] === null) {
            $invalid_properties[] = "'offerSubscriptions' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['interactionTypes'] === null) {
            return false;
        }
        if ($this->container['percentageSplitByF2F'] === null) {
            return false;
        }
        if ($this->container['percentageSplitByCNP'] === null) {
            return false;
        }
        if ($this->container['whenIsCustomerCharged'] === null) {
            return false;
        }
        if ($this->container['offerSubscriptions'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets customerType
     * @return string
     */
    public function getCustomerType()
    {
        return $this->container['customerType'];
    }

    /**
     * Sets customerType
     * @param string $customerType Who is the business interacting with? Business to Business, Business to Consumer, Both  Possible values: - B2B - B2C - Both
     * @return $this
     */
    public function setCustomerType($customerType)
    {
        $this->container['customerType'] = $customerType;

        return $this;
    }

    /**
     * Gets percentageSplitByB2B
     * @return float
     */
    public function getPercentageSplitByB2B()
    {
        return $this->container['percentageSplitByB2B'];
    }

    /**
     * Sets percentageSplitByB2B
     * @param float $percentageSplitByB2B % Split
     * @return $this
     */
    public function setPercentageSplitByB2B($percentageSplitByB2B)
    {
        $this->container['percentageSplitByB2B'] = $percentageSplitByB2B;

        return $this;
    }

    /**
     * Gets percentageSplitByB2C
     * @return float
     */
    public function getPercentageSplitByB2C()
    {
        return $this->container['percentageSplitByB2C'];
    }

    /**
     * Sets percentageSplitByB2C
     * @param float $percentageSplitByB2C % Split
     * @return $this
     */
    public function setPercentageSplitByB2C($percentageSplitByB2C)
    {
        $this->container['percentageSplitByB2C'] = $percentageSplitByB2C;

        return $this;
    }

    /**
     * Gets interactionTypes
     * @return string
     */
    public function getInteractionTypes()
    {
        return $this->container['interactionTypes'];
    }

    /**
     * Sets interactionTypes
     * @param string $interactionTypes Merchant Facing: Face to Face, Card Not Present, Both  Possible values: - F2F - CNP - Both
     * @return $this
     */
    public function setInteractionTypes($interactionTypes)
    {
        $this->container['interactionTypes'] = $interactionTypes;

        return $this;
    }

    /**
     * Gets percentageSplitByF2F
     * @return float
     */
    public function getPercentageSplitByF2F()
    {
        return $this->container['percentageSplitByF2F'];
    }

    /**
     * Sets percentageSplitByF2F
     * @param float $percentageSplitByF2F % Split
     * @return $this
     */
    public function setPercentageSplitByF2F($percentageSplitByF2F)
    {
        $this->container['percentageSplitByF2F'] = $percentageSplitByF2F;

        return $this;
    }

    /**
     * Gets percentageSplitByCNP
     * @return float
     */
    public function getPercentageSplitByCNP()
    {
        return $this->container['percentageSplitByCNP'];
    }

    /**
     * Sets percentageSplitByCNP
     * @param float $percentageSplitByCNP % Split
     * @return $this
     */
    public function setPercentageSplitByCNP($percentageSplitByCNP)
    {
        $this->container['percentageSplitByCNP'] = $percentageSplitByCNP;

        return $this;
    }

    /**
     * Gets whenIsCustomerCharged
     * @return string
     */
    public function getWhenIsCustomerCharged()
    {
        return $this->container['whenIsCustomerCharged'];
    }

    /**
     * Sets whenIsCustomerCharged
     * @param string $whenIsCustomerCharged When is the customer charged?  Possible values: - OneTimeBeforeServiceDelivery - OneTimeAfterServiceDelivery - Other
     * @return $this
     */
    public function setWhenIsCustomerCharged($whenIsCustomerCharged)
    {
        $this->container['whenIsCustomerCharged'] = $whenIsCustomerCharged;

        return $this;
    }

    /**
     * Gets whenIsCustomerChargedDescription
     * @return string
     */
    public function getWhenIsCustomerChargedDescription()
    {
        return $this->container['whenIsCustomerChargedDescription'];
    }

    /**
     * Sets whenIsCustomerChargedDescription
     * @param string $whenIsCustomerChargedDescription
     * @return $this
     */
    public function setWhenIsCustomerChargedDescription($whenIsCustomerChargedDescription)
    {
        $this->container['whenIsCustomerChargedDescription'] = $whenIsCustomerChargedDescription;

        return $this;
    }

    /**
     * Gets offerSubscriptions
     * @return bool
     */
    public function getOfferSubscriptions()
    {
        return $this->container['offerSubscriptions'];
    }

    /**
     * Sets offerSubscriptions
     * @param bool $offerSubscriptions Does Merchant Offer Subscriptions?
     * @return $this
     */
    public function setOfferSubscriptions($offerSubscriptions)
    {
        $this->container['offerSubscriptions'] = $offerSubscriptions;

        return $this;
    }

    /**
     * Gets monthlySubscriptionPercent
     * @return float
     */
    public function getMonthlySubscriptionPercent()
    {
        return $this->container['monthlySubscriptionPercent'];
    }

    /**
     * Sets monthlySubscriptionPercent
     * @param float $monthlySubscriptionPercent % of business is monthly subscriptions
     * @return $this
     */
    public function setMonthlySubscriptionPercent($monthlySubscriptionPercent)
    {
        $this->container['monthlySubscriptionPercent'] = $monthlySubscriptionPercent;

        return $this;
    }

    /**
     * Gets quarterlySubscriptionPercent
     * @return float
     */
    public function getQuarterlySubscriptionPercent()
    {
        return $this->container['quarterlySubscriptionPercent'];
    }

    /**
     * Sets quarterlySubscriptionPercent
     * @param float $quarterlySubscriptionPercent % of business is quarterly subscriptions
     * @return $this
     */
    public function setQuarterlySubscriptionPercent($quarterlySubscriptionPercent)
    {
        $this->container['quarterlySubscriptionPercent'] = $quarterlySubscriptionPercent;

        return $this;
    }

    /**
     * Gets semiannualSubscriptionPercent
     * @return float
     */
    public function getSemiannualSubscriptionPercent()
    {
        return $this->container['semiannualSubscriptionPercent'];
    }

    /**
     * Sets semiannualSubscriptionPercent
     * @param float $semiannualSubscriptionPercent % of business is semi-annual subscriptions
     * @return $this
     */
    public function setSemiannualSubscriptionPercent($semiannualSubscriptionPercent)
    {
        $this->container['semiannualSubscriptionPercent'] = $semiannualSubscriptionPercent;

        return $this;
    }

    /**
     * Gets annualSubscriptionPercent
     * @return float
     */
    public function getAnnualSubscriptionPercent()
    {
        return $this->container['annualSubscriptionPercent'];
    }

    /**
     * Sets annualSubscriptionPercent
     * @param float $annualSubscriptionPercent % of business is annual subscriptions
     * @return $this
     */
    public function setAnnualSubscriptionPercent($annualSubscriptionPercent)
    {
        $this->container['annualSubscriptionPercent'] = $annualSubscriptionPercent;

        return $this;
    }

    /**
     * Gets currencyType
     * @return string
     */
    public function getCurrencyType()
    {
        return $this->container['currencyType'];
    }

    /**
     * Sets currencyType
     * @param string $currencyType Processing Currency. ISO 4217, 3 characters.  Possible values: - USD - CAD - EUR - GBP - CHF
     * @return $this
     */
    public function setCurrencyType($currencyType)
    {
        $this->container['currencyType'] = $currencyType;

        return $this;
    }

    /**
     * Gets estimatedMonthlySales
     * @return float
     */
    public function getEstimatedMonthlySales()
    {
        return $this->container['estimatedMonthlySales'];
    }

    /**
     * Sets estimatedMonthlySales
     * @param float $estimatedMonthlySales Merchant's estimated monthly sales
     * @return $this
     */
    public function setEstimatedMonthlySales($estimatedMonthlySales)
    {
        $this->container['estimatedMonthlySales'] = $estimatedMonthlySales;

        return $this;
    }

    /**
     * Gets averageOrderAmount
     * @return float
     */
    public function getAverageOrderAmount()
    {
        return $this->container['averageOrderAmount'];
    }

    /**
     * Sets averageOrderAmount
     * @param float $averageOrderAmount Merchant's average order amount
     * @return $this
     */
    public function setAverageOrderAmount($averageOrderAmount)
    {
        $this->container['averageOrderAmount'] = $averageOrderAmount;

        return $this;
    }

    /**
     * Gets largestExpectedOrderAmount
     * @return float
     */
    public function getLargestExpectedOrderAmount()
    {
        return $this->container['largestExpectedOrderAmount'];
    }

    /**
     * Sets largestExpectedOrderAmount
     * @param float $largestExpectedOrderAmount Merchant's largest expected order amount
     * @return $this
     */
    public function setLargestExpectedOrderAmount($largestExpectedOrderAmount)
    {
        $this->container['largestExpectedOrderAmount'] = $largestExpectedOrderAmount;

        return $this;
    }

    /**
     * Gets primaryAccountUsage
     * @return string
     */
    public function getPrimaryAccountUsage()
    {
        return $this->container['primaryAccountUsage'];
    }

    /**
     * Sets primaryAccountUsage
     * @param string $primaryAccountUsage Primary purpose of account usage  Possible values: - Paying for goods / services - Repatriating overseas earnings - Intercompany transfers - Collecting funds from clients - Liquidity / FX - Payment to an individual - Investment activity - Property purchase/sale - Other
     * @return $this
     */
    public function setPrimaryAccountUsage($primaryAccountUsage)
    {
        $this->container['primaryAccountUsage'] = $primaryAccountUsage;

        return $this;
    }

    /**
     * Gets sourceOfFunds
     * @return string
     */
    public function getSourceOfFunds()
    {
        return $this->container['sourceOfFunds'];
    }

    /**
     * Sets sourceOfFunds
     * @param string $sourceOfFunds Source of Funds  Possible values: - Business revenue - External or shareholder investment - Loan, advance or other borrowing - Donations or grants - Inter-company transfers - Proceeds of sales of assests - Other
     * @return $this
     */
    public function setSourceOfFunds($sourceOfFunds)
    {
        $this->container['sourceOfFunds'] = $sourceOfFunds;

        return $this;
    }

    /**
     * Gets receiveMoney3rdParties
     * @return bool
     */
    public function getReceiveMoney3rdParties()
    {
        return $this->container['receiveMoney3rdParties'];
    }

    /**
     * Sets receiveMoney3rdParties
     * @param bool $receiveMoney3rdParties Will you recieve money from 3rd parties into your account?
     * @return $this
     */
    public function setReceiveMoney3rdParties($receiveMoney3rdParties)
    {
        $this->container['receiveMoney3rdParties'] = $receiveMoney3rdParties;

        return $this;
    }

    /**
     * Gets receiveTransactionFrequency
     * @return string
     */
    public function getReceiveTransactionFrequency()
    {
        return $this->container['receiveTransactionFrequency'];
    }

    /**
     * Sets receiveTransactionFrequency
     * @param string $receiveTransactionFrequency Roughly how often do you expect to send or receive transactions?  Possible values: - One-off or infrequently - 1-20 per month - 20-50 per month - 50-100 per month - 100+ per month
     * @return $this
     */
    public function setReceiveTransactionFrequency($receiveTransactionFrequency)
    {
        $this->container['receiveTransactionFrequency'] = $receiveTransactionFrequency;

        return $this;
    }

    /**
     * Gets estimatedMonthlySpend
     * @return string
     */
    public function getEstimatedMonthlySpend()
    {
        return $this->container['estimatedMonthlySpend'];
    }

    /**
     * Sets estimatedMonthlySpend
     * @param string $estimatedMonthlySpend What is your estimated total monthly spend?  Possible values: - <$10,000 - $10,000 - $50,000 - $50,000 - $100,000 - $100,000 - $500,000 - $500,000+
     * @return $this
     */
    public function setEstimatedMonthlySpend($estimatedMonthlySpend)
    {
        $this->container['estimatedMonthlySpend'] = $estimatedMonthlySpend;

        return $this;
    }

    /**
     * Gets countryTransactions
     * @return string[]
     */
    public function getCountryTransactions()
    {
        return $this->container['countryTransactions'];
    }

    /**
     * Sets countryTransactions
     * @param string[] $countryTransactions
     * @return $this
     */
    public function setCountryTransactions($countryTransactions)
    {
        $this->container['countryTransactions'] = $countryTransactions;

        return $this;
    }

    /**
     * Gets currenciesIn
     * @return string[]
     */
    public function getCurrenciesIn()
    {
        return $this->container['currenciesIn'];
    }

    /**
     * Sets currenciesIn
     * @param string[] $currenciesIn
     * @return $this
     */
    public function setCurrenciesIn($currenciesIn)
    {
        $this->container['currenciesIn'] = $currenciesIn;

        return $this;
    }

    /**
     * Gets currenciesOut
     * @return string[]
     */
    public function getCurrenciesOut()
    {
        return $this->container['currenciesOut'];
    }

    /**
     * Sets currenciesOut
     * @param string[] $currenciesOut
     * @return $this
     */
    public function setCurrenciesOut($currenciesOut)
    {
        $this->container['currenciesOut'] = $currenciesOut;

        return $this;
    }

    /**
     * Gets productServicesSubscription
     * @return \CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription[]
     */
    public function getProductServicesSubscription()
    {
        return $this->container['productServicesSubscription'];
    }

    /**
     * Sets productServicesSubscription
     * @param \CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription[] $productServicesSubscription
     * @return $this
     */
    public function setProductServicesSubscription($productServicesSubscription)
    {
        $this->container['productServicesSubscription'] = $productServicesSubscription;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


