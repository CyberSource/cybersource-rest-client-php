<?php
/**
 * CardProcessingConfigFeaturesCardNotPresentProcessors
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * CardProcessingConfigFeaturesCardNotPresentProcessors Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CardProcessingConfigFeaturesCardNotPresentProcessors implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CardProcessingConfig_features_cardNotPresent_processors';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'relaxAddressVerificationSystem' => 'bool',
        'relaxAddressVerificationSystemAllowZipWithoutCountry' => 'bool',
        'relaxAddressVerificationSystemAllowExpiredCard' => 'bool',
        'enableEmsTransactionRiskScore' => 'bool',
        'prestigiousPropertyIndicator' => 'string',
        'payouts' => '\CyberSource\Model\CardProcessingConfigFeaturesCardNotPresentPayouts'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'relaxAddressVerificationSystem' => null,
        'relaxAddressVerificationSystemAllowZipWithoutCountry' => null,
        'relaxAddressVerificationSystemAllowExpiredCard' => null,
        'enableEmsTransactionRiskScore' => null,
        'prestigiousPropertyIndicator' => null,
        'payouts' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'relaxAddressVerificationSystem' => 'relaxAddressVerificationSystem',
        'relaxAddressVerificationSystemAllowZipWithoutCountry' => 'relaxAddressVerificationSystemAllowZipWithoutCountry',
        'relaxAddressVerificationSystemAllowExpiredCard' => 'relaxAddressVerificationSystemAllowExpiredCard',
        'enableEmsTransactionRiskScore' => 'enableEmsTransactionRiskScore',
        'prestigiousPropertyIndicator' => 'prestigiousPropertyIndicator',
        'payouts' => 'payouts'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'relaxAddressVerificationSystem' => 'setRelaxAddressVerificationSystem',
        'relaxAddressVerificationSystemAllowZipWithoutCountry' => 'setRelaxAddressVerificationSystemAllowZipWithoutCountry',
        'relaxAddressVerificationSystemAllowExpiredCard' => 'setRelaxAddressVerificationSystemAllowExpiredCard',
        'enableEmsTransactionRiskScore' => 'setEnableEmsTransactionRiskScore',
        'prestigiousPropertyIndicator' => 'setPrestigiousPropertyIndicator',
        'payouts' => 'setPayouts'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'relaxAddressVerificationSystem' => 'getRelaxAddressVerificationSystem',
        'relaxAddressVerificationSystemAllowZipWithoutCountry' => 'getRelaxAddressVerificationSystemAllowZipWithoutCountry',
        'relaxAddressVerificationSystemAllowExpiredCard' => 'getRelaxAddressVerificationSystemAllowExpiredCard',
        'enableEmsTransactionRiskScore' => 'getEnableEmsTransactionRiskScore',
        'prestigiousPropertyIndicator' => 'getPrestigiousPropertyIndicator',
        'payouts' => 'getPayouts'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['relaxAddressVerificationSystem'] = isset($data['relaxAddressVerificationSystem']) ? $data['relaxAddressVerificationSystem'] : null;
        $this->container['relaxAddressVerificationSystemAllowZipWithoutCountry'] = isset($data['relaxAddressVerificationSystemAllowZipWithoutCountry']) ? $data['relaxAddressVerificationSystemAllowZipWithoutCountry'] : null;
        $this->container['relaxAddressVerificationSystemAllowExpiredCard'] = isset($data['relaxAddressVerificationSystemAllowExpiredCard']) ? $data['relaxAddressVerificationSystemAllowExpiredCard'] : null;
        $this->container['enableEmsTransactionRiskScore'] = isset($data['enableEmsTransactionRiskScore']) ? $data['enableEmsTransactionRiskScore'] : null;
        $this->container['prestigiousPropertyIndicator'] = isset($data['prestigiousPropertyIndicator']) ? $data['prestigiousPropertyIndicator'] : null;
        $this->container['payouts'] = isset($data['payouts']) ? $data['payouts'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets relaxAddressVerificationSystem
     * @return bool
     */
    public function getRelaxAddressVerificationSystem()
    {
        return $this->container['relaxAddressVerificationSystem'];
    }

    /**
     * Sets relaxAddressVerificationSystem
     * @param bool $relaxAddressVerificationSystem Enables you to submit the payment transaction without one or more of the fields for the billTo or card_expiration. Applicable for Elavon Americas (elavonamericas), CB2A, Six (six), CMCIC (cmcic), GPX (gpx), GPN (gpn), VPC, Vero (vero), Fiserv (fiserv), American Express Direct (amexdirect), Chase Paymentech Salem (chasepaymentechsalem), RUPAY, FDI Global (fdiglobal) and Barclays HISO (barclayshiso) processors.  Validation details (for selected processors)...  <table> <thead><tr><th>Processor</th><th>Acceptance Type</th><th>Required</th><th>Default Value</th></tr></thead> <tr><td>Barclays HISO</td><td>cp, cnp, hybrid</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>cnp</td><td>No</td><td>No</td></tr> <tr><td>American Express Direct</td><td>cp</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>hybrid</td><td>Yes</td><td>Yes</td></tr> </table>
     * @return $this
     */
    public function setRelaxAddressVerificationSystem($relaxAddressVerificationSystem)
    {
        $this->container['relaxAddressVerificationSystem'] = $relaxAddressVerificationSystem;

        return $this;
    }

    /**
     * Gets relaxAddressVerificationSystemAllowZipWithoutCountry
     * @return bool
     */
    public function getRelaxAddressVerificationSystemAllowZipWithoutCountry()
    {
        return $this->container['relaxAddressVerificationSystemAllowZipWithoutCountry'];
    }

    /**
     * Sets relaxAddressVerificationSystemAllowZipWithoutCountry
     * @param bool $relaxAddressVerificationSystemAllowZipWithoutCountry Allows Zip code without country. Applicable for American Express Direct (amexdirect), GPX (gpx), VPC, FDI Global (fdiglobal), Elavon Americas (elavonamericas), Chase Paymentech Salem (chasepaymentechsalem), RUPAY, GPN (gpn) and Barclays HISO (barclayshiso) processors.  Validation details (for selected processors)...  <table> <thead><tr><th>Processor</th><th>Acceptance Type</th><th>Required</th><th>Default Value</th></tr></thead> <tr><td>Barclays HISO</td><td>cp, cnp, both</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>cp, hybrid</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>cnp</td><td>No</td><td>No</td></tr> </table>
     * @return $this
     */
    public function setRelaxAddressVerificationSystemAllowZipWithoutCountry($relaxAddressVerificationSystemAllowZipWithoutCountry)
    {
        $this->container['relaxAddressVerificationSystemAllowZipWithoutCountry'] = $relaxAddressVerificationSystemAllowZipWithoutCountry;

        return $this;
    }

    /**
     * Gets relaxAddressVerificationSystemAllowExpiredCard
     * @return bool
     */
    public function getRelaxAddressVerificationSystemAllowExpiredCard()
    {
        return $this->container['relaxAddressVerificationSystemAllowExpiredCard'];
    }

    /**
     * Sets relaxAddressVerificationSystemAllowExpiredCard
     * @param bool $relaxAddressVerificationSystemAllowExpiredCard Allows transactions that use an expired card. Applicable for American Express Direct (amexdirect), GPN (gpn), Barclays HISO (barclayshiso), Elavon Americas (elavonamericas), VPC, FDI Global (fdiglobal), GPX (gpx), RUPAY, Six (six), Chase Paymentech Salem (chasepaymentechsalem) and CB2A processors.  Validation details (for selected processors)...  <table> <thead><tr><th>Processor</th><th>Acceptance Type</th><th>Required</th><th>Default Value</th></tr></thead> <tr><td>Barclays HISO</td><td>cp, cnp, hybrid</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>cp, hybrid</td><td>No</td><td>Yes</td></tr> <tr><td>American Express Direct</td><td>cnp</td><td>No</td><td>No</td></tr> </table>
     * @return $this
     */
    public function setRelaxAddressVerificationSystemAllowExpiredCard($relaxAddressVerificationSystemAllowExpiredCard)
    {
        $this->container['relaxAddressVerificationSystemAllowExpiredCard'] = $relaxAddressVerificationSystemAllowExpiredCard;

        return $this;
    }

    /**
     * Gets enableEmsTransactionRiskScore
     * @return bool
     */
    public function getEnableEmsTransactionRiskScore()
    {
        return $this->container['enableEmsTransactionRiskScore'];
    }

    /**
     * Sets enableEmsTransactionRiskScore
     * @param bool $enableEmsTransactionRiskScore MasterCard Expert Monitoring Solutions (EMS) provides a predictive, behavior-based fraud score in real time during authorizations for card-not-present (CNP) transactions on cards issued in the U.S. Applicable for GPX (gpx) and VPC processors.
     * @return $this
     */
    public function setEnableEmsTransactionRiskScore($enableEmsTransactionRiskScore)
    {
        $this->container['enableEmsTransactionRiskScore'] = $enableEmsTransactionRiskScore;

        return $this;
    }

    /**
     * Gets prestigiousPropertyIndicator
     * @return string
     */
    public function getPrestigiousPropertyIndicator()
    {
        return $this->container['prestigiousPropertyIndicator'];
    }

    /**
     * Sets prestigiousPropertyIndicator
     * @param string $prestigiousPropertyIndicator Applicable for VPC processors.
     * @return $this
     */
    public function setPrestigiousPropertyIndicator($prestigiousPropertyIndicator)
    {
        $this->container['prestigiousPropertyIndicator'] = $prestigiousPropertyIndicator;

        return $this;
    }

    /**
     * Gets payouts
     * @return \CyberSource\Model\CardProcessingConfigFeaturesCardNotPresentPayouts
     */
    public function getPayouts()
    {
        return $this->container['payouts'];
    }

    /**
     * Sets payouts
     * @param \CyberSource\Model\CardProcessingConfigFeaturesCardNotPresentPayouts $payouts
     * @return $this
     */
    public function setPayouts($payouts)
    {
        $this->container['payouts'] = $payouts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


