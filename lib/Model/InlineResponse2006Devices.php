<?php
/**
 * InlineResponse2006Devices
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * InlineResponse2006Devices Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2006Devices implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_6_devices';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'readerId' => 'string',
        'serialNumber' => 'string',
        'model' => 'string',
        'make' => 'string',
        'hardwareRevision' => 'string',
        'status' => 'string',
        'statusChangeReason' => 'string',
        'merchantId' => 'string',
        'accountId' => 'string',
        'terminalCreationDate' => '\DateTime',
        'terminalUpdationDate' => '\DateTime',
        'paymentProcessorToTerminalMap' => '\CyberSource\Model\InlineResponse2006PaymentProcessorToTerminalMap'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'readerId' => null,
        'serialNumber' => null,
        'model' => null,
        'make' => null,
        'hardwareRevision' => null,
        'status' => null,
        'statusChangeReason' => null,
        'merchantId' => null,
        'accountId' => null,
        'terminalCreationDate' => 'date-time',
        'terminalUpdationDate' => 'date-time',
        'paymentProcessorToTerminalMap' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'readerId' => 'readerId',
        'serialNumber' => 'serialNumber',
        'model' => 'model',
        'make' => 'make',
        'hardwareRevision' => 'hardwareRevision',
        'status' => 'status',
        'statusChangeReason' => 'statusChangeReason',
        'merchantId' => 'merchantId',
        'accountId' => 'accountId',
        'terminalCreationDate' => 'terminalCreationDate',
        'terminalUpdationDate' => 'terminalUpdationDate',
        'paymentProcessorToTerminalMap' => 'paymentProcessorToTerminalMap'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'readerId' => 'setReaderId',
        'serialNumber' => 'setSerialNumber',
        'model' => 'setModel',
        'make' => 'setMake',
        'hardwareRevision' => 'setHardwareRevision',
        'status' => 'setStatus',
        'statusChangeReason' => 'setStatusChangeReason',
        'merchantId' => 'setMerchantId',
        'accountId' => 'setAccountId',
        'terminalCreationDate' => 'setTerminalCreationDate',
        'terminalUpdationDate' => 'setTerminalUpdationDate',
        'paymentProcessorToTerminalMap' => 'setPaymentProcessorToTerminalMap'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'readerId' => 'getReaderId',
        'serialNumber' => 'getSerialNumber',
        'model' => 'getModel',
        'make' => 'getMake',
        'hardwareRevision' => 'getHardwareRevision',
        'status' => 'getStatus',
        'statusChangeReason' => 'getStatusChangeReason',
        'merchantId' => 'getMerchantId',
        'accountId' => 'getAccountId',
        'terminalCreationDate' => 'getTerminalCreationDate',
        'terminalUpdationDate' => 'getTerminalUpdationDate',
        'paymentProcessorToTerminalMap' => 'getPaymentProcessorToTerminalMap'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['readerId'] = isset($data['readerId']) ? $data['readerId'] : null;
        $this->container['serialNumber'] = isset($data['serialNumber']) ? $data['serialNumber'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['make'] = isset($data['make']) ? $data['make'] : null;
        $this->container['hardwareRevision'] = isset($data['hardwareRevision']) ? $data['hardwareRevision'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['statusChangeReason'] = isset($data['statusChangeReason']) ? $data['statusChangeReason'] : null;
        $this->container['merchantId'] = isset($data['merchantId']) ? $data['merchantId'] : null;
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['terminalCreationDate'] = isset($data['terminalCreationDate']) ? $data['terminalCreationDate'] : null;
        $this->container['terminalUpdationDate'] = isset($data['terminalUpdationDate']) ? $data['terminalUpdationDate'] : null;
        $this->container['paymentProcessorToTerminalMap'] = isset($data['paymentProcessorToTerminalMap']) ? $data['paymentProcessorToTerminalMap'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets readerId
     * @return string
     */
    public function getReaderId()
    {
        return $this->container['readerId'];
    }

    /**
     * Sets readerId
     * @param string $readerId
     * @return $this
     */
    public function setReaderId($readerId)
    {
        $this->container['readerId'] = $readerId;

        return $this;
    }

    /**
     * Gets serialNumber
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serialNumber'];
    }

    /**
     * Sets serialNumber
     * @param string $serialNumber
     * @return $this
     */
    public function setSerialNumber($serialNumber)
    {
        $this->container['serialNumber'] = $serialNumber;

        return $this;
    }

    /**
     * Gets model
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     * @param string $model
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets make
     * @return string
     */
    public function getMake()
    {
        return $this->container['make'];
    }

    /**
     * Sets make
     * @param string $make
     * @return $this
     */
    public function setMake($make)
    {
        $this->container['make'] = $make;

        return $this;
    }

    /**
     * Gets hardwareRevision
     * @return string
     */
    public function getHardwareRevision()
    {
        return $this->container['hardwareRevision'];
    }

    /**
     * Sets hardwareRevision
     * @param string $hardwareRevision
     * @return $this
     */
    public function setHardwareRevision($hardwareRevision)
    {
        $this->container['hardwareRevision'] = $hardwareRevision;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status of the device. Possible Values:   - 'ACTIVE'   - 'INACTIVE'
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusChangeReason
     * @return string
     */
    public function getStatusChangeReason()
    {
        return $this->container['statusChangeReason'];
    }

    /**
     * Sets statusChangeReason
     * @param string $statusChangeReason Reason for change in status.
     * @return $this
     */
    public function setStatusChangeReason($statusChangeReason)
    {
        $this->container['statusChangeReason'] = $statusChangeReason;

        return $this;
    }

    /**
     * Gets merchantId
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchantId'];
    }

    /**
     * Sets merchantId
     * @param string $merchantId ID of the merchant to whom this device is assigned.
     * @return $this
     */
    public function setMerchantId($merchantId)
    {
        $this->container['merchantId'] = $merchantId;

        return $this;
    }

    /**
     * Gets accountId
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     * @param string $accountId ID of the account to whom the device assigned.
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets terminalCreationDate
     * @return \DateTime
     */
    public function getTerminalCreationDate()
    {
        return $this->container['terminalCreationDate'];
    }

    /**
     * Sets terminalCreationDate
     * @param \DateTime $terminalCreationDate Timestamp in which the device was created.
     * @return $this
     */
    public function setTerminalCreationDate($terminalCreationDate)
    {
        $this->container['terminalCreationDate'] = $terminalCreationDate;

        return $this;
    }

    /**
     * Gets terminalUpdationDate
     * @return \DateTime
     */
    public function getTerminalUpdationDate()
    {
        return $this->container['terminalUpdationDate'];
    }

    /**
     * Sets terminalUpdationDate
     * @param \DateTime $terminalUpdationDate Timestamp in which the device was updated/modified.
     * @return $this
     */
    public function setTerminalUpdationDate($terminalUpdationDate)
    {
        $this->container['terminalUpdationDate'] = $terminalUpdationDate;

        return $this;
    }

    /**
     * Gets paymentProcessorToTerminalMap
     * @return \CyberSource\Model\InlineResponse2006PaymentProcessorToTerminalMap
     */
    public function getPaymentProcessorToTerminalMap()
    {
        return $this->container['paymentProcessorToTerminalMap'];
    }

    /**
     * Sets paymentProcessorToTerminalMap
     * @param \CyberSource\Model\InlineResponse2006PaymentProcessorToTerminalMap $paymentProcessorToTerminalMap
     * @return $this
     */
    public function setPaymentProcessorToTerminalMap($paymentProcessorToTerminalMap)
    {
        $this->container['paymentProcessorToTerminalMap'] = $paymentProcessorToTerminalMap;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


