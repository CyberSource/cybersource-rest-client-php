<?php
/**
 * DmConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * DmConfig Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DmConfig implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DmConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'processingOptions' => '\CyberSource\Model\DmConfigProcessingOptions',
        'organization' => '\CyberSource\Model\DmConfigOrganization',
        'portfolioControls' => '\CyberSource\Model\DmConfigPortfolioControls',
        'thirdparty' => '\CyberSource\Model\DmConfigThirdparty'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'processingOptions' => null,
        'organization' => null,
        'portfolioControls' => null,
        'thirdparty' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'processingOptions' => 'processingOptions',
        'organization' => 'organization',
        'portfolioControls' => 'portfolioControls',
        'thirdparty' => 'thirdparty'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'processingOptions' => 'setProcessingOptions',
        'organization' => 'setOrganization',
        'portfolioControls' => 'setPortfolioControls',
        'thirdparty' => 'setThirdparty'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'processingOptions' => 'getProcessingOptions',
        'organization' => 'getOrganization',
        'portfolioControls' => 'getPortfolioControls',
        'thirdparty' => 'getThirdparty'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['processingOptions'] = isset($data['processingOptions']) ? $data['processingOptions'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['portfolioControls'] = isset($data['portfolioControls']) ? $data['portfolioControls'] : null;
        $this->container['thirdparty'] = isset($data['thirdparty']) ? $data['thirdparty'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets processingOptions
     * @return \CyberSource\Model\DmConfigProcessingOptions
     */
    public function getProcessingOptions()
    {
        return $this->container['processingOptions'];
    }

    /**
     * Sets processingOptions
     * @param \CyberSource\Model\DmConfigProcessingOptions $processingOptions
     * @return $this
     */
    public function setProcessingOptions($processingOptions)
    {
        $this->container['processingOptions'] = $processingOptions;

        return $this;
    }

    /**
     * Gets organization
     * @return \CyberSource\Model\DmConfigOrganization
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     * @param \CyberSource\Model\DmConfigOrganization $organization
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets portfolioControls
     * @return \CyberSource\Model\DmConfigPortfolioControls
     */
    public function getPortfolioControls()
    {
        return $this->container['portfolioControls'];
    }

    /**
     * Sets portfolioControls
     * @param \CyberSource\Model\DmConfigPortfolioControls $portfolioControls
     * @return $this
     */
    public function setPortfolioControls($portfolioControls)
    {
        $this->container['portfolioControls'] = $portfolioControls;

        return $this;
    }

    /**
     * Gets thirdparty
     * @return \CyberSource\Model\DmConfigThirdparty
     */
    public function getThirdparty()
    {
        return $this->container['thirdparty'];
    }

    /**
     * Sets thirdparty
     * @param \CyberSource\Model\DmConfigThirdparty $thirdparty
     * @return $this
     */
    public function setThirdparty($thirdparty)
    {
        $this->container['thirdparty'] = $thirdparty;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


