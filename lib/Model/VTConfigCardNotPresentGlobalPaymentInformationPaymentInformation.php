<?php
/**
 * VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'VTConfig_cardNotPresent_globalPaymentInformation_paymentInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'displayCardVerificationValue' => 'string[]',
        'requireCardVerificationValue' => 'string[]',
        'acceptedCardTypes' => 'string[]',
        'displayCreditCards' => 'bool',
        'displayEchecks' => 'bool',
        'displayDebtIndicator' => 'bool',
        'displayBillPayment' => 'bool',
        'enableEchecks' => 'bool',
        'displayIgnoreECheckAvsCheckbox' => 'bool',
        'firstNameRequired' => 'bool',
        'lastNameRequired' => 'bool',
        'displayFirstName' => 'bool',
        'displayLastName' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'displayCardVerificationValue' => null,
        'requireCardVerificationValue' => null,
        'acceptedCardTypes' => null,
        'displayCreditCards' => null,
        'displayEchecks' => null,
        'displayDebtIndicator' => null,
        'displayBillPayment' => null,
        'enableEchecks' => null,
        'displayIgnoreECheckAvsCheckbox' => null,
        'firstNameRequired' => null,
        'lastNameRequired' => null,
        'displayFirstName' => null,
        'displayLastName' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'displayCardVerificationValue' => 'displayCardVerificationValue',
        'requireCardVerificationValue' => 'requireCardVerificationValue',
        'acceptedCardTypes' => 'acceptedCardTypes',
        'displayCreditCards' => 'displayCreditCards',
        'displayEchecks' => 'displayEchecks',
        'displayDebtIndicator' => 'displayDebtIndicator',
        'displayBillPayment' => 'displayBillPayment',
        'enableEchecks' => 'enableEchecks',
        'displayIgnoreECheckAvsCheckbox' => 'displayIgnoreECheckAvsCheckbox',
        'firstNameRequired' => 'firstNameRequired',
        'lastNameRequired' => 'lastNameRequired',
        'displayFirstName' => 'displayFirstName',
        'displayLastName' => 'displayLastName'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'displayCardVerificationValue' => 'setDisplayCardVerificationValue',
        'requireCardVerificationValue' => 'setRequireCardVerificationValue',
        'acceptedCardTypes' => 'setAcceptedCardTypes',
        'displayCreditCards' => 'setDisplayCreditCards',
        'displayEchecks' => 'setDisplayEchecks',
        'displayDebtIndicator' => 'setDisplayDebtIndicator',
        'displayBillPayment' => 'setDisplayBillPayment',
        'enableEchecks' => 'setEnableEchecks',
        'displayIgnoreECheckAvsCheckbox' => 'setDisplayIgnoreECheckAvsCheckbox',
        'firstNameRequired' => 'setFirstNameRequired',
        'lastNameRequired' => 'setLastNameRequired',
        'displayFirstName' => 'setDisplayFirstName',
        'displayLastName' => 'setDisplayLastName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'displayCardVerificationValue' => 'getDisplayCardVerificationValue',
        'requireCardVerificationValue' => 'getRequireCardVerificationValue',
        'acceptedCardTypes' => 'getAcceptedCardTypes',
        'displayCreditCards' => 'getDisplayCreditCards',
        'displayEchecks' => 'getDisplayEchecks',
        'displayDebtIndicator' => 'getDisplayDebtIndicator',
        'displayBillPayment' => 'getDisplayBillPayment',
        'enableEchecks' => 'getEnableEchecks',
        'displayIgnoreECheckAvsCheckbox' => 'getDisplayIgnoreECheckAvsCheckbox',
        'firstNameRequired' => 'getFirstNameRequired',
        'lastNameRequired' => 'getLastNameRequired',
        'displayFirstName' => 'getDisplayFirstName',
        'displayLastName' => 'getDisplayLastName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['displayCardVerificationValue'] = isset($data['displayCardVerificationValue']) ? $data['displayCardVerificationValue'] : null;
        $this->container['requireCardVerificationValue'] = isset($data['requireCardVerificationValue']) ? $data['requireCardVerificationValue'] : null;
        $this->container['acceptedCardTypes'] = isset($data['acceptedCardTypes']) ? $data['acceptedCardTypes'] : null;
        $this->container['displayCreditCards'] = isset($data['displayCreditCards']) ? $data['displayCreditCards'] : null;
        $this->container['displayEchecks'] = isset($data['displayEchecks']) ? $data['displayEchecks'] : null;
        $this->container['displayDebtIndicator'] = isset($data['displayDebtIndicator']) ? $data['displayDebtIndicator'] : null;
        $this->container['displayBillPayment'] = isset($data['displayBillPayment']) ? $data['displayBillPayment'] : null;
        $this->container['enableEchecks'] = isset($data['enableEchecks']) ? $data['enableEchecks'] : null;
        $this->container['displayIgnoreECheckAvsCheckbox'] = isset($data['displayIgnoreECheckAvsCheckbox']) ? $data['displayIgnoreECheckAvsCheckbox'] : null;
        $this->container['firstNameRequired'] = isset($data['firstNameRequired']) ? $data['firstNameRequired'] : null;
        $this->container['lastNameRequired'] = isset($data['lastNameRequired']) ? $data['lastNameRequired'] : null;
        $this->container['displayFirstName'] = isset($data['displayFirstName']) ? $data['displayFirstName'] : null;
        $this->container['displayLastName'] = isset($data['displayLastName']) ? $data['displayLastName'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets displayCardVerificationValue
     * @return string[]
     */
    public function getDisplayCardVerificationValue()
    {
        return $this->container['displayCardVerificationValue'];
    }

    /**
     * Sets displayCardVerificationValue
     * @param string[] $displayCardVerificationValue
     * @return $this
     */
    public function setDisplayCardVerificationValue($displayCardVerificationValue)
    {
        $this->container['displayCardVerificationValue'] = $displayCardVerificationValue;

        return $this;
    }

    /**
     * Gets requireCardVerificationValue
     * @return string[]
     */
    public function getRequireCardVerificationValue()
    {
        return $this->container['requireCardVerificationValue'];
    }

    /**
     * Sets requireCardVerificationValue
     * @param string[] $requireCardVerificationValue
     * @return $this
     */
    public function setRequireCardVerificationValue($requireCardVerificationValue)
    {
        $this->container['requireCardVerificationValue'] = $requireCardVerificationValue;

        return $this;
    }

    /**
     * Gets acceptedCardTypes
     * @return string[]
     */
    public function getAcceptedCardTypes()
    {
        return $this->container['acceptedCardTypes'];
    }

    /**
     * Sets acceptedCardTypes
     * @param string[] $acceptedCardTypes
     * @return $this
     */
    public function setAcceptedCardTypes($acceptedCardTypes)
    {
        $this->container['acceptedCardTypes'] = $acceptedCardTypes;

        return $this;
    }

    /**
     * Gets displayCreditCards
     * @return bool
     */
    public function getDisplayCreditCards()
    {
        return $this->container['displayCreditCards'];
    }

    /**
     * Sets displayCreditCards
     * @param bool $displayCreditCards
     * @return $this
     */
    public function setDisplayCreditCards($displayCreditCards)
    {
        $this->container['displayCreditCards'] = $displayCreditCards;

        return $this;
    }

    /**
     * Gets displayEchecks
     * @return bool
     */
    public function getDisplayEchecks()
    {
        return $this->container['displayEchecks'];
    }

    /**
     * Sets displayEchecks
     * @param bool $displayEchecks
     * @return $this
     */
    public function setDisplayEchecks($displayEchecks)
    {
        $this->container['displayEchecks'] = $displayEchecks;

        return $this;
    }

    /**
     * Gets displayDebtIndicator
     * @return bool
     */
    public function getDisplayDebtIndicator()
    {
        return $this->container['displayDebtIndicator'];
    }

    /**
     * Sets displayDebtIndicator
     * @param bool $displayDebtIndicator
     * @return $this
     */
    public function setDisplayDebtIndicator($displayDebtIndicator)
    {
        $this->container['displayDebtIndicator'] = $displayDebtIndicator;

        return $this;
    }

    /**
     * Gets displayBillPayment
     * @return bool
     */
    public function getDisplayBillPayment()
    {
        return $this->container['displayBillPayment'];
    }

    /**
     * Sets displayBillPayment
     * @param bool $displayBillPayment
     * @return $this
     */
    public function setDisplayBillPayment($displayBillPayment)
    {
        $this->container['displayBillPayment'] = $displayBillPayment;

        return $this;
    }

    /**
     * Gets enableEchecks
     * @return bool
     */
    public function getEnableEchecks()
    {
        return $this->container['enableEchecks'];
    }

    /**
     * Sets enableEchecks
     * @param bool $enableEchecks
     * @return $this
     */
    public function setEnableEchecks($enableEchecks)
    {
        $this->container['enableEchecks'] = $enableEchecks;

        return $this;
    }

    /**
     * Gets displayIgnoreECheckAvsCheckbox
     * @return bool
     */
    public function getDisplayIgnoreECheckAvsCheckbox()
    {
        return $this->container['displayIgnoreECheckAvsCheckbox'];
    }

    /**
     * Sets displayIgnoreECheckAvsCheckbox
     * @param bool $displayIgnoreECheckAvsCheckbox
     * @return $this
     */
    public function setDisplayIgnoreECheckAvsCheckbox($displayIgnoreECheckAvsCheckbox)
    {
        $this->container['displayIgnoreECheckAvsCheckbox'] = $displayIgnoreECheckAvsCheckbox;

        return $this;
    }

    /**
     * Gets firstNameRequired
     * @return bool
     */
    public function getFirstNameRequired()
    {
        return $this->container['firstNameRequired'];
    }

    /**
     * Sets firstNameRequired
     * @param bool $firstNameRequired
     * @return $this
     */
    public function setFirstNameRequired($firstNameRequired)
    {
        $this->container['firstNameRequired'] = $firstNameRequired;

        return $this;
    }

    /**
     * Gets lastNameRequired
     * @return bool
     */
    public function getLastNameRequired()
    {
        return $this->container['lastNameRequired'];
    }

    /**
     * Sets lastNameRequired
     * @param bool $lastNameRequired
     * @return $this
     */
    public function setLastNameRequired($lastNameRequired)
    {
        $this->container['lastNameRequired'] = $lastNameRequired;

        return $this;
    }

    /**
     * Gets displayFirstName
     * @return bool
     */
    public function getDisplayFirstName()
    {
        return $this->container['displayFirstName'];
    }

    /**
     * Sets displayFirstName
     * @param bool $displayFirstName
     * @return $this
     */
    public function setDisplayFirstName($displayFirstName)
    {
        $this->container['displayFirstName'] = $displayFirstName;

        return $this;
    }

    /**
     * Gets displayLastName
     * @return bool
     */
    public function getDisplayLastName()
    {
        return $this->container['displayLastName'];
    }

    /**
     * Sets displayLastName
     * @param bool $displayLastName
     * @return $this
     */
    public function setDisplayLastName($displayLastName)
    {
        $this->container['displayLastName'] = $displayLastName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


