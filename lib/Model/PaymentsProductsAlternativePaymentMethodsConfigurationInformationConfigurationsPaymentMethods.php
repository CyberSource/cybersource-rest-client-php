<?php
/**
 * PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods Class Doc Comment
 *
 * @category    Class
 * @description Payment method configuration for the product.
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'paymentsProducts_alternativePaymentMethods_configurationInformation_configurations_paymentMethods';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchantId' => 'string',
        'logoUrl' => 'string',
        'redirectSuccessUrl' => 'string',
        'redirectCancelUrl' => 'string',
        'redirectFailureUrl' => 'string',
        'underwriting' => '\CyberSource\Model\UnderwritingConfiguration',
        'additionalConfigurations' => '\CyberSource\Model\PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchantId' => null,
        'logoUrl' => null,
        'redirectSuccessUrl' => null,
        'redirectCancelUrl' => null,
        'redirectFailureUrl' => null,
        'underwriting' => null,
        'additionalConfigurations' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantId' => 'merchantId',
        'logoUrl' => 'logoUrl',
        'redirectSuccessUrl' => 'redirectSuccessUrl',
        'redirectCancelUrl' => 'redirectCancelUrl',
        'redirectFailureUrl' => 'redirectFailureUrl',
        'underwriting' => 'underwriting',
        'additionalConfigurations' => 'additionalConfigurations'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'merchantId' => 'setMerchantId',
        'logoUrl' => 'setLogoUrl',
        'redirectSuccessUrl' => 'setRedirectSuccessUrl',
        'redirectCancelUrl' => 'setRedirectCancelUrl',
        'redirectFailureUrl' => 'setRedirectFailureUrl',
        'underwriting' => 'setUnderwriting',
        'additionalConfigurations' => 'setAdditionalConfigurations'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'merchantId' => 'getMerchantId',
        'logoUrl' => 'getLogoUrl',
        'redirectSuccessUrl' => 'getRedirectSuccessUrl',
        'redirectCancelUrl' => 'getRedirectCancelUrl',
        'redirectFailureUrl' => 'getRedirectFailureUrl',
        'underwriting' => 'getUnderwriting',
        'additionalConfigurations' => 'getAdditionalConfigurations'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchantId'] = isset($data['merchantId']) ? $data['merchantId'] : null;
        $this->container['logoUrl'] = isset($data['logoUrl']) ? $data['logoUrl'] : null;
        $this->container['redirectSuccessUrl'] = isset($data['redirectSuccessUrl']) ? $data['redirectSuccessUrl'] : null;
        $this->container['redirectCancelUrl'] = isset($data['redirectCancelUrl']) ? $data['redirectCancelUrl'] : null;
        $this->container['redirectFailureUrl'] = isset($data['redirectFailureUrl']) ? $data['redirectFailureUrl'] : null;
        $this->container['underwriting'] = isset($data['underwriting']) ? $data['underwriting'] : null;
        $this->container['additionalConfigurations'] = isset($data['additionalConfigurations']) ? $data['additionalConfigurations'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets merchantId
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchantId'];
    }

    /**
     * Sets merchantId
     * @param string $merchantId Merchant ID for the payment method. This is a unique identifier for the merchant. example. mid12345678
     * @return $this
     */
    public function setMerchantId($merchantId)
    {
        $this->container['merchantId'] = $merchantId;

        return $this;
    }

    /**
     * Gets logoUrl
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logoUrl'];
    }

    /**
     * Sets logoUrl
     * @param string $logoUrl URL of the logo for the payment method. This is used for branding purposes. example: http://www.test.com
     * @return $this
     */
    public function setLogoUrl($logoUrl)
    {
        $this->container['logoUrl'] = $logoUrl;

        return $this;
    }

    /**
     * Gets redirectSuccessUrl
     * @return string
     */
    public function getRedirectSuccessUrl()
    {
        return $this->container['redirectSuccessUrl'];
    }

    /**
     * Sets redirectSuccessUrl
     * @param string $redirectSuccessUrl URL to redirect to after a successful transaction. This is where the user will be sent after completing the payment. example: http://www.test.com/success
     * @return $this
     */
    public function setRedirectSuccessUrl($redirectSuccessUrl)
    {
        $this->container['redirectSuccessUrl'] = $redirectSuccessUrl;

        return $this;
    }

    /**
     * Gets redirectCancelUrl
     * @return string
     */
    public function getRedirectCancelUrl()
    {
        return $this->container['redirectCancelUrl'];
    }

    /**
     * Sets redirectCancelUrl
     * @param string $redirectCancelUrl URL to redirect to if the user cancels the transaction. This is where the user will be sent if they choose to cancel the payment. example: http://www.test.com/cancel
     * @return $this
     */
    public function setRedirectCancelUrl($redirectCancelUrl)
    {
        $this->container['redirectCancelUrl'] = $redirectCancelUrl;

        return $this;
    }

    /**
     * Gets redirectFailureUrl
     * @return string
     */
    public function getRedirectFailureUrl()
    {
        return $this->container['redirectFailureUrl'];
    }

    /**
     * Sets redirectFailureUrl
     * @param string $redirectFailureUrl URL to redirect to if the transaction fails. This is where the user will be sent if there is an error during the payment process. example: http://www.test.com/failure
     * @return $this
     */
    public function setRedirectFailureUrl($redirectFailureUrl)
    {
        $this->container['redirectFailureUrl'] = $redirectFailureUrl;

        return $this;
    }

    /**
     * Gets underwriting
     * @return \CyberSource\Model\UnderwritingConfiguration
     */
    public function getUnderwriting()
    {
        return $this->container['underwriting'];
    }

    /**
     * Sets underwriting
     * @param \CyberSource\Model\UnderwritingConfiguration $underwriting
     * @return $this
     */
    public function setUnderwriting($underwriting)
    {
        $this->container['underwriting'] = $underwriting;

        return $this;
    }

    /**
     * Gets additionalConfigurations
     * @return \CyberSource\Model\PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations[]
     */
    public function getAdditionalConfigurations()
    {
        return $this->container['additionalConfigurations'];
    }

    /**
     * Sets additionalConfigurations
     * @param \CyberSource\Model\PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations[] $additionalConfigurations Additional configurations for the payment method. This can include various settings specific to the payment method.
     * @return $this
     */
    public function setAdditionalConfigurations($additionalConfigurations)
    {
        $this->container['additionalConfigurations'] = $additionalConfigurations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


