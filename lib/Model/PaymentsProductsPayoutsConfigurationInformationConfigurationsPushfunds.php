<?php
/**
 * PaymentsProductsPayoutsConfigurationInformationConfigurationsPushfunds
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * PaymentsProductsPayoutsConfigurationInformationConfigurationsPushfunds Class Doc Comment
 *
 * @category    Class
 * @description Formatted as *{payoutsAcquirerName}. The property name field should be the same as the processor name for which the pull funds or push funds feature is being configured. Here is the list of valid processor names [TBD]
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentsProductsPayoutsConfigurationInformationConfigurationsPushfunds implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'paymentsProducts_payouts_configurationInformation_configurations_pushfunds';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'acquirerCountryCode' => 'int',
        'acquiringBIN' => 'int',
        'allowCryptoCurrencyPurchase' => 'bool',
        'financialInstitutionId' => 'string',
        'networkOrder' => 'string',
        'nationalReimbursementFee' => 'string',
        'originatorBusinessApplicationId' => 'string',
        'originatorPseudoAbaNumber' => 'string',
        'processorAccount' => '\CyberSource\Model\PaymentsProductsPayoutsConfigurationInformationConfigurationsProcessorAccount[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'acquirerCountryCode' => null,
        'acquiringBIN' => null,
        'allowCryptoCurrencyPurchase' => null,
        'financialInstitutionId' => null,
        'networkOrder' => null,
        'nationalReimbursementFee' => null,
        'originatorBusinessApplicationId' => null,
        'originatorPseudoAbaNumber' => null,
        'processorAccount' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'acquirerCountryCode' => 'acquirerCountryCode',
        'acquiringBIN' => 'acquiringBIN',
        'allowCryptoCurrencyPurchase' => 'allowCryptoCurrencyPurchase',
        'financialInstitutionId' => 'financialInstitutionId',
        'networkOrder' => 'networkOrder',
        'nationalReimbursementFee' => 'nationalReimbursementFee',
        'originatorBusinessApplicationId' => 'originatorBusinessApplicationId',
        'originatorPseudoAbaNumber' => 'originatorPseudoAbaNumber',
        'processorAccount' => 'processorAccount'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'acquirerCountryCode' => 'setAcquirerCountryCode',
        'acquiringBIN' => 'setAcquiringBIN',
        'allowCryptoCurrencyPurchase' => 'setAllowCryptoCurrencyPurchase',
        'financialInstitutionId' => 'setFinancialInstitutionId',
        'networkOrder' => 'setNetworkOrder',
        'nationalReimbursementFee' => 'setNationalReimbursementFee',
        'originatorBusinessApplicationId' => 'setOriginatorBusinessApplicationId',
        'originatorPseudoAbaNumber' => 'setOriginatorPseudoAbaNumber',
        'processorAccount' => 'setProcessorAccount'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'acquirerCountryCode' => 'getAcquirerCountryCode',
        'acquiringBIN' => 'getAcquiringBIN',
        'allowCryptoCurrencyPurchase' => 'getAllowCryptoCurrencyPurchase',
        'financialInstitutionId' => 'getFinancialInstitutionId',
        'networkOrder' => 'getNetworkOrder',
        'nationalReimbursementFee' => 'getNationalReimbursementFee',
        'originatorBusinessApplicationId' => 'getOriginatorBusinessApplicationId',
        'originatorPseudoAbaNumber' => 'getOriginatorPseudoAbaNumber',
        'processorAccount' => 'getProcessorAccount'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['acquirerCountryCode'] = isset($data['acquirerCountryCode']) ? $data['acquirerCountryCode'] : null;
        $this->container['acquiringBIN'] = isset($data['acquiringBIN']) ? $data['acquiringBIN'] : null;
        $this->container['allowCryptoCurrencyPurchase'] = isset($data['allowCryptoCurrencyPurchase']) ? $data['allowCryptoCurrencyPurchase'] : null;
        $this->container['financialInstitutionId'] = isset($data['financialInstitutionId']) ? $data['financialInstitutionId'] : null;
        $this->container['networkOrder'] = isset($data['networkOrder']) ? $data['networkOrder'] : null;
        $this->container['nationalReimbursementFee'] = isset($data['nationalReimbursementFee']) ? $data['nationalReimbursementFee'] : null;
        $this->container['originatorBusinessApplicationId'] = isset($data['originatorBusinessApplicationId']) ? $data['originatorBusinessApplicationId'] : null;
        $this->container['originatorPseudoAbaNumber'] = isset($data['originatorPseudoAbaNumber']) ? $data['originatorPseudoAbaNumber'] : null;
        $this->container['processorAccount'] = isset($data['processorAccount']) ? $data['processorAccount'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['acquirerCountryCode'] === null) {
            $invalid_properties[] = "'acquirerCountryCode' can't be null";
        }
        if ($this->container['acquiringBIN'] === null) {
            $invalid_properties[] = "'acquiringBIN' can't be null";
        }
        if ($this->container['originatorBusinessApplicationId'] === null) {
            $invalid_properties[] = "'originatorBusinessApplicationId' can't be null";
        }
        if ($this->container['processorAccount'] === null) {
            $invalid_properties[] = "'processorAccount' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['acquirerCountryCode'] === null) {
            return false;
        }
        if ($this->container['acquiringBIN'] === null) {
            return false;
        }
        if ($this->container['originatorBusinessApplicationId'] === null) {
            return false;
        }
        if ($this->container['processorAccount'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets acquirerCountryCode
     * @return int
     */
    public function getAcquirerCountryCode()
    {
        return $this->container['acquirerCountryCode'];
    }

    /**
     * Sets acquirerCountryCode
     * @param int $acquirerCountryCode TBD
     * @return $this
     */
    public function setAcquirerCountryCode($acquirerCountryCode)
    {
        $this->container['acquirerCountryCode'] = $acquirerCountryCode;

        return $this;
    }

    /**
     * Gets acquiringBIN
     * @return int
     */
    public function getAcquiringBIN()
    {
        return $this->container['acquiringBIN'];
    }

    /**
     * Sets acquiringBIN
     * @param int $acquiringBIN TBD
     * @return $this
     */
    public function setAcquiringBIN($acquiringBIN)
    {
        $this->container['acquiringBIN'] = $acquiringBIN;

        return $this;
    }

    /**
     * Gets allowCryptoCurrencyPurchase
     * @return bool
     */
    public function getAllowCryptoCurrencyPurchase()
    {
        return $this->container['allowCryptoCurrencyPurchase'];
    }

    /**
     * Sets allowCryptoCurrencyPurchase
     * @param bool $allowCryptoCurrencyPurchase This configuration allows a transaction to be flagged for cryptocurrency funds transfer.
     * @return $this
     */
    public function setAllowCryptoCurrencyPurchase($allowCryptoCurrencyPurchase)
    {
        $this->container['allowCryptoCurrencyPurchase'] = $allowCryptoCurrencyPurchase;

        return $this;
    }

    /**
     * Gets financialInstitutionId
     * @return string
     */
    public function getFinancialInstitutionId()
    {
        return $this->container['financialInstitutionId'];
    }

    /**
     * Sets financialInstitutionId
     * @param string $financialInstitutionId TBD
     * @return $this
     */
    public function setFinancialInstitutionId($financialInstitutionId)
    {
        $this->container['financialInstitutionId'] = $financialInstitutionId;

        return $this;
    }

    /**
     * Gets networkOrder
     * @return string
     */
    public function getNetworkOrder()
    {
        return $this->container['networkOrder'];
    }

    /**
     * Sets networkOrder
     * @param string $networkOrder TBD
     * @return $this
     */
    public function setNetworkOrder($networkOrder)
    {
        $this->container['networkOrder'] = $networkOrder;

        return $this;
    }

    /**
     * Gets nationalReimbursementFee
     * @return string
     */
    public function getNationalReimbursementFee()
    {
        return $this->container['nationalReimbursementFee'];
    }

    /**
     * Sets nationalReimbursementFee
     * @param string $nationalReimbursementFee TBD
     * @return $this
     */
    public function setNationalReimbursementFee($nationalReimbursementFee)
    {
        $this->container['nationalReimbursementFee'] = $nationalReimbursementFee;

        return $this;
    }

    /**
     * Gets originatorBusinessApplicationId
     * @return string
     */
    public function getOriginatorBusinessApplicationId()
    {
        return $this->container['originatorBusinessApplicationId'];
    }

    /**
     * Sets originatorBusinessApplicationId
     * @param string $originatorBusinessApplicationId TBD
     * @return $this
     */
    public function setOriginatorBusinessApplicationId($originatorBusinessApplicationId)
    {
        $this->container['originatorBusinessApplicationId'] = $originatorBusinessApplicationId;

        return $this;
    }

    /**
     * Gets originatorPseudoAbaNumber
     * @return string
     */
    public function getOriginatorPseudoAbaNumber()
    {
        return $this->container['originatorPseudoAbaNumber'];
    }

    /**
     * Sets originatorPseudoAbaNumber
     * @param string $originatorPseudoAbaNumber TBD
     * @return $this
     */
    public function setOriginatorPseudoAbaNumber($originatorPseudoAbaNumber)
    {
        $this->container['originatorPseudoAbaNumber'] = $originatorPseudoAbaNumber;

        return $this;
    }

    /**
     * Gets processorAccount
     * @return \CyberSource\Model\PaymentsProductsPayoutsConfigurationInformationConfigurationsProcessorAccount[]
     */
    public function getProcessorAccount()
    {
        return $this->container['processorAccount'];
    }

    /**
     * Sets processorAccount
     * @param \CyberSource\Model\PaymentsProductsPayoutsConfigurationInformationConfigurationsProcessorAccount[] $processorAccount TBD
     * @return $this
     */
    public function setProcessorAccount($processorAccount)
    {
        $this->container['processorAccount'] = $processorAccount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


