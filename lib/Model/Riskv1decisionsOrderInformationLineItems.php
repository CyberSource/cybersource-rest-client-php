<?php
/**
 * Riskv1decisionsOrderInformationLineItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * Riskv1decisionsOrderInformationLineItems Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Riskv1decisionsOrderInformationLineItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'riskv1decisions_orderInformation_lineItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'totalAmount' => 'string',
        'unitPrice' => 'string',
        'quantity' => 'int',
        'giftCardCurrency' => 'int',
        'productSKU' => 'string',
        'productRisk' => 'string',
        'productDescription' => 'string',
        'productName' => 'string',
        'productCode' => 'string',
        'gift' => 'bool',
        'distributorProductSku' => 'string',
        'passenger' => '\CyberSource\Model\Ptsv2paymentsOrderInformationPassenger',
        'shippingDestinationTypes' => 'string',
        'taxAmount' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'totalAmount' => null,
        'unitPrice' => null,
        'quantity' => null,
        'giftCardCurrency' => null,
        'productSKU' => null,
        'productRisk' => null,
        'productDescription' => null,
        'productName' => null,
        'productCode' => null,
        'gift' => null,
        'distributorProductSku' => null,
        'passenger' => null,
        'shippingDestinationTypes' => null,
        'taxAmount' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'totalAmount' => 'totalAmount',
        'unitPrice' => 'unitPrice',
        'quantity' => 'quantity',
        'giftCardCurrency' => 'giftCardCurrency',
        'productSKU' => 'productSKU',
        'productRisk' => 'productRisk',
        'productDescription' => 'productDescription',
        'productName' => 'productName',
        'productCode' => 'productCode',
        'gift' => 'gift',
        'distributorProductSku' => 'distributorProductSku',
        'passenger' => 'passenger',
        'shippingDestinationTypes' => 'shippingDestinationTypes',
        'taxAmount' => 'taxAmount'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'totalAmount' => 'setTotalAmount',
        'unitPrice' => 'setUnitPrice',
        'quantity' => 'setQuantity',
        'giftCardCurrency' => 'setGiftCardCurrency',
        'productSKU' => 'setProductSKU',
        'productRisk' => 'setProductRisk',
        'productDescription' => 'setProductDescription',
        'productName' => 'setProductName',
        'productCode' => 'setProductCode',
        'gift' => 'setGift',
        'distributorProductSku' => 'setDistributorProductSku',
        'passenger' => 'setPassenger',
        'shippingDestinationTypes' => 'setShippingDestinationTypes',
        'taxAmount' => 'setTaxAmount'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'totalAmount' => 'getTotalAmount',
        'unitPrice' => 'getUnitPrice',
        'quantity' => 'getQuantity',
        'giftCardCurrency' => 'getGiftCardCurrency',
        'productSKU' => 'getProductSKU',
        'productRisk' => 'getProductRisk',
        'productDescription' => 'getProductDescription',
        'productName' => 'getProductName',
        'productCode' => 'getProductCode',
        'gift' => 'getGift',
        'distributorProductSku' => 'getDistributorProductSku',
        'passenger' => 'getPassenger',
        'shippingDestinationTypes' => 'getShippingDestinationTypes',
        'taxAmount' => 'getTaxAmount'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['totalAmount'] = isset($data['totalAmount']) ? $data['totalAmount'] : null;
        $this->container['unitPrice'] = isset($data['unitPrice']) ? $data['unitPrice'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['giftCardCurrency'] = isset($data['giftCardCurrency']) ? $data['giftCardCurrency'] : null;
        $this->container['productSKU'] = isset($data['productSKU']) ? $data['productSKU'] : null;
        $this->container['productRisk'] = isset($data['productRisk']) ? $data['productRisk'] : null;
        $this->container['productDescription'] = isset($data['productDescription']) ? $data['productDescription'] : null;
        $this->container['productName'] = isset($data['productName']) ? $data['productName'] : null;
        $this->container['productCode'] = isset($data['productCode']) ? $data['productCode'] : null;
        $this->container['gift'] = isset($data['gift']) ? $data['gift'] : null;
        $this->container['distributorProductSku'] = isset($data['distributorProductSku']) ? $data['distributorProductSku'] : null;
        $this->container['passenger'] = isset($data['passenger']) ? $data['passenger'] : null;
        $this->container['shippingDestinationTypes'] = isset($data['shippingDestinationTypes']) ? $data['shippingDestinationTypes'] : null;
        $this->container['taxAmount'] = isset($data['taxAmount']) ? $data['taxAmount'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['totalAmount']) && (strlen($this->container['totalAmount']) > 13)) {
            $invalid_properties[] = "invalid value for 'totalAmount', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['unitPrice']) && (strlen($this->container['unitPrice']) > 15)) {
            $invalid_properties[] = "invalid value for 'unitPrice', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] > 999999999)) {
            $invalid_properties[] = "invalid value for 'quantity', must be smaller than or equal to 999999999.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] < 1)) {
            $invalid_properties[] = "invalid value for 'quantity', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['productSKU']) && (strlen($this->container['productSKU']) > 255)) {
            $invalid_properties[] = "invalid value for 'productSKU', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['productRisk']) && (strlen($this->container['productRisk']) > 6)) {
            $invalid_properties[] = "invalid value for 'productRisk', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['productName']) && (strlen($this->container['productName']) > 255)) {
            $invalid_properties[] = "invalid value for 'productName', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['productCode']) && (strlen($this->container['productCode']) > 255)) {
            $invalid_properties[] = "invalid value for 'productCode', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['distributorProductSku']) && (strlen($this->container['distributorProductSku']) > 15)) {
            $invalid_properties[] = "invalid value for 'distributorProductSku', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['shippingDestinationTypes']) && (strlen($this->container['shippingDestinationTypes']) > 50)) {
            $invalid_properties[] = "invalid value for 'shippingDestinationTypes', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['taxAmount']) && (strlen($this->container['taxAmount']) > 15)) {
            $invalid_properties[] = "invalid value for 'taxAmount', the character length must be smaller than or equal to 15.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['totalAmount']) > 13) {
            return false;
        }
        if (strlen($this->container['unitPrice']) > 15) {
            return false;
        }
        if ($this->container['quantity'] > 999999999) {
            return false;
        }
        if ($this->container['quantity'] < 1) {
            return false;
        }
        if (strlen($this->container['productSKU']) > 255) {
            return false;
        }
        if (strlen($this->container['productRisk']) > 6) {
            return false;
        }
        if (strlen($this->container['productName']) > 255) {
            return false;
        }
        if (strlen($this->container['productCode']) > 255) {
            return false;
        }
        if (strlen($this->container['distributorProductSku']) > 15) {
            return false;
        }
        if (strlen($this->container['shippingDestinationTypes']) > 50) {
            return false;
        }
        if (strlen($this->container['taxAmount']) > 15) {
            return false;
        }
        return true;
    }


    /**
     * Gets totalAmount
     * @return string
     */
    public function getTotalAmount()
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount
     * @param string $totalAmount Total amount for the item. Normally calculated as the unit price times quantity.  When `orderInformation.lineItems[].productCode` is \"gift_card\", this is the purchase amount total for prepaid gift cards in major units.  Example: 123.45 USD = 123
     * @return $this
     */
    public function setTotalAmount($totalAmount)
    {
        if (!is_null($totalAmount) && (strlen($totalAmount) > 13)) {
            throw new \InvalidArgumentException('invalid length for $totalAmount when calling Riskv1decisionsOrderInformationLineItems., must be smaller than or equal to 13.');
        }

        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets unitPrice
     * @return string
     */
    public function getUnitPrice()
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice
     * @param string $unitPrice Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15)
     * @return $this
     */
    public function setUnitPrice($unitPrice)
    {
        if (!is_null($unitPrice) && (strlen($unitPrice) > 15)) {
            throw new \InvalidArgumentException('invalid length for $unitPrice when calling Riskv1decisionsOrderInformationLineItems., must be smaller than or equal to 15.');
        }

        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param int $quantity Number of units for this order. Must be a non-negative integer.  The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     * @return $this
     */
    public function setQuantity($quantity)
    {

        if (!is_null($quantity) && ($quantity > 999999999)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling Riskv1decisionsOrderInformationLineItems., must be smaller than or equal to 999999999.');
        }
        if (!is_null($quantity) && ($quantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling Riskv1decisionsOrderInformationLineItems., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets giftCardCurrency
     * @return int
     */
    public function getGiftCardCurrency()
    {
        return $this->container['giftCardCurrency'];
    }

    /**
     * Sets giftCardCurrency
     * @param int $giftCardCurrency When `orderInformation.lineItems[].productCode` is \"gift_card\", this is the currency used for the gift card purchase.  For details, see `pa_gift_card_currency` field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/Payer_Authentication_SCMP_API.pdf)  For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
     * @return $this
     */
    public function setGiftCardCurrency($giftCardCurrency)
    {
        $this->container['giftCardCurrency'] = $giftCardCurrency;

        return $this;
    }

    /**
     * Gets productSKU
     * @return string
     */
    public function getProductSKU()
    {
        return $this->container['productSKU'];
    }

    /**
     * Sets productSKU
     * @param string $productSKU Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.  For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not set to **default** or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the values related to shipping and/or handling.
     * @return $this
     */
    public function setProductSKU($productSKU)
    {
        if (!is_null($productSKU) && (strlen($productSKU) > 255)) {
            throw new \InvalidArgumentException('invalid length for $productSKU when calling Riskv1decisionsOrderInformationLineItems., must be smaller than or equal to 255.');
        }

        $this->container['productSKU'] = $productSKU;

        return $this;
    }

    /**
     * Gets productRisk
     * @return string
     */
    public function getProductRisk()
    {
        return $this->container['productRisk'];
    }

    /**
     * Sets productRisk
     * @param string $productRisk Indicates the level of risk for the product. This field can contain one of the following values: - `low`: The product is associated with few chargebacks. - `normal`: The product is associated with a normal number of chargebacks. - `high`: The product is associated with many chargebacks.
     * @return $this
     */
    public function setProductRisk($productRisk)
    {
        if (!is_null($productRisk) && (strlen($productRisk) > 6)) {
            throw new \InvalidArgumentException('invalid length for $productRisk when calling Riskv1decisionsOrderInformationLineItems., must be smaller than or equal to 6.');
        }

        $this->container['productRisk'] = $productRisk;

        return $this;
    }

    /**
     * Gets productDescription
     * @return string
     */
    public function getProductDescription()
    {
        return $this->container['productDescription'];
    }

    /**
     * Sets productDescription
     * @param string $productDescription Brief description of item.
     * @return $this
     */
    public function setProductDescription($productDescription)
    {
        $this->container['productDescription'] = $productDescription;

        return $this;
    }

    /**
     * Gets productName
     * @return string
     */
    public function getProductName()
    {
        return $this->container['productName'];
    }

    /**
     * Sets productName
     * @param string $productName For an authorization or capture transaction (`processingOptions.capture` is `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     * @return $this
     */
    public function setProductName($productName)
    {
        if (!is_null($productName) && (strlen($productName) > 255)) {
            throw new \InvalidArgumentException('invalid length for $productName when calling Riskv1decisionsOrderInformationLineItems., must be smaller than or equal to 255.');
        }

        $this->container['productName'] = $productName;

        return $this;
    }

    /**
     * Gets productCode
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['productCode'];
    }

    /**
     * Sets productCode
     * @param string $productCode Type of product. The value for this field is used to identify the product category (electronic, handling, physical, service, or shipping). The default value is `default`.  If you are performing an authorization transaction (`processingOptions.capture` is set to `false`), and you set this field to a value other than `default` or one of the values related to shipping and/or handling, then `orderInformation.lineItems[].quantity`, `orderInformation.lineItems[].productName`, and `orderInformation.lineItems[].productSku` fields are required.  Optional field.  For details, see the `product_code` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  To use the tax calculation service, use values listed in the Tax Product Code Guide. For information about this document, contact customer support. See \"Product Codes,\" page 14, for more information.
     * @return $this
     */
    public function setProductCode($productCode)
    {
        if (!is_null($productCode) && (strlen($productCode) > 255)) {
            throw new \InvalidArgumentException('invalid length for $productCode when calling Riskv1decisionsOrderInformationLineItems., must be smaller than or equal to 255.');
        }

        $this->container['productCode'] = $productCode;

        return $this;
    }

    /**
     * Gets gift
     * @return bool
     */
    public function getGift()
    {
        return $this->container['gift'];
    }

    /**
     * Sets gift
     * @param bool $gift This field is only used in DM service.  Determines whether to assign risk to the order if the billing and shipping addresses specify different cities, states, or countries. This field can contain one of the following values: - true: Orders are assigned only slight additional risk if billing and shipping addresses are different. - false: Orders are assigned higher additional risk if billing and shipping addresses are different.
     * @return $this
     */
    public function setGift($gift)
    {
        $this->container['gift'] = $gift;

        return $this;
    }

    /**
     * Gets distributorProductSku
     * @return string
     */
    public function getDistributorProductSku()
    {
        return $this->container['distributorProductSku'];
    }

    /**
     * Sets distributorProductSku
     * @param string $distributorProductSku Product’s identifier code. This field is inserted into the outgoing message without being parsed or formatted. This field is included as Distributor product SKU (Offer) in the list of API fields with which you can create custom rules.
     * @return $this
     */
    public function setDistributorProductSku($distributorProductSku)
    {
        if (!is_null($distributorProductSku) && (strlen($distributorProductSku) > 15)) {
            throw new \InvalidArgumentException('invalid length for $distributorProductSku when calling Riskv1decisionsOrderInformationLineItems., must be smaller than or equal to 15.');
        }

        $this->container['distributorProductSku'] = $distributorProductSku;

        return $this;
    }

    /**
     * Gets passenger
     * @return \CyberSource\Model\Ptsv2paymentsOrderInformationPassenger
     */
    public function getPassenger()
    {
        return $this->container['passenger'];
    }

    /**
     * Sets passenger
     * @param \CyberSource\Model\Ptsv2paymentsOrderInformationPassenger $passenger
     * @return $this
     */
    public function setPassenger($passenger)
    {
        $this->container['passenger'] = $passenger;

        return $this;
    }

    /**
     * Gets shippingDestinationTypes
     * @return string
     */
    public function getShippingDestinationTypes()
    {
        return $this->container['shippingDestinationTypes'];
    }

    /**
     * Sets shippingDestinationTypes
     * @param string $shippingDestinationTypes Destination to where the item will be shipped. Example: Commercial, Residential, Store
     * @return $this
     */
    public function setShippingDestinationTypes($shippingDestinationTypes)
    {
        if (!is_null($shippingDestinationTypes) && (strlen($shippingDestinationTypes) > 50)) {
            throw new \InvalidArgumentException('invalid length for $shippingDestinationTypes when calling Riskv1decisionsOrderInformationLineItems., must be smaller than or equal to 50.');
        }

        $this->container['shippingDestinationTypes'] = $shippingDestinationTypes;

        return $this;
    }

    /**
     * Gets taxAmount
     * @return string
     */
    public function getTaxAmount()
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     * @param string $taxAmount Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must be in the same currency. The tax amount field is additive.  The following example uses a two-exponent currency such as USD:   1. You include each line item in your request.  ..- 1st line item has amount=10.00, quantity=1, and taxAmount=0.80  ..- 2nd line item has amount=20.00, quantity=1, and taxAmount=1.60  2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.  Optional field.  #### Airlines processing Tax portion of the order amount. This value cannot exceed 99999999999999 (fourteen 9s). Format: English characters only. Optional request field for a line item.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  Note if you send this field in your tax request, the value in the field will override the tax engine
     * @return $this
     */
    public function setTaxAmount($taxAmount)
    {
        if (!is_null($taxAmount) && (strlen($taxAmount) > 15)) {
            throw new \InvalidArgumentException('invalid length for $taxAmount when calling Riskv1decisionsOrderInformationLineItems., must be smaller than or equal to 15.');
        }

        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


