<?php
/**
 * PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'paymentsProducts_serviceFee_configurationInformation_configurations_paymentInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'paymentType' => 'string',
        'feeType' => 'string',
        'feeAmount' => 'float',
        'percentage' => 'float',
        'feeCap' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'paymentType' => null,
        'feeType' => null,
        'feeAmount' => null,
        'percentage' => null,
        'feeCap' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'paymentType' => 'paymentType',
        'feeType' => 'feeType',
        'feeAmount' => 'feeAmount',
        'percentage' => 'percentage',
        'feeCap' => 'feeCap'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'paymentType' => 'setPaymentType',
        'feeType' => 'setFeeType',
        'feeAmount' => 'setFeeAmount',
        'percentage' => 'setPercentage',
        'feeCap' => 'setFeeCap'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'paymentType' => 'getPaymentType',
        'feeType' => 'getFeeType',
        'feeAmount' => 'getFeeAmount',
        'percentage' => 'getPercentage',
        'feeCap' => 'getFeeCap'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PAYMENT_TYPE_MASTERDEBIT = 'MASTERDEBIT';
    const PAYMENT_TYPE_MASTERCREDIT = 'MASTERCREDIT';
    const PAYMENT_TYPE_VISACREDIT = 'VISACREDIT';
    const PAYMENT_TYPE_VISADEBIT = 'VISADEBIT';
    const PAYMENT_TYPE_DISCOVERCREDIT = 'DISCOVERCREDIT';
    const PAYMENT_TYPE_AMEXCREDIT = 'AMEXCREDIT';
    const PAYMENT_TYPE_ECHECK = 'ECHECK';
    const FEE_TYPE_FLAT = 'FLAT';
    const FEE_TYPE_PERCENTAGE = 'PERCENTAGE';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_MASTERDEBIT,
            self::PAYMENT_TYPE_MASTERCREDIT,
            self::PAYMENT_TYPE_VISACREDIT,
            self::PAYMENT_TYPE_VISADEBIT,
            self::PAYMENT_TYPE_DISCOVERCREDIT,
            self::PAYMENT_TYPE_AMEXCREDIT,
            self::PAYMENT_TYPE_ECHECK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFeeTypeAllowableValues()
    {
        return [
            self::FEE_TYPE_FLAT,
            self::FEE_TYPE_PERCENTAGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['paymentType'] = isset($data['paymentType']) ? $data['paymentType'] : null;
        $this->container['feeType'] = isset($data['feeType']) ? $data['feeType'] : null;
        $this->container['feeAmount'] = isset($data['feeAmount']) ? $data['feeAmount'] : null;
        $this->container['percentage'] = isset($data['percentage']) ? $data['percentage'] : null;
        $this->container['feeCap'] = isset($data['feeCap']) ? $data['feeCap'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getPaymentTypeAllowableValues();
        if (!in_array($this->container['paymentType'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'paymentType', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getFeeTypeAllowableValues();
        if (!in_array($this->container['feeType'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'feeType', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getPaymentTypeAllowableValues();
        if (!in_array($this->container['paymentType'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getFeeTypeAllowableValues();
        if (!in_array($this->container['feeType'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets paymentType
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['paymentType'];
    }

    /**
     * Sets paymentType
     * @param string $paymentType Payment types accepted by this merchant. The supported values are: MASTERDEBIT, MASTERCREDIT, VISACREDIT, VISADEBIT, DISCOVERCREDIT, AMEXCREDIT, ECHECK
     * @return $this
     */
    public function setPaymentType($paymentType)
    {
        $allowed_values = $this->getPaymentTypeAllowableValues();
        if (!is_null($paymentType) && !in_array($paymentType, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'paymentType', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['paymentType'] = $paymentType;

        return $this;
    }

    /**
     * Gets feeType
     * @return string
     */
    public function getFeeType()
    {
        return $this->container['feeType'];
    }

    /**
     * Sets feeType
     * @param string $feeType Fee type for the selected payment type. Supported values are: Flat or Percentage.
     * @return $this
     */
    public function setFeeType($feeType)
    {
        $allowed_values = $this->getFeeTypeAllowableValues();
        if (!is_null($feeType) && !in_array($feeType, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'feeType', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['feeType'] = $feeType;

        return $this;
    }

    /**
     * Gets feeAmount
     * @return float
     */
    public function getFeeAmount()
    {
        return $this->container['feeAmount'];
    }

    /**
     * Sets feeAmount
     * @param float $feeAmount Fee Amount of the selected payment type if you chose Flat fee type.
     * @return $this
     */
    public function setFeeAmount($feeAmount)
    {
        $this->container['feeAmount'] = $feeAmount;

        return $this;
    }

    /**
     * Gets percentage
     * @return float
     */
    public function getPercentage()
    {
        return $this->container['percentage'];
    }

    /**
     * Sets percentage
     * @param float $percentage Percentage of the selected payment type if you chose Percentage Fee type. Supported values use numbers with decimals. For example, 1.0
     * @return $this
     */
    public function setPercentage($percentage)
    {
        $this->container['percentage'] = $percentage;

        return $this;
    }

    /**
     * Gets feeCap
     * @return float
     */
    public function getFeeCap()
    {
        return $this->container['feeCap'];
    }

    /**
     * Sets feeCap
     * @param float $feeCap Fee cap for the selected payment type. Supported values use numbers with decimals. For example, 1.0
     * @return $this
     */
    public function setFeeCap($feeCap)
    {
        $this->container['feeCap'] = $feeCap;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


