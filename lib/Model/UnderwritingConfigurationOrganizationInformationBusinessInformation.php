<?php
/**
 * UnderwritingConfigurationOrganizationInformationBusinessInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * UnderwritingConfigurationOrganizationInformationBusinessInformation Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UnderwritingConfigurationOrganizationInformationBusinessInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'underwritingConfiguration_organizationInformation_businessInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'businessIdentifier' => 'string',
        'countryRegistration' => 'string',
        'legalName' => 'string',
        'doingBusinessAs' => 'string',
        'businessDescription' => 'string',
        'registrationNumber' => 'string',
        'stockExchange' => 'string',
        'tickerSymbol' => 'string',
        'startDate' => '\DateTime',
        'merchantCategoryCode' => 'string',
        'mccDescription' => 'string',
        'websiteURL' => 'string',
        'businessType' => 'string',
        'localMCC' => 'string[]',
        'countryPhoneNumber' => 'string',
        'phoneNumber' => 'string',
        'email' => 'string',
        'whatYourCompanyDoes' => 'string',
        'address' => '\CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationAddress',
        'tradingAddress' => '\CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationTradingAddress',
        'businessContact' => '\CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessContact',
        'businessDetails' => '\CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails',
        'ownerInformation' => '\CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation[]',
        'directorInformation' => '\CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'businessIdentifier' => null,
        'countryRegistration' => null,
        'legalName' => null,
        'doingBusinessAs' => null,
        'businessDescription' => null,
        'registrationNumber' => null,
        'stockExchange' => null,
        'tickerSymbol' => null,
        'startDate' => 'date',
        'merchantCategoryCode' => null,
        'mccDescription' => null,
        'websiteURL' => null,
        'businessType' => null,
        'localMCC' => null,
        'countryPhoneNumber' => null,
        'phoneNumber' => null,
        'email' => null,
        'whatYourCompanyDoes' => null,
        'address' => null,
        'tradingAddress' => null,
        'businessContact' => null,
        'businessDetails' => null,
        'ownerInformation' => null,
        'directorInformation' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'businessIdentifier' => 'businessIdentifier',
        'countryRegistration' => 'countryRegistration',
        'legalName' => 'legalName',
        'doingBusinessAs' => 'doingBusinessAs',
        'businessDescription' => 'businessDescription',
        'registrationNumber' => 'registrationNumber',
        'stockExchange' => 'stockExchange',
        'tickerSymbol' => 'tickerSymbol',
        'startDate' => 'startDate',
        'merchantCategoryCode' => 'merchantCategoryCode',
        'mccDescription' => 'mccDescription',
        'websiteURL' => 'websiteURL',
        'businessType' => 'businessType',
        'localMCC' => 'localMCC',
        'countryPhoneNumber' => 'countryPhoneNumber',
        'phoneNumber' => 'phoneNumber',
        'email' => 'email',
        'whatYourCompanyDoes' => 'whatYourCompanyDoes',
        'address' => 'address',
        'tradingAddress' => 'tradingAddress',
        'businessContact' => 'businessContact',
        'businessDetails' => 'businessDetails',
        'ownerInformation' => 'ownerInformation',
        'directorInformation' => 'directorInformation'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'businessIdentifier' => 'setBusinessIdentifier',
        'countryRegistration' => 'setCountryRegistration',
        'legalName' => 'setLegalName',
        'doingBusinessAs' => 'setDoingBusinessAs',
        'businessDescription' => 'setBusinessDescription',
        'registrationNumber' => 'setRegistrationNumber',
        'stockExchange' => 'setStockExchange',
        'tickerSymbol' => 'setTickerSymbol',
        'startDate' => 'setStartDate',
        'merchantCategoryCode' => 'setMerchantCategoryCode',
        'mccDescription' => 'setMccDescription',
        'websiteURL' => 'setWebsiteURL',
        'businessType' => 'setBusinessType',
        'localMCC' => 'setLocalMCC',
        'countryPhoneNumber' => 'setCountryPhoneNumber',
        'phoneNumber' => 'setPhoneNumber',
        'email' => 'setEmail',
        'whatYourCompanyDoes' => 'setWhatYourCompanyDoes',
        'address' => 'setAddress',
        'tradingAddress' => 'setTradingAddress',
        'businessContact' => 'setBusinessContact',
        'businessDetails' => 'setBusinessDetails',
        'ownerInformation' => 'setOwnerInformation',
        'directorInformation' => 'setDirectorInformation'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'businessIdentifier' => 'getBusinessIdentifier',
        'countryRegistration' => 'getCountryRegistration',
        'legalName' => 'getLegalName',
        'doingBusinessAs' => 'getDoingBusinessAs',
        'businessDescription' => 'getBusinessDescription',
        'registrationNumber' => 'getRegistrationNumber',
        'stockExchange' => 'getStockExchange',
        'tickerSymbol' => 'getTickerSymbol',
        'startDate' => 'getStartDate',
        'merchantCategoryCode' => 'getMerchantCategoryCode',
        'mccDescription' => 'getMccDescription',
        'websiteURL' => 'getWebsiteURL',
        'businessType' => 'getBusinessType',
        'localMCC' => 'getLocalMCC',
        'countryPhoneNumber' => 'getCountryPhoneNumber',
        'phoneNumber' => 'getPhoneNumber',
        'email' => 'getEmail',
        'whatYourCompanyDoes' => 'getWhatYourCompanyDoes',
        'address' => 'getAddress',
        'tradingAddress' => 'getTradingAddress',
        'businessContact' => 'getBusinessContact',
        'businessDetails' => 'getBusinessDetails',
        'ownerInformation' => 'getOwnerInformation',
        'directorInformation' => 'getDirectorInformation'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['businessIdentifier'] = isset($data['businessIdentifier']) ? $data['businessIdentifier'] : null;
        $this->container['countryRegistration'] = isset($data['countryRegistration']) ? $data['countryRegistration'] : null;
        $this->container['legalName'] = isset($data['legalName']) ? $data['legalName'] : null;
        $this->container['doingBusinessAs'] = isset($data['doingBusinessAs']) ? $data['doingBusinessAs'] : null;
        $this->container['businessDescription'] = isset($data['businessDescription']) ? $data['businessDescription'] : null;
        $this->container['registrationNumber'] = isset($data['registrationNumber']) ? $data['registrationNumber'] : null;
        $this->container['stockExchange'] = isset($data['stockExchange']) ? $data['stockExchange'] : null;
        $this->container['tickerSymbol'] = isset($data['tickerSymbol']) ? $data['tickerSymbol'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['merchantCategoryCode'] = isset($data['merchantCategoryCode']) ? $data['merchantCategoryCode'] : null;
        $this->container['mccDescription'] = isset($data['mccDescription']) ? $data['mccDescription'] : null;
        $this->container['websiteURL'] = isset($data['websiteURL']) ? $data['websiteURL'] : null;
        $this->container['businessType'] = isset($data['businessType']) ? $data['businessType'] : null;
        $this->container['localMCC'] = isset($data['localMCC']) ? $data['localMCC'] : null;
        $this->container['countryPhoneNumber'] = isset($data['countryPhoneNumber']) ? $data['countryPhoneNumber'] : null;
        $this->container['phoneNumber'] = isset($data['phoneNumber']) ? $data['phoneNumber'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['whatYourCompanyDoes'] = isset($data['whatYourCompanyDoes']) ? $data['whatYourCompanyDoes'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['tradingAddress'] = isset($data['tradingAddress']) ? $data['tradingAddress'] : null;
        $this->container['businessContact'] = isset($data['businessContact']) ? $data['businessContact'] : null;
        $this->container['businessDetails'] = isset($data['businessDetails']) ? $data['businessDetails'] : null;
        $this->container['ownerInformation'] = isset($data['ownerInformation']) ? $data['ownerInformation'] : null;
        $this->container['directorInformation'] = isset($data['directorInformation']) ? $data['directorInformation'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['businessIdentifier'] === null) {
            $invalid_properties[] = "'businessIdentifier' can't be null";
        }
        if ($this->container['countryRegistration'] === null) {
            $invalid_properties[] = "'countryRegistration' can't be null";
        }
        if ($this->container['legalName'] === null) {
            $invalid_properties[] = "'legalName' can't be null";
        }
        if ($this->container['doingBusinessAs'] === null) {
            $invalid_properties[] = "'doingBusinessAs' can't be null";
        }
        if ($this->container['businessDescription'] === null) {
            $invalid_properties[] = "'businessDescription' can't be null";
        }
        if ($this->container['startDate'] === null) {
            $invalid_properties[] = "'startDate' can't be null";
        }
        if ($this->container['merchantCategoryCode'] === null) {
            $invalid_properties[] = "'merchantCategoryCode' can't be null";
        }
        if ($this->container['businessType'] === null) {
            $invalid_properties[] = "'businessType' can't be null";
        }
        if ($this->container['countryPhoneNumber'] === null) {
            $invalid_properties[] = "'countryPhoneNumber' can't be null";
        }
        if ($this->container['phoneNumber'] === null) {
            $invalid_properties[] = "'phoneNumber' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalid_properties[] = "'email' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['businessIdentifier'] === null) {
            return false;
        }
        if ($this->container['countryRegistration'] === null) {
            return false;
        }
        if ($this->container['legalName'] === null) {
            return false;
        }
        if ($this->container['doingBusinessAs'] === null) {
            return false;
        }
        if ($this->container['businessDescription'] === null) {
            return false;
        }
        if ($this->container['startDate'] === null) {
            return false;
        }
        if ($this->container['merchantCategoryCode'] === null) {
            return false;
        }
        if ($this->container['businessType'] === null) {
            return false;
        }
        if ($this->container['countryPhoneNumber'] === null) {
            return false;
        }
        if ($this->container['phoneNumber'] === null) {
            return false;
        }
        if ($this->container['email'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets businessIdentifier
     * @return string
     */
    public function getBusinessIdentifier()
    {
        return $this->container['businessIdentifier'];
    }

    /**
     * Sets businessIdentifier
     * @param string $businessIdentifier Tax ID for the business
     * @return $this
     */
    public function setBusinessIdentifier($businessIdentifier)
    {
        $this->container['businessIdentifier'] = $businessIdentifier;

        return $this;
    }

    /**
     * Gets countryRegistration
     * @return string
     */
    public function getCountryRegistration()
    {
        return $this->container['countryRegistration'];
    }

    /**
     * Sets countryRegistration
     * @param string $countryRegistration Country where the business is registered. Two character country code, ISO 3166-1 alpha-2.
     * @return $this
     */
    public function setCountryRegistration($countryRegistration)
    {
        $this->container['countryRegistration'] = $countryRegistration;

        return $this;
    }

    /**
     * Gets legalName
     * @return string
     */
    public function getLegalName()
    {
        return $this->container['legalName'];
    }

    /**
     * Sets legalName
     * @param string $legalName The legally registered name of the business
     * @return $this
     */
    public function setLegalName($legalName)
    {
        $this->container['legalName'] = $legalName;

        return $this;
    }

    /**
     * Gets doingBusinessAs
     * @return string
     */
    public function getDoingBusinessAs()
    {
        return $this->container['doingBusinessAs'];
    }

    /**
     * Sets doingBusinessAs
     * @param string $doingBusinessAs The DBA of the business.
     * @return $this
     */
    public function setDoingBusinessAs($doingBusinessAs)
    {
        $this->container['doingBusinessAs'] = $doingBusinessAs;

        return $this;
    }

    /**
     * Gets businessDescription
     * @return string
     */
    public function getBusinessDescription()
    {
        return $this->container['businessDescription'];
    }

    /**
     * Sets businessDescription
     * @param string $businessDescription Short description of the Business
     * @return $this
     */
    public function setBusinessDescription($businessDescription)
    {
        $this->container['businessDescription'] = $businessDescription;

        return $this;
    }

    /**
     * Gets registrationNumber
     * @return string
     */
    public function getRegistrationNumber()
    {
        return $this->container['registrationNumber'];
    }

    /**
     * Sets registrationNumber
     * @param string $registrationNumber Registration ID for Enterprise Merchant
     * @return $this
     */
    public function setRegistrationNumber($registrationNumber)
    {
        $this->container['registrationNumber'] = $registrationNumber;

        return $this;
    }

    /**
     * Gets stockExchange
     * @return string
     */
    public function getStockExchange()
    {
        return $this->container['stockExchange'];
    }

    /**
     * Sets stockExchange
     * @param string $stockExchange Which stock exchange is the company trading in?
     * @return $this
     */
    public function setStockExchange($stockExchange)
    {
        $this->container['stockExchange'] = $stockExchange;

        return $this;
    }

    /**
     * Gets tickerSymbol
     * @return string
     */
    public function getTickerSymbol()
    {
        return $this->container['tickerSymbol'];
    }

    /**
     * Sets tickerSymbol
     * @param string $tickerSymbol Stock Symbol on the exchange
     * @return $this
     */
    public function setTickerSymbol($tickerSymbol)
    {
        $this->container['tickerSymbol'] = $tickerSymbol;

        return $this;
    }

    /**
     * Gets startDate
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     * @param \DateTime $startDate When did Business start. Format: YYYY-MM-DD Example 2016-08-11 equals August 11, 2016
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets merchantCategoryCode
     * @return string
     */
    public function getMerchantCategoryCode()
    {
        return $this->container['merchantCategoryCode'];
    }

    /**
     * Sets merchantCategoryCode
     * @param string $merchantCategoryCode Industry standard Merchant Category Code (MCC)
     * @return $this
     */
    public function setMerchantCategoryCode($merchantCategoryCode)
    {
        $this->container['merchantCategoryCode'] = $merchantCategoryCode;

        return $this;
    }

    /**
     * Gets mccDescription
     * @return string
     */
    public function getMccDescription()
    {
        return $this->container['mccDescription'];
    }

    /**
     * Sets mccDescription
     * @param string $mccDescription MCC Description
     * @return $this
     */
    public function setMccDescription($mccDescription)
    {
        $this->container['mccDescription'] = $mccDescription;

        return $this;
    }

    /**
     * Gets websiteURL
     * @return string
     */
    public function getWebsiteURL()
    {
        return $this->container['websiteURL'];
    }

    /**
     * Sets websiteURL
     * @param string $websiteURL Website for the Business
     * @return $this
     */
    public function setWebsiteURL($websiteURL)
    {
        $this->container['websiteURL'] = $websiteURL;

        return $this;
    }

    /**
     * Gets businessType
     * @return string
     */
    public function getBusinessType()
    {
        return $this->container['businessType'];
    }

    /**
     * Sets businessType
     * @param string $businessType Business type  Possible values: - PARTNERSHIP - SOLE_PROPRIETORSHIP - CORPORATION - LLC - NON_PROFIT - TRUST
     * @return $this
     */
    public function setBusinessType($businessType)
    {
        $this->container['businessType'] = $businessType;

        return $this;
    }

    /**
     * Gets localMCC
     * @return string[]
     */
    public function getLocalMCC()
    {
        return $this->container['localMCC'];
    }

    /**
     * Sets localMCC
     * @param string[] $localMCC
     * @return $this
     */
    public function setLocalMCC($localMCC)
    {
        $this->container['localMCC'] = $localMCC;

        return $this;
    }

    /**
     * Gets countryPhoneNumber
     * @return string
     */
    public function getCountryPhoneNumber()
    {
        return $this->container['countryPhoneNumber'];
    }

    /**
     * Sets countryPhoneNumber
     * @param string $countryPhoneNumber Country of the Business phone number. Two character country code, ISO 3166-1 alpha-2.
     * @return $this
     */
    public function setCountryPhoneNumber($countryPhoneNumber)
    {
        $this->container['countryPhoneNumber'] = $countryPhoneNumber;

        return $this;
    }

    /**
     * Gets phoneNumber
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phoneNumber'];
    }

    /**
     * Sets phoneNumber
     * @param string $phoneNumber Business Phone Number
     * @return $this
     */
    public function setPhoneNumber($phoneNumber)
    {
        $this->container['phoneNumber'] = $phoneNumber;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Business Email Address
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets whatYourCompanyDoes
     * @return string
     */
    public function getWhatYourCompanyDoes()
    {
        return $this->container['whatYourCompanyDoes'];
    }

    /**
     * Sets whatYourCompanyDoes
     * @param string $whatYourCompanyDoes What your company does and how you market your service
     * @return $this
     */
    public function setWhatYourCompanyDoes($whatYourCompanyDoes)
    {
        $this->container['whatYourCompanyDoes'] = $whatYourCompanyDoes;

        return $this;
    }

    /**
     * Gets address
     * @return \CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param \CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationAddress $address
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets tradingAddress
     * @return \CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationTradingAddress
     */
    public function getTradingAddress()
    {
        return $this->container['tradingAddress'];
    }

    /**
     * Sets tradingAddress
     * @param \CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationTradingAddress $tradingAddress
     * @return $this
     */
    public function setTradingAddress($tradingAddress)
    {
        $this->container['tradingAddress'] = $tradingAddress;

        return $this;
    }

    /**
     * Gets businessContact
     * @return \CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessContact
     */
    public function getBusinessContact()
    {
        return $this->container['businessContact'];
    }

    /**
     * Sets businessContact
     * @param \CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessContact $businessContact
     * @return $this
     */
    public function setBusinessContact($businessContact)
    {
        $this->container['businessContact'] = $businessContact;

        return $this;
    }

    /**
     * Gets businessDetails
     * @return \CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails
     */
    public function getBusinessDetails()
    {
        return $this->container['businessDetails'];
    }

    /**
     * Sets businessDetails
     * @param \CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails $businessDetails
     * @return $this
     */
    public function setBusinessDetails($businessDetails)
    {
        $this->container['businessDetails'] = $businessDetails;

        return $this;
    }

    /**
     * Gets ownerInformation
     * @return \CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation[]
     */
    public function getOwnerInformation()
    {
        return $this->container['ownerInformation'];
    }

    /**
     * Sets ownerInformation
     * @param \CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationOwnerInformation[] $ownerInformation
     * @return $this
     */
    public function setOwnerInformation($ownerInformation)
    {
        $this->container['ownerInformation'] = $ownerInformation;

        return $this;
    }

    /**
     * Gets directorInformation
     * @return \CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation[]
     */
    public function getDirectorInformation()
    {
        return $this->container['directorInformation'];
    }

    /**
     * Sets directorInformation
     * @param \CyberSource\Model\UnderwritingConfigurationOrganizationInformationBusinessInformationDirectorInformation[] $directorInformation
     * @return $this
     */
    public function setDirectorInformation($directorInformation)
    {
        $this->container['directorInformation'] = $directorInformation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


