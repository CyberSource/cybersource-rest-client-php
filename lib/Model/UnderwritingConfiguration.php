<?php
/**
 * UnderwritingConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * UnderwritingConfiguration Class Doc Comment
 *
 * @category    Class
 * @description Underwriting configuration containing the complete VMES (Visa Merchant Evaluation Service) payload for merchant risk evaluation.
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UnderwritingConfiguration implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'underwritingConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clientReferenceInformation' => '\CyberSource\Model\UnderwritingConfigurationClientReferenceInformation',
        'merchantApplication' => '\CyberSource\Model\UnderwritingConfigurationMerchantApplication',
        'metadata' => 'object',
        'metadataExternal' => 'object',
        'organizationInformation' => '\CyberSource\Model\UnderwritingConfigurationOrganizationInformation',
        'deviceInformation' => '\CyberSource\Model\UnderwritingConfigurationDeviceInformation',
        'depositInformation' => '\CyberSource\Model\UnderwritingConfigurationDepositInformation',
        'billingInformation' => '\CyberSource\Model\UnderwritingConfigurationBillingInformation',
        'saleRepresentativeInformation' => '\CyberSource\Model\UnderwritingConfigurationSaleRepresentativeInformation',
        'fileAttachmentInformation' => '\CyberSource\Model\UnderwritingConfigurationFileAttachmentInformation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clientReferenceInformation' => null,
        'merchantApplication' => null,
        'metadata' => null,
        'metadataExternal' => null,
        'organizationInformation' => null,
        'deviceInformation' => null,
        'depositInformation' => null,
        'billingInformation' => null,
        'saleRepresentativeInformation' => null,
        'fileAttachmentInformation' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'clientReferenceInformation' => 'clientReferenceInformation',
        'merchantApplication' => 'merchantApplication',
        'metadata' => 'metadata',
        'metadataExternal' => 'metadataExternal',
        'organizationInformation' => 'organizationInformation',
        'deviceInformation' => 'deviceInformation',
        'depositInformation' => 'depositInformation',
        'billingInformation' => 'billingInformation',
        'saleRepresentativeInformation' => 'saleRepresentativeInformation',
        'fileAttachmentInformation' => 'fileAttachmentInformation'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'clientReferenceInformation' => 'setClientReferenceInformation',
        'merchantApplication' => 'setMerchantApplication',
        'metadata' => 'setMetadata',
        'metadataExternal' => 'setMetadataExternal',
        'organizationInformation' => 'setOrganizationInformation',
        'deviceInformation' => 'setDeviceInformation',
        'depositInformation' => 'setDepositInformation',
        'billingInformation' => 'setBillingInformation',
        'saleRepresentativeInformation' => 'setSaleRepresentativeInformation',
        'fileAttachmentInformation' => 'setFileAttachmentInformation'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'clientReferenceInformation' => 'getClientReferenceInformation',
        'merchantApplication' => 'getMerchantApplication',
        'metadata' => 'getMetadata',
        'metadataExternal' => 'getMetadataExternal',
        'organizationInformation' => 'getOrganizationInformation',
        'deviceInformation' => 'getDeviceInformation',
        'depositInformation' => 'getDepositInformation',
        'billingInformation' => 'getBillingInformation',
        'saleRepresentativeInformation' => 'getSaleRepresentativeInformation',
        'fileAttachmentInformation' => 'getFileAttachmentInformation'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clientReferenceInformation'] = isset($data['clientReferenceInformation']) ? $data['clientReferenceInformation'] : null;
        $this->container['merchantApplication'] = isset($data['merchantApplication']) ? $data['merchantApplication'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['metadataExternal'] = isset($data['metadataExternal']) ? $data['metadataExternal'] : null;
        $this->container['organizationInformation'] = isset($data['organizationInformation']) ? $data['organizationInformation'] : null;
        $this->container['deviceInformation'] = isset($data['deviceInformation']) ? $data['deviceInformation'] : null;
        $this->container['depositInformation'] = isset($data['depositInformation']) ? $data['depositInformation'] : null;
        $this->container['billingInformation'] = isset($data['billingInformation']) ? $data['billingInformation'] : null;
        $this->container['saleRepresentativeInformation'] = isset($data['saleRepresentativeInformation']) ? $data['saleRepresentativeInformation'] : null;
        $this->container['fileAttachmentInformation'] = isset($data['fileAttachmentInformation']) ? $data['fileAttachmentInformation'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets clientReferenceInformation
     * @return \CyberSource\Model\UnderwritingConfigurationClientReferenceInformation
     */
    public function getClientReferenceInformation()
    {
        return $this->container['clientReferenceInformation'];
    }

    /**
     * Sets clientReferenceInformation
     * @param \CyberSource\Model\UnderwritingConfigurationClientReferenceInformation $clientReferenceInformation
     * @return $this
     */
    public function setClientReferenceInformation($clientReferenceInformation)
    {
        $this->container['clientReferenceInformation'] = $clientReferenceInformation;

        return $this;
    }

    /**
     * Gets merchantApplication
     * @return \CyberSource\Model\UnderwritingConfigurationMerchantApplication
     */
    public function getMerchantApplication()
    {
        return $this->container['merchantApplication'];
    }

    /**
     * Sets merchantApplication
     * @param \CyberSource\Model\UnderwritingConfigurationMerchantApplication $merchantApplication
     * @return $this
     */
    public function setMerchantApplication($merchantApplication)
    {
        $this->container['merchantApplication'] = $merchantApplication;

        return $this;
    }

    /**
     * Gets metadata
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     * @param object $metadata
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets metadataExternal
     * @return object
     */
    public function getMetadataExternal()
    {
        return $this->container['metadataExternal'];
    }

    /**
     * Sets metadataExternal
     * @param object $metadataExternal
     * @return $this
     */
    public function setMetadataExternal($metadataExternal)
    {
        $this->container['metadataExternal'] = $metadataExternal;

        return $this;
    }

    /**
     * Gets organizationInformation
     * @return \CyberSource\Model\UnderwritingConfigurationOrganizationInformation
     */
    public function getOrganizationInformation()
    {
        return $this->container['organizationInformation'];
    }

    /**
     * Sets organizationInformation
     * @param \CyberSource\Model\UnderwritingConfigurationOrganizationInformation $organizationInformation
     * @return $this
     */
    public function setOrganizationInformation($organizationInformation)
    {
        $this->container['organizationInformation'] = $organizationInformation;

        return $this;
    }

    /**
     * Gets deviceInformation
     * @return \CyberSource\Model\UnderwritingConfigurationDeviceInformation
     */
    public function getDeviceInformation()
    {
        return $this->container['deviceInformation'];
    }

    /**
     * Sets deviceInformation
     * @param \CyberSource\Model\UnderwritingConfigurationDeviceInformation $deviceInformation
     * @return $this
     */
    public function setDeviceInformation($deviceInformation)
    {
        $this->container['deviceInformation'] = $deviceInformation;

        return $this;
    }

    /**
     * Gets depositInformation
     * @return \CyberSource\Model\UnderwritingConfigurationDepositInformation
     */
    public function getDepositInformation()
    {
        return $this->container['depositInformation'];
    }

    /**
     * Sets depositInformation
     * @param \CyberSource\Model\UnderwritingConfigurationDepositInformation $depositInformation
     * @return $this
     */
    public function setDepositInformation($depositInformation)
    {
        $this->container['depositInformation'] = $depositInformation;

        return $this;
    }

    /**
     * Gets billingInformation
     * @return \CyberSource\Model\UnderwritingConfigurationBillingInformation
     */
    public function getBillingInformation()
    {
        return $this->container['billingInformation'];
    }

    /**
     * Sets billingInformation
     * @param \CyberSource\Model\UnderwritingConfigurationBillingInformation $billingInformation
     * @return $this
     */
    public function setBillingInformation($billingInformation)
    {
        $this->container['billingInformation'] = $billingInformation;

        return $this;
    }

    /**
     * Gets saleRepresentativeInformation
     * @return \CyberSource\Model\UnderwritingConfigurationSaleRepresentativeInformation
     */
    public function getSaleRepresentativeInformation()
    {
        return $this->container['saleRepresentativeInformation'];
    }

    /**
     * Sets saleRepresentativeInformation
     * @param \CyberSource\Model\UnderwritingConfigurationSaleRepresentativeInformation $saleRepresentativeInformation
     * @return $this
     */
    public function setSaleRepresentativeInformation($saleRepresentativeInformation)
    {
        $this->container['saleRepresentativeInformation'] = $saleRepresentativeInformation;

        return $this;
    }

    /**
     * Gets fileAttachmentInformation
     * @return \CyberSource\Model\UnderwritingConfigurationFileAttachmentInformation
     */
    public function getFileAttachmentInformation()
    {
        return $this->container['fileAttachmentInformation'];
    }

    /**
     * Sets fileAttachmentInformation
     * @param \CyberSource\Model\UnderwritingConfigurationFileAttachmentInformation $fileAttachmentInformation
     * @return $this
     */
    public function setFileAttachmentInformation($fileAttachmentInformation)
    {
        $this->container['fileAttachmentInformation'] = $fileAttachmentInformation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


