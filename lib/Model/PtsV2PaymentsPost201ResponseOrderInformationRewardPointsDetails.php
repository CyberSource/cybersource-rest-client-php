<?php
/**
 * PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ptsV2PaymentsPost201Response_orderInformation_rewardPointsDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pointsBeforeRedemption' => 'string',
        'pointsValueBeforeRedemption' => 'string',
        'pointsRedeemed' => 'string',
        'pointsValueRedeemed' => 'string',
        'pointsAfterRedemption' => 'string',
        'pointsValueAfterRedemption' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pointsBeforeRedemption' => null,
        'pointsValueBeforeRedemption' => null,
        'pointsRedeemed' => null,
        'pointsValueRedeemed' => null,
        'pointsAfterRedemption' => null,
        'pointsValueAfterRedemption' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'pointsBeforeRedemption' => 'pointsBeforeRedemption',
        'pointsValueBeforeRedemption' => 'pointsValueBeforeRedemption',
        'pointsRedeemed' => 'pointsRedeemed',
        'pointsValueRedeemed' => 'pointsValueRedeemed',
        'pointsAfterRedemption' => 'pointsAfterRedemption',
        'pointsValueAfterRedemption' => 'pointsValueAfterRedemption'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'pointsBeforeRedemption' => 'setPointsBeforeRedemption',
        'pointsValueBeforeRedemption' => 'setPointsValueBeforeRedemption',
        'pointsRedeemed' => 'setPointsRedeemed',
        'pointsValueRedeemed' => 'setPointsValueRedeemed',
        'pointsAfterRedemption' => 'setPointsAfterRedemption',
        'pointsValueAfterRedemption' => 'setPointsValueAfterRedemption'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'pointsBeforeRedemption' => 'getPointsBeforeRedemption',
        'pointsValueBeforeRedemption' => 'getPointsValueBeforeRedemption',
        'pointsRedeemed' => 'getPointsRedeemed',
        'pointsValueRedeemed' => 'getPointsValueRedeemed',
        'pointsAfterRedemption' => 'getPointsAfterRedemption',
        'pointsValueAfterRedemption' => 'getPointsValueAfterRedemption'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pointsBeforeRedemption'] = isset($data['pointsBeforeRedemption']) ? $data['pointsBeforeRedemption'] : null;
        $this->container['pointsValueBeforeRedemption'] = isset($data['pointsValueBeforeRedemption']) ? $data['pointsValueBeforeRedemption'] : null;
        $this->container['pointsRedeemed'] = isset($data['pointsRedeemed']) ? $data['pointsRedeemed'] : null;
        $this->container['pointsValueRedeemed'] = isset($data['pointsValueRedeemed']) ? $data['pointsValueRedeemed'] : null;
        $this->container['pointsAfterRedemption'] = isset($data['pointsAfterRedemption']) ? $data['pointsAfterRedemption'] : null;
        $this->container['pointsValueAfterRedemption'] = isset($data['pointsValueAfterRedemption']) ? $data['pointsValueAfterRedemption'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets pointsBeforeRedemption
     * @return string
     */
    public function getPointsBeforeRedemption()
    {
        return $this->container['pointsBeforeRedemption'];
    }

    /**
     * Sets pointsBeforeRedemption
     * @param string $pointsBeforeRedemption Loyalty points total balance before redemption. For Example: Points, such as 100
     * @return $this
     */
    public function setPointsBeforeRedemption($pointsBeforeRedemption)
    {

        $this->container['pointsBeforeRedemption'] = $pointsBeforeRedemption;

        return $this;
    }

    /**
     * Gets pointsValueBeforeRedemption
     * @return string
     */
    public function getPointsValueBeforeRedemption()
    {
        return $this->container['pointsValueBeforeRedemption'];
    }

    /**
     * Sets pointsValueBeforeRedemption
     * @param string $pointsValueBeforeRedemption The total value of loyalty points before redemption in the default currency. Max characters is 12 excluding the \".\" symbol For Example: Points, such as 20.00
     * @return $this
     */
    public function setPointsValueBeforeRedemption($pointsValueBeforeRedemption)
    {

        $this->container['pointsValueBeforeRedemption'] = $pointsValueBeforeRedemption;

        return $this;
    }

    /**
     * Gets pointsRedeemed
     * @return string
     */
    public function getPointsRedeemed()
    {
        return $this->container['pointsRedeemed'];
    }

    /**
     * Sets pointsRedeemed
     * @param string $pointsRedeemed Number of loyalty points that were redeemed. For Example: Points, such as 100
     * @return $this
     */
    public function setPointsRedeemed($pointsRedeemed)
    {

        $this->container['pointsRedeemed'] = $pointsRedeemed;

        return $this;
    }

    /**
     * Gets pointsValueRedeemed
     * @return string
     */
    public function getPointsValueRedeemed()
    {
        return $this->container['pointsValueRedeemed'];
    }

    /**
     * Sets pointsValueRedeemed
     * @param string $pointsValueRedeemed The value of the loyalty points that were redeemed in the default currency. Max characters is 12 excluding the \".\" symbol For Example: Points, such as 100.00
     * @return $this
     */
    public function setPointsValueRedeemed($pointsValueRedeemed)
    {

        $this->container['pointsValueRedeemed'] = $pointsValueRedeemed;

        return $this;
    }

    /**
     * Gets pointsAfterRedemption
     * @return string
     */
    public function getPointsAfterRedemption()
    {
        return $this->container['pointsAfterRedemption'];
    }

    /**
     * Sets pointsAfterRedemption
     * @param string $pointsAfterRedemption Loyalty Points remaining total balance after redemption. For Example: Points, such as 20.00
     * @return $this
     */
    public function setPointsAfterRedemption($pointsAfterRedemption)
    {

        $this->container['pointsAfterRedemption'] = $pointsAfterRedemption;

        return $this;
    }

    /**
     * Gets pointsValueAfterRedemption
     * @return string
     */
    public function getPointsValueAfterRedemption()
    {
        return $this->container['pointsValueAfterRedemption'];
    }

    /**
     * Sets pointsValueAfterRedemption
     * @param string $pointsValueAfterRedemption The value of the remaining loyalty points after redumption in the default currency. Max characters is 12 excluding the \".\" symbol For Example: Points, such as 20.00
     * @return $this
     */
    public function setPointsValueAfterRedemption($pointsValueAfterRedemption)
    {

        $this->container['pointsValueAfterRedemption'] = $pointsValueAfterRedemption;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


