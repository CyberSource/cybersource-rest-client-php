<?php
/**
 * Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;

/**
 * Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication Class Doc Comment
 *
 * @category    Class
 * @package     CyberSource
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ptsv2payments_consumerAuthenticationInformation_strongAuthentication';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lowValueExemptionIndicator' => 'string',
        'riskAnalysisExemptionIndicator' => 'string',
        'trustedMerchantExemptionIndicator' => 'string',
        'secureCorporatePaymentIndicator' => 'string',
        'delegatedAuthenticationExemptionIndicator' => 'string',
        'authenticationIndicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lowValueExemptionIndicator' => null,
        'riskAnalysisExemptionIndicator' => null,
        'trustedMerchantExemptionIndicator' => null,
        'secureCorporatePaymentIndicator' => null,
        'delegatedAuthenticationExemptionIndicator' => null,
        'authenticationIndicator' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'lowValueExemptionIndicator' => 'lowValueExemptionIndicator',
        'riskAnalysisExemptionIndicator' => 'riskAnalysisExemptionIndicator',
        'trustedMerchantExemptionIndicator' => 'trustedMerchantExemptionIndicator',
        'secureCorporatePaymentIndicator' => 'secureCorporatePaymentIndicator',
        'delegatedAuthenticationExemptionIndicator' => 'delegatedAuthenticationExemptionIndicator',
        'authenticationIndicator' => 'authenticationIndicator'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'lowValueExemptionIndicator' => 'setLowValueExemptionIndicator',
        'riskAnalysisExemptionIndicator' => 'setRiskAnalysisExemptionIndicator',
        'trustedMerchantExemptionIndicator' => 'setTrustedMerchantExemptionIndicator',
        'secureCorporatePaymentIndicator' => 'setSecureCorporatePaymentIndicator',
        'delegatedAuthenticationExemptionIndicator' => 'setDelegatedAuthenticationExemptionIndicator',
        'authenticationIndicator' => 'setAuthenticationIndicator'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'lowValueExemptionIndicator' => 'getLowValueExemptionIndicator',
        'riskAnalysisExemptionIndicator' => 'getRiskAnalysisExemptionIndicator',
        'trustedMerchantExemptionIndicator' => 'getTrustedMerchantExemptionIndicator',
        'secureCorporatePaymentIndicator' => 'getSecureCorporatePaymentIndicator',
        'delegatedAuthenticationExemptionIndicator' => 'getDelegatedAuthenticationExemptionIndicator',
        'authenticationIndicator' => 'getAuthenticationIndicator'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lowValueExemptionIndicator'] = isset($data['lowValueExemptionIndicator']) ? $data['lowValueExemptionIndicator'] : null;
        $this->container['riskAnalysisExemptionIndicator'] = isset($data['riskAnalysisExemptionIndicator']) ? $data['riskAnalysisExemptionIndicator'] : null;
        $this->container['trustedMerchantExemptionIndicator'] = isset($data['trustedMerchantExemptionIndicator']) ? $data['trustedMerchantExemptionIndicator'] : null;
        $this->container['secureCorporatePaymentIndicator'] = isset($data['secureCorporatePaymentIndicator']) ? $data['secureCorporatePaymentIndicator'] : null;
        $this->container['delegatedAuthenticationExemptionIndicator'] = isset($data['delegatedAuthenticationExemptionIndicator']) ? $data['delegatedAuthenticationExemptionIndicator'] : null;
        $this->container['authenticationIndicator'] = isset($data['authenticationIndicator']) ? $data['authenticationIndicator'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['lowValueExemptionIndicator']) && (strlen($this->container['lowValueExemptionIndicator']) > 1)) {
            $invalid_properties[] = "invalid value for 'lowValueExemptionIndicator', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['riskAnalysisExemptionIndicator']) && (strlen($this->container['riskAnalysisExemptionIndicator']) > 1)) {
            $invalid_properties[] = "invalid value for 'riskAnalysisExemptionIndicator', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['trustedMerchantExemptionIndicator']) && (strlen($this->container['trustedMerchantExemptionIndicator']) > 1)) {
            $invalid_properties[] = "invalid value for 'trustedMerchantExemptionIndicator', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['secureCorporatePaymentIndicator']) && (strlen($this->container['secureCorporatePaymentIndicator']) > 1)) {
            $invalid_properties[] = "invalid value for 'secureCorporatePaymentIndicator', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['delegatedAuthenticationExemptionIndicator']) && (strlen($this->container['delegatedAuthenticationExemptionIndicator']) > 1)) {
            $invalid_properties[] = "invalid value for 'delegatedAuthenticationExemptionIndicator', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['authenticationIndicator']) && (strlen($this->container['authenticationIndicator']) > 2)) {
            $invalid_properties[] = "invalid value for 'authenticationIndicator', the character length must be smaller than or equal to 2.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['lowValueExemptionIndicator']) > 1) {
            return false;
        }
        if (strlen($this->container['riskAnalysisExemptionIndicator']) > 1) {
            return false;
        }
        if (strlen($this->container['trustedMerchantExemptionIndicator']) > 1) {
            return false;
        }
        if (strlen($this->container['secureCorporatePaymentIndicator']) > 1) {
            return false;
        }
        if (strlen($this->container['delegatedAuthenticationExemptionIndicator']) > 1) {
            return false;
        }
        if (strlen($this->container['authenticationIndicator']) > 2) {
            return false;
        }
        return true;
    }


    /**
     * Gets lowValueExemptionIndicator
     * @return string
     */
    public function getLowValueExemptionIndicator()
    {
        return $this->container['lowValueExemptionIndicator'];
    }

    /**
     * Sets lowValueExemptionIndicator
     * @param string $lowValueExemptionIndicator This field will contain the low value exemption indicator with one of the following values: Possible values: - `0`  ( low value exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as the merchant/acquirer has determined it to be a low value payment)
     * @return $this
     */
    public function setLowValueExemptionIndicator($lowValueExemptionIndicator)
    {
        if (!is_null($lowValueExemptionIndicator) && (strlen($lowValueExemptionIndicator) > 1)) {
            throw new \InvalidArgumentException('invalid length for $lowValueExemptionIndicator when calling Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication., must be smaller than or equal to 1.');
        }

        $this->container['lowValueExemptionIndicator'] = $lowValueExemptionIndicator;

        return $this;
    }

    /**
     * Gets riskAnalysisExemptionIndicator
     * @return string
     */
    public function getRiskAnalysisExemptionIndicator()
    {
        return $this->container['riskAnalysisExemptionIndicator'];
    }

    /**
     * Sets riskAnalysisExemptionIndicator
     * @param string $riskAnalysisExemptionIndicator This field will contain the transaction risk analysis exemption indicator with one of the following values: Possible values: - `0`  (TRA exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as the merchant/acquirer has determined it to be low risk in accordance with the criteria defined by PSD2/RTS)
     * @return $this
     */
    public function setRiskAnalysisExemptionIndicator($riskAnalysisExemptionIndicator)
    {
        if (!is_null($riskAnalysisExemptionIndicator) && (strlen($riskAnalysisExemptionIndicator) > 1)) {
            throw new \InvalidArgumentException('invalid length for $riskAnalysisExemptionIndicator when calling Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication., must be smaller than or equal to 1.');
        }

        $this->container['riskAnalysisExemptionIndicator'] = $riskAnalysisExemptionIndicator;

        return $this;
    }

    /**
     * Gets trustedMerchantExemptionIndicator
     * @return string
     */
    public function getTrustedMerchantExemptionIndicator()
    {
        return $this->container['trustedMerchantExemptionIndicator'];
    }

    /**
     * Sets trustedMerchantExemptionIndicator
     * @param string $trustedMerchantExemptionIndicator Possible values: - `0`  (Trusted merchant exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as it originated at a merchant trusted by the cardholder)
     * @return $this
     */
    public function setTrustedMerchantExemptionIndicator($trustedMerchantExemptionIndicator)
    {
        if (!is_null($trustedMerchantExemptionIndicator) && (strlen($trustedMerchantExemptionIndicator) > 1)) {
            throw new \InvalidArgumentException('invalid length for $trustedMerchantExemptionIndicator when calling Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication., must be smaller than or equal to 1.');
        }

        $this->container['trustedMerchantExemptionIndicator'] = $trustedMerchantExemptionIndicator;

        return $this;
    }

    /**
     * Gets secureCorporatePaymentIndicator
     * @return string
     */
    public function getSecureCorporatePaymentIndicator()
    {
        return $this->container['secureCorporatePaymentIndicator'];
    }

    /**
     * Sets secureCorporatePaymentIndicator
     * @param string $secureCorporatePaymentIndicator This field will contain the secure corporate payment exemption indicator with one of the following values: Possible values: - `0`  (SCA exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as the merchant/acquirer has determined it as a secure corporate payment)
     * @return $this
     */
    public function setSecureCorporatePaymentIndicator($secureCorporatePaymentIndicator)
    {
        if (!is_null($secureCorporatePaymentIndicator) && (strlen($secureCorporatePaymentIndicator) > 1)) {
            throw new \InvalidArgumentException('invalid length for $secureCorporatePaymentIndicator when calling Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication., must be smaller than or equal to 1.');
        }

        $this->container['secureCorporatePaymentIndicator'] = $secureCorporatePaymentIndicator;

        return $this;
    }

    /**
     * Gets delegatedAuthenticationExemptionIndicator
     * @return string
     */
    public function getDelegatedAuthenticationExemptionIndicator()
    {
        return $this->container['delegatedAuthenticationExemptionIndicator'];
    }

    /**
     * Sets delegatedAuthenticationExemptionIndicator
     * @param string $delegatedAuthenticationExemptionIndicator This field will contain the delegated authentication exemption indicator with one of the following values: Possible values: - `0`  (delegated Authentication exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as authentication has been delegated to other provider (PSP,Acquirer))
     * @return $this
     */
    public function setDelegatedAuthenticationExemptionIndicator($delegatedAuthenticationExemptionIndicator)
    {
        if (!is_null($delegatedAuthenticationExemptionIndicator) && (strlen($delegatedAuthenticationExemptionIndicator) > 1)) {
            throw new \InvalidArgumentException('invalid length for $delegatedAuthenticationExemptionIndicator when calling Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication., must be smaller than or equal to 1.');
        }

        $this->container['delegatedAuthenticationExemptionIndicator'] = $delegatedAuthenticationExemptionIndicator;

        return $this;
    }

    /**
     * Gets authenticationIndicator
     * @return string
     */
    public function getAuthenticationIndicator()
    {
        return $this->container['authenticationIndicator'];
    }

    /**
     * Sets authenticationIndicator
     * @param string $authenticationIndicator Indicates the type of Authentication request  01 - Payment transaction  02 - Recurring transaction  03 - Installment transaction  04 - Add card  05 - Maintain card  06 - Cardholder verification as part of EMV token ID and V
     * @return $this
     */
    public function setAuthenticationIndicator($authenticationIndicator)
    {
        if (!is_null($authenticationIndicator) && (strlen($authenticationIndicator) > 2)) {
            throw new \InvalidArgumentException('invalid length for $authenticationIndicator when calling Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication., must be smaller than or equal to 2.');
        }

        $this->container['authenticationIndicator'] = $authenticationIndicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\CyberSource\ObjectSerializer::sanitizeForSerialization($this));
    }
}


